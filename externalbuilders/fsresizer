#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#get the image file from the argument
IMAGEFILE=$1

#get the loop device the file is associated with
LOOPDEVICE=$(losetup -j "$IMAGEFILE" | awk -F : '{print $1}' | head -1)

#get where the file system image is mounted
MOUNTPOINT=$(df "$LOOPDEVICE" | awk '{print $6}' | grep -v M)

#verify that the virtual fs is still mounted
mountpoint -q "$MOUNTPOINT"
ismount=$?
#run until the device is unmounted
while [ $ismount -eq 0 ]
do

#wait for 1 second to not overuse the CPU 
sleep 1

#get the number of free bytes on the disk image
FREESPACE=$(( 1024 * $(df "$LOOPDEVICE" |awk '{print $4}' | grep -v A)))
echo $FREESPACE
#if there is less then 500 megabytes free 
if [[ $FREESPACE -lt 500000000 ]]
then
echo "Size of disk is below threshold. Resizing image..."
#get the current size of the file system image
SIZE=$(ls -l "$IMAGEFILE"  | awk '{print $5}')

#Add 250 megabytes
NEWSIZE=$(( $SIZE + 250000000))

#sparsely append $NEWSIZE-$SIZE worth of data to the specified image file
sudo dd if=/dev/zero of="$IMAGEFILE" bs=1 count=0 seek=$NEWSIZE oflag=append 

#update the size of the loop device to the size of the grown image
sudo losetup -c "$LOOPDEVICE"

#resize the ext4 FS on the loop device to become the new size of the image
sudo resize2fs  "$LOOPDEVICE"
fi

#verify that the virtual fs is still mounted
mountpoint -q "$MOUNTPOINT"
ismount=$?
done
echo "Image is no longer mounted. Resizer script is exiting."