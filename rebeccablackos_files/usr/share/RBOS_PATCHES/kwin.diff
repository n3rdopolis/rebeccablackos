diff --git a/libinput/connection.cpp b/libinput/connection.cpp
index 82c374d71..7664659d6 100644
--- a/libinput/connection.cpp
+++ b/libinput/connection.cpp
@@ -135,9 +135,8 @@ Connection *Connection::create(QObject *parent)
             s_context = nullptr;
             return nullptr;
         }
-        // TODO: don't hardcode seat name
-        if (!s_context->assignSeat("seat0")) {
-            qCWarning(KWIN_LIBINPUT) << "Failed to assign seat seat0";
+        if (!s_context->assignSeat(LogindIntegration::self()->seat().toUtf8().constData())) {
+            qCWarning(KWIN_LIBINPUT) << "Failed to assign seat" << LogindIntegration::self()->seat();
             delete s_context;
             s_context = nullptr;
             return nullptr;
diff --git a/main_wayland.cpp b/main_wayland.cpp
index 2107bc85a..434b5e39e 100644
--- a/main_wayland.cpp
+++ b/main_wayland.cpp
@@ -587,7 +587,6 @@ int main(int argc, char * argv[])
     QCommandLineOption framebufferDeviceOption(QStringLiteral("fb-device"),
                                                i18n("The framebuffer device to render to."),
                                                QStringLiteral("fbdev"));
-    framebufferDeviceOption.setDefaultValue(QStringLiteral("/dev/fb0"));
     QCommandLineOption x11DisplayOption(QStringLiteral("x11-display"),
                                         i18n("The X11 Display to use in windowed mode on platform X11."),
                                         QStringLiteral("display"));
diff --git a/plugins/platforms/fbdev/fb_backend.cpp b/plugins/platforms/fbdev/fb_backend.cpp
index e2899f0dd..bd1d5ea02 100644
--- a/plugins/platforms/fbdev/fb_backend.cpp
+++ b/plugins/platforms/fbdev/fb_backend.cpp
@@ -24,6 +24,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #include "scene_qpainter_fb_backend.h"
 #include "screens.h"
 #include "virtual_terminal.h"
+#include "udev.h"
 // system
 #include <fcntl.h>
 #include <unistd.h>
@@ -81,13 +82,18 @@ void FramebufferBackend::init()
 void FramebufferBackend::openFrameBuffer()
 {
     VirtualTerminal::self()->init();
-    int fd = LogindIntegration::self()->takeDevice(deviceIdentifier().constData());
+    QString framebufferDevice = deviceIdentifier().constData();
+    if (framebufferDevice.isEmpty()) {
+        framebufferDevice = QString(Udev().primaryFramebuffer()->devNode());
+    }
+    int fd = LogindIntegration::self()->takeDevice(framebufferDevice.toUtf8().constData());
+    qCDebug(KWIN_FB) << "Using frame buffer device:" << framebufferDevice;
     if (fd < 0) {
-        qCWarning(KWIN_FB) << "Failed to open frame buffer device through logind, trying without";
+        qCWarning(KWIN_FB) << "Failed to open frame buffer device:" << framebufferDevice << "through logind, trying without";
     }
-    fd = open(deviceIdentifier().constData(), O_RDWR | O_CLOEXEC);
+    fd = open(framebufferDevice.toUtf8().constData(), O_RDWR | O_CLOEXEC);
     if (fd < 0) {
-        qCWarning(KWIN_FB) << "failed to open frame buffer device";
+        qCWarning(KWIN_FB) << "failed to open frame buffer device:" << framebufferDevice;
         emit initFailed();
         return;
     }
@@ -119,6 +125,28 @@ bool FramebufferBackend::queryScreenInfo()
     if (ioctl(m_fd, FBIOGET_FSCREENINFO, &fixinfo) < 0 || ioctl(m_fd, FBIOGET_VSCREENINFO, &varinfo) < 0) {
         return false;
     }
+
+    // correct the color info, and try to turn on screens, assuming this is a non-primary framebuffer device
+    varinfo.grayscale = 0;
+    varinfo.transp.offset = 24;
+    varinfo.transp.length = 8;
+    varinfo.transp.msb_right = 0;
+    varinfo.red.offset = 16;
+    varinfo.red.length = 8;
+    varinfo.red.msb_right = 0;
+    varinfo.green.offset = 8;
+    varinfo.green.length = 8;
+    varinfo.green.msb_right = 0;
+    varinfo.blue.offset = 0;
+    varinfo.blue.length = 8;
+    varinfo.blue.msb_right = 0;
+    ioctl(m_fd, FBIOPUT_VSCREENINFO, &varinfo);
+
+    // Probe the device for new screen information.
+    if (ioctl(m_fd, FBIOGET_FSCREENINFO, &fixinfo) < 0 || ioctl(m_fd, FBIOGET_VSCREENINFO, &varinfo) < 0) {
+        return false;
+    }
+
     m_resolution = QSize(varinfo.xres, varinfo.yres);
     m_physicalSize = QSize(varinfo.width, varinfo.height);
     m_id = QByteArray(fixinfo.id);
diff --git a/plugins/platforms/fbdev/scene_qpainter_fb_backend.cpp b/plugins/platforms/fbdev/scene_qpainter_fb_backend.cpp
index ec311586c..50e365b4e 100644
--- a/plugins/platforms/fbdev/scene_qpainter_fb_backend.cpp
+++ b/plugins/platforms/fbdev/scene_qpainter_fb_backend.cpp
@@ -20,6 +20,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #include "scene_qpainter_fb_backend.h"
 #include "fb_backend.h"
 #include "composite.h"
+#include "logind.h"
 #include "cursor.h"
 #include "virtual_terminal.h"
 // Qt
@@ -75,7 +76,7 @@ void FramebufferQPainterBackend::present(int mask, const QRegion &damage)
 {
     Q_UNUSED(mask)
     Q_UNUSED(damage)
-    if (!VirtualTerminal::self()->isActive()) {
+    if (!LogindIntegration::self()->isActiveSession()) {
         return;
     }
     QPainter p(&m_backBuffer);
