diff --git a/composite.cpp b/composite.cpp
index c921c87..e1ca12d 100644
--- a/composite.cpp
+++ b/composite.cpp
@@ -240,9 +240,16 @@ void Compositor::slotCompositingOptionsInitialized()
     }
 #ifdef KWIN_HAVE_XRENDER_COMPOSITING
     case XRenderCompositing:
-        qCDebug(KWIN_CORE) << "Initializing XRender compositing";
-        m_scene = SceneXrender::createScene(this);
-        break;
+        if (! kwinApp()->shouldUseWaylandForCompositing())
+        {
+            qCDebug(KWIN_CORE) << "Initializing XRender compositing";
+            m_scene = SceneXrender::createScene(this);
+            break;
+        } else {
+           qCDebug(KWIN_CORE) << "Initializing QPainter compositing";
+           m_scene = SceneQPainter::createScene(this);
+           break;
+        }
 #endif
     case QPainterCompositing:
         qCDebug(KWIN_CORE) << "Initializing QPainter compositing";
@@ -272,9 +279,9 @@ void Compositor::slotCompositingOptionsInitialized()
             cm_selection->release();
         }
         if (kwinApp()->requiresCompositing()) {
-            qCCritical(KWIN_CORE) << "The used windowing system requires compositing";
-            qCCritical(KWIN_CORE) << "We are going to quit KWin now as it is broken";
-            qApp->quit();
+            //qCCritical(KWIN_CORE) << "The used windowing system requires compositing";
+            //qCCritical(KWIN_CORE) << "We are going to quit KWin now as it is broken";
+            //qApp->quit();
         }
         return;
     }
diff --git a/compositingprefs.cpp b/compositingprefs.cpp
index dccb81c..7d7dd80 100644
--- a/compositingprefs.cpp
+++ b/compositingprefs.cpp
@@ -57,6 +57,12 @@ bool CompositingPrefs::openGlIsBroken()
 
 bool CompositingPrefs::compositingPossible()
 {
+
+    if (kwinApp()->shouldUseWaylandForCompositing()) {
+        // don't do X specific checks if we are not going to use X for compositing
+        return true;
+    }
+
     // first off, check whether we figured that we'll crash on detection because of a buggy driver
     KConfigGroup gl_workaround_group(KSharedConfig::openConfig(), "Compositing");
     const QString unsafeKey(QLatin1String("OpenGLIsUnsafe") + (is_multihead ? QString::number(screen_number) : QString()));
@@ -64,11 +70,6 @@ bool CompositingPrefs::compositingPossible()
         gl_workaround_group.readEntry(unsafeKey, false))
         return false;
 
-    if (kwinApp()->shouldUseWaylandForCompositing()) {
-        // don't do X specific checks if we are not going to use X for compositing
-        return true;
-    }
-
     if (!Xcb::Extensions::self()->isCompositeAvailable()) {
         qCDebug(KWIN_CORE) << "No composite extension available";
         return false;





diff --git a/backends/fbdev/scene_qpainter_fb_backend.cpp b/backends/fbdev/scene_qpainter_fb_backend.cpp
index 7399bad..d84913b 100644
--- a/backends/fbdev/scene_qpainter_fb_backend.cpp
+++ b/backends/fbdev/scene_qpainter_fb_backend.cpp
@@ -64,7 +64,7 @@ QImage *FramebufferQPainterBackend::buffer()
 
 bool FramebufferQPainterBackend::needsFullRepaint() const
 {
-    return false;
+    return true;
 }
 
 void FramebufferQPainterBackend::prepareRenderingFrame()






diff --git a/backends/fbdev/fb_backend.cpp b/backends/fbdev/fb_backend.cpp
index c223145..f5efe8b 100644
--- a/backends/fbdev/fb_backend.cpp
+++ b/backends/fbdev/fb_backend.cpp
@@ -157,15 +157,48 @@ QImage::Format FramebufferBackend::imageFormat() const
     if (m_fd < 0) {
         return QImage::Format_Invalid;
     }
-    if (m_alpha.length == 0 &&
+
+    qCDebug(KWIN_FB) << "Bits Per Pixel: " << m_bitsPerPixel;
+    qCDebug(KWIN_FB) << "Buffer Length: " << m_bufferLength;
+    qCDebug(KWIN_FB) << "Bytes Per Line: " << m_bytesPerLine;
+    qCDebug(KWIN_FB) << "Alpha Length: " << m_alpha.length;
+    qCDebug(KWIN_FB) << "Red Length: "   << m_red.length;
+    qCDebug(KWIN_FB) << "Green Length: " << m_green.length;
+    qCDebug(KWIN_FB) << "Blue Length: "  << m_blue.length;
+    qCDebug(KWIN_FB) << "Blue Offset: "  << m_blue.offset;
+    qCDebug(KWIN_FB) << "Green Offset: " << m_green.offset;
+    qCDebug(KWIN_FB) << "Red Offset: "   << m_red.offset;
+    qCDebug(KWIN_FB) << "Alpha Offset: " << m_alpha.offset;
+
+    if (m_bitsPerPixel == 32 &&
             m_red.length == 8 &&
             m_green.length == 8 &&
             m_blue.length == 8 &&
             m_blue.offset == 0 &&
             m_green.offset == 8 &&
             m_red.offset == 16) {
+        qCDebug(KWIN_FB) << "Framebuffer format is RGB32";
         return QImage::Format_RGB32;
+    } else if (m_bitsPerPixel == 24 &&
+            m_red.length == 8 &&
+            m_green.length == 8 &&
+            m_blue.length == 8 &&
+            m_blue.offset == 0 &&
+            m_green.offset == 8 &&
+            m_red.offset == 16) {
+        qCDebug(KWIN_FB) << "Framebuffer Format is RGB888";
+        return QImage::Format_RGB888;
+    } else if (m_bitsPerPixel == 16 &&
+            m_red.length == 5 &&
+            m_green.length == 6 &&
+            m_blue.length == 5 &&
+            m_blue.offset == 0 &&
+            m_green.offset == 5 &&
+            m_red.offset == 11) {
+        qCDebug(KWIN_FB) << "Framebuffer Format is RGB16";
+        return QImage::Format_RGB16;
     }
+    qCWarning(KWIN_FB) << "Framebuffer format is unknown";
     return QImage::Format_Invalid;
 }
 
