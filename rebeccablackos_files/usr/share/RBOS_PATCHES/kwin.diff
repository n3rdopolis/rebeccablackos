diff --git a/src/effect/effect.cpp b/src/effect/effect.cpp
index 7809a0d001..281da07686 100644
--- a/src/effect/effect.cpp
+++ b/src/effect/effect.cpp
@@ -530,6 +530,11 @@ bool Effect::blocksDirectScanout() const
     return true;
 }
 
+QRegion Effect::adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const
+{
+    return region;
+}
+
 EffectPluginFactory::EffectPluginFactory()
 {
 }
diff --git a/src/effect/effect.h b/src/effect/effect.h
index 4f42a13420..a2184a4de9 100644
--- a/src/effect/effect.h
+++ b/src/effect/effect.h
@@ -914,6 +914,12 @@ public:
      */
     virtual bool blocksDirectScanout() const;
 
+    /**
+     * Override in order to modify backdrop effect regions
+     * @since 6.4
+     */
+    virtual QRegion adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const;
+
 public Q_SLOTS:
     virtual bool borderActivated(ElectricBorder border);
 };
diff --git a/src/effect/effecthandler.cpp b/src/effect/effecthandler.cpp
index acac8c15ef..232f75a3df 100644
--- a/src/effect/effecthandler.cpp
+++ b/src/effect/effecthandler.cpp
@@ -1645,6 +1645,15 @@ bool EffectsHandler::isInputPanelOverlay() const
     return true;
 }
 
+QRegion EffectsHandler::adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const
+{
+    QRegion ret = region;
+    for (const auto &[effectName, effect] : std::as_const(loaded_effects)) {
+        ret = effect->adjustBackgroundEffectRegion(w, ret);
+    }
+    return ret;
+}
+
 QQmlEngine *EffectsHandler::qmlEngine() const
 {
     return Scripting::self()->qmlEngine();
diff --git a/src/effect/effecthandler.h b/src/effect/effecthandler.h
index 5a4c6f24ad..e91d0e6226 100644
--- a/src/effect/effecthandler.h
+++ b/src/effect/effecthandler.h
@@ -728,6 +728,7 @@ public:
 
     KWin::EffectWindow *inputPanel() const;
     bool isInputPanelOverlay() const;
+    QRegion adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const;
 
     QQmlEngine *qmlEngine() const;
 
diff --git a/src/effect/offscreeneffect.cpp b/src/effect/offscreeneffect.cpp
index 7b45e9d2ff..734fc2b877 100644
--- a/src/effect/offscreeneffect.cpp
+++ b/src/effect/offscreeneffect.cpp
@@ -310,6 +310,7 @@ class CrossFadeEffectPrivate
 public:
     std::map<EffectWindow *, std::unique_ptr<CrossFadeWindowData>> windows;
     qreal progress;
+    bool redirectingWindow = false;
 };
 
 CrossFadeEffect::CrossFadeEffect(QObject *parent)
@@ -386,17 +387,13 @@ void CrossFadeEffect::redirect(EffectWindow *window)
     // Avoid including blur and contrast effects. During a normal painting cycle they
     // won't be included, but since we call effects->drawWindow() outside usual compositing
     // cycle, we have to prevent backdrop effects kicking in.
-    const QVariant blurRole = window->data(WindowForceBlurRole);
-    window->setData(WindowForceBlurRole, QVariant());
-    const QVariant contrastRole = window->data(WindowForceBackgroundContrastRole);
-    window->setData(WindowForceBackgroundContrastRole, QVariant());
+    d->redirectingWindow = true;
 
     effects->makeOpenGLContextCurrent();
     offscreenData->maybeRender(window);
     offscreenData->frameGeometryAtCapture = window->frameGeometry();
 
-    window->setData(WindowForceBlurRole, blurRole);
-    window->setData(WindowForceBackgroundContrastRole, contrastRole);
+    d->redirectingWindow = false;
 }
 
 void CrossFadeEffect::unredirect(EffectWindow *window)
@@ -433,6 +430,11 @@ bool CrossFadeEffect::blocksDirectScanout() const
     return false;
 }
 
+QRegion CrossFadeEffect::adjustBackgroundEffectRegion(EffectWindow *window, const QRegion &region) const
+{
+    return d->redirectingWindow ? QRegion() : region;
+}
+
 } // namespace KWin
 
 #include "moc_offscreeneffect.cpp"
diff --git a/src/effect/offscreeneffect.h b/src/effect/offscreeneffect.h
index 095f9aac91..2cf87523cf 100644
--- a/src/effect/offscreeneffect.h
+++ b/src/effect/offscreeneffect.h
@@ -125,6 +125,8 @@ public:
 
     bool blocksDirectScanout() const override;
 
+    QRegion adjustBackgroundEffectRegion(EffectWindow *window, const QRegion &region) const override;
+
     static bool supported();
 
 private:
diff --git a/src/plugins/blur/blur.cpp b/src/plugins/blur/blur.cpp
index a8a516ed83..19d46e36d8 100644
--- a/src/plugins/blur/blur.cpp
+++ b/src/plugins/blur/blur.cpp
@@ -460,7 +460,7 @@ QRegion BlurEffect::blurRegion(EffectWindow *w) const
         }
     }
 
-    return region;
+    return effects->adjustBackgroundEffectRegion(w, region);
 }
 
 void BlurEffect::prePaintScreen(ScreenPrePaintData &data, std::chrono::milliseconds presentTime)
@@ -530,10 +530,6 @@ bool BlurEffect::shouldBlur(const EffectWindow *w, int mask, const WindowPaintDa
     bool scaled = !qFuzzyCompare(data.xScale(), 1.0) && !qFuzzyCompare(data.yScale(), 1.0);
     bool translated = data.xTranslation() || data.yTranslation();
 
-    if ((scaled || (translated || (mask & PAINT_WINDOW_TRANSFORMED))) && !w->data(WindowForceBlurRole).toBool()) {
-        return false;
-    }
-
     return true;
 }
 
diff --git a/src/plugins/fallapart/fallapart.cpp b/src/plugins/fallapart/fallapart.cpp
index b7368c0ff5..5dcd126fb0 100644
--- a/src/plugins/fallapart/fallapart.cpp
+++ b/src/plugins/fallapart/fallapart.cpp
@@ -226,6 +226,11 @@ bool FallApartEffect::isActive() const
     return !windows.isEmpty();
 }
 
+QRegion FallApartEffect::adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const
+{
+    return windows.contains(w) ? QRegion() : region;
+}
+
 } // namespace
 
 #include "moc_fallapart.cpp"
diff --git a/src/plugins/fallapart/fallapart.h b/src/plugins/fallapart/fallapart.h
index b670e38de6..30558ec3da 100644
--- a/src/plugins/fallapart/fallapart.h
+++ b/src/plugins/fallapart/fallapart.h
@@ -33,6 +33,7 @@ public:
     void prePaintWindow(EffectWindow *w, WindowPrePaintData &data, std::chrono::milliseconds presentTime) override;
     void postPaintScreen() override;
     bool isActive() const override;
+    QRegion adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const override;
 
     int requestedEffectChainPosition() const override
     {
diff --git a/src/plugins/glide/glide.cpp b/src/plugins/glide/glide.cpp
index d111cb9acf..5027c9e06a 100644
--- a/src/plugins/glide/glide.cpp
+++ b/src/plugins/glide/glide.cpp
@@ -300,6 +300,11 @@ bool GlideEffect::blocksDirectScanout() const
     return false;
 }
 
+QRegion GlideEffect::adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const
+{
+    return m_animations.contains(w) ? QRegion() : region;
+}
+
 } // namespace KWin
 
 #include "moc_glide.cpp"
diff --git a/src/plugins/glide/glide.h b/src/plugins/glide/glide.h
index 913859a7c1..0b2d03898d 100644
--- a/src/plugins/glide/glide.h
+++ b/src/plugins/glide/glide.h
@@ -52,6 +52,7 @@ public:
     void postPaintWindow(EffectWindow *w) override;
     bool isActive() const override;
     int requestedEffectChainPosition() const override;
+    QRegion adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const override;
 
     static bool supported();
 
diff --git a/src/plugins/magiclamp/magiclamp.cpp b/src/plugins/magiclamp/magiclamp.cpp
index 3f8dde60df..2ddd8432b9 100644
--- a/src/plugins/magiclamp/magiclamp.cpp
+++ b/src/plugins/magiclamp/magiclamp.cpp
@@ -435,6 +435,11 @@ bool MagicLampEffect::isActive() const
     return !m_animations.isEmpty();
 }
 
+QRegion MagicLampEffect::adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const
+{
+    return m_animations.contains(w) ? QRegion() : region;
+}
+
 } // namespace
 
 #include "moc_magiclamp.cpp"
diff --git a/src/plugins/magiclamp/magiclamp.h b/src/plugins/magiclamp/magiclamp.h
index e82c8bd52e..54a53d4514 100644
--- a/src/plugins/magiclamp/magiclamp.h
+++ b/src/plugins/magiclamp/magiclamp.h
@@ -34,6 +34,7 @@ public:
     void prePaintWindow(EffectWindow *w, WindowPrePaintData &data, std::chrono::milliseconds presentTime) override;
     void postPaintScreen() override;
     bool isActive() const override;
+    QRegion adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const override;
 
     int requestedEffectChainPosition() const override
     {
diff --git a/src/plugins/slideback/slideback.cpp b/src/plugins/slideback/slideback.cpp
index 7ea188847b..124c47be3d 100644
--- a/src/plugins/slideback/slideback.cpp
+++ b/src/plugins/slideback/slideback.cpp
@@ -145,9 +145,6 @@ void SlideBackEffect::prePaintScreen(ScreenPrePaintData &data, std::chrono::mill
     }
 
     const QList<EffectWindow *> windows = effects->stackingOrder();
-    for (auto *w : windows) {
-        w->setData(WindowForceBlurRole, QVariant(true));
-    }
 
     effects->prePaintScreen(data, presentTime);
 }
@@ -158,10 +155,6 @@ void SlideBackEffect::postPaintScreen()
         effects->addRepaintFull();
     }
 
-    for (auto &w : effects->stackingOrder()) {
-        w->setData(WindowForceBlurRole, QVariant());
-    }
-
     effects->postPaintScreen();
 }
 
diff --git a/src/plugins/slidingpopups/slidingpopups.cpp b/src/plugins/slidingpopups/slidingpopups.cpp
index 799fedca2e..32f0d9e1ed 100644
--- a/src/plugins/slidingpopups/slidingpopups.cpp
+++ b/src/plugins/slidingpopups/slidingpopups.cpp
@@ -184,10 +184,6 @@ void SlidingPopupsEffect::postPaintWindow(EffectWindow *w)
     if (animationIt != m_animations.end()) {
         effects->addRepaint(w->expandedGeometry());
         if (animationIt->second.timeLine.done()) {
-            if (!w->isDeleted()) {
-                w->setData(WindowForceBackgroundContrastRole, QVariant());
-                w->setData(WindowForceBlurRole, QVariant());
-            }
             m_animations.erase(animationIt);
         }
     }
@@ -440,8 +436,6 @@ void SlidingPopupsEffect::slideIn(EffectWindow *w)
     }
 
     w->setData(WindowAddedGrabRole, QVariant::fromValue(static_cast<void *>(this)));
-    w->setData(WindowForceBackgroundContrastRole, QVariant(true));
-    w->setData(WindowForceBlurRole, QVariant(true));
 
     w->addRepaintFull();
 }
@@ -479,21 +473,12 @@ void SlidingPopupsEffect::slideOut(EffectWindow *w)
     }
 
     w->setData(WindowClosedGrabRole, QVariant::fromValue(static_cast<void *>(this)));
-    w->setData(WindowForceBackgroundContrastRole, QVariant(true));
-    w->setData(WindowForceBlurRole, QVariant(true));
 
     w->addRepaintFull();
 }
 
 void SlidingPopupsEffect::stopAnimations()
 {
-    for (const auto &[window, animation] : m_animations) {
-        if (!window->isDeleted()) {
-            window->setData(WindowForceBackgroundContrastRole, QVariant());
-            window->setData(WindowForceBlurRole, QVariant());
-        }
-    }
-
     m_animations.clear();
 }
 
diff --git a/src/plugins/wobblywindows/wobblywindows.cpp b/src/plugins/wobblywindows/wobblywindows.cpp
index dc4ca669ea..71cc1f9497 100644
--- a/src/plugins/wobblywindows/wobblywindows.cpp
+++ b/src/plugins/wobblywindows/wobblywindows.cpp
@@ -1164,6 +1164,61 @@ bool WobblyWindowsEffect::isResizeWobble() const
     return m_resizeWobble;
 }
 
+QRegion WobblyWindowsEffect::adjustBackgroundEffectRegion(EffectWindow *w, const QRegion &region) const
+{
+    static constexpr uint32_t subdivisions = 20;
+
+    if (region.isNull()) {
+        return region;
+    }
+
+    const auto it = windows.find(w);
+    if (it != windows.end()) {
+        const auto &ww = *it;
+        QRegion ret;
+        // divide the region into multiple smaller ones
+        for (uint32_t x = 0; x < subdivisions; x++) {
+            for (uint32_t y = 0; y < subdivisions; y++) {
+                const QRectF rect = QRectF(QPointF(x, y) / double(subdivisions), QSizeF(1, 1) / double(subdivisions));
+                for (const auto &regionRect : region) {
+                    // computeBezierPoint needs UV coordinates (0 - 1)
+                    const QRectF relativeRegionRect = QRectF(regionRect.x() / w->width(), regionRect.y() / w->height(),
+                                                             regionRect.width() / w->width(), regionRect.height() / w->height());
+                    const QRectF subRect = rect & relativeRegionRect;
+                    if (subRect.isEmpty()) {
+                        continue;
+                    }
+                    std::array edges = {
+                        Pair{subRect.x(), subRect.y()},
+                        Pair{subRect.x() + subRect.width(), subRect.y()},
+                        Pair{subRect.x(), subRect.y() + subRect.height()},
+                        Pair{subRect.x() + subRect.width(), subRect.y() + subRect.height()},
+                    };
+                    for (auto &edge : edges) {
+                        edge = computeBezierPoint(ww, edge);
+                        edge.x -= w->frameGeometry().x();
+                        edge.y -= w->frameGeometry().y();
+                    }
+
+                    // find the smallest rectangle completely encompassing the four edges
+                    auto topLeft = edges.front();
+                    auto bottomRight = topLeft;
+                    for (auto it = edges.begin() + 1; it != edges.end(); it++) {
+                        topLeft.x = std::min(topLeft.x, it->x);
+                        topLeft.y = std::min(topLeft.y, it->y);
+                        bottomRight.x = std::max(bottomRight.x, it->x);
+                        bottomRight.y = std::max(bottomRight.y, it->y);
+                    }
+                    ret += QRectF(QPointF(topLeft.x, topLeft.y), QPointF(bottomRight.x, bottomRight.y)).toAlignedRect();
+                }
+            }
+        }
+        return ret;
+    } else {
+        return region;
+    }
+}
+
 } // namespace KWin
 
 #include "moc_wobblywindows.cpp"
diff --git a/src/plugins/wobblywindows/wobblywindows.h b/src/plugins/wobblywindows/wobblywindows.h
index 96af6669db..3bc044cb7a 100644
--- a/src/plugins/wobblywindows/wobblywindows.h
+++ b/src/plugins/wobblywindows/wobblywindows.h
@@ -88,6 +88,8 @@ public:
     bool isMoveWobble() const;
     bool isResizeWobble() const;
 
+    QRegion adjustBackgroundEffectRegion(KWin::EffectWindow *w, const QRegion &region) const override;
+
 protected:
     void apply(EffectWindow *w, int mask, WindowPaintData &data, WindowQuadList &quads) override;
 
