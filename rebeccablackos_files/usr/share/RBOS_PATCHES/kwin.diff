diff --git a/libinput/connection.cpp b/libinput/connection.cpp
index 4a3122136..40b5931fe 100644
--- a/libinput/connection.cpp
+++ b/libinput/connection.cpp
@@ -134,8 +134,8 @@ Connection *Connection::create(QObject *parent)
             return nullptr;
         }
         // TODO: don't hardcode seat name
-        if (!s_context->assignSeat("seat0")) {
-            qCWarning(KWIN_LIBINPUT) << "Failed to assign seat seat0";
+        if (!s_context->assignSeat(getenv("XDG_SEAT"))) {
+            qCWarning(KWIN_LIBINPUT) << "Failed to assign seat";
             delete s_context;
             s_context = nullptr;
             return nullptr;
diff --git a/udev.cpp b/udev.cpp
index f65724a9d..36f91a086 100644
--- a/udev.cpp
+++ b/udev.cpp
@@ -51,6 +51,7 @@ public:
         SysName
     };
     void addMatch(Match match, const char *name);
+    void addMatchProperty(const char *name, const char *value);
     void scan();
     UdevDevice::Ptr find(std::function<bool(const UdevDevice::Ptr &)> test);
 
@@ -93,6 +94,14 @@ void UdevEnumerate::addMatch(UdevEnumerate::Match match, const char *name)
     }
 }
 
+void UdevEnumerate::addMatchProperty(const char *name, const char *value)
+{
+    if (m_enumerate.isNull()) {
+        return;
+    }
+    udev_enumerate_add_match_property(m_enumerate.data(), name, value);
+}
+
 void UdevEnumerate::scan()
 {
     if (m_enumerate.isNull()) {
@@ -133,6 +142,7 @@ UdevDevice::Ptr Udev::primaryGpu()
     UdevEnumerate enumerate(this);
     enumerate.addMatch(UdevEnumerate::Match::SubSystem, "drm");
     enumerate.addMatch(UdevEnumerate::Match::SysName, "card[0-9]*");
+    enumerate.addMatchProperty("ID_SEAT", getenv("XDG_SEAT"));
     enumerate.scan();
     return enumerate.find([](const UdevDevice::Ptr &device) {
         // TODO: check seat
