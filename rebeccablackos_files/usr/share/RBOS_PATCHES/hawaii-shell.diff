diff --git a/session/compositorlauncher.cpp b/session/compositorlauncher.cpp
index 3e5197d..14a2c42 100644
--- a/session/compositorlauncher.cpp
+++ b/session/compositorlauncher.cpp
@@ -123,6 +123,10 @@ void CompositorLauncher::start(bool fromLoginManager)
     m_compositor->setArguments(compositorArgs());
     m_compositor->setEnvironment(compositorEnv());
 
+   if (m_mode == WaylandMode) {
+	m_socketName = getenv("WAYLAND_GUEST");
+        m_compositor->setSocketName(m_socketName);
+   }
     // Summary
     printSummary();
 
@@ -283,6 +287,9 @@ QStringList CompositorLauncher::compositorArgs() const
     case NestedMode:
         args << QStringLiteral("--socket=%1").arg(m_compositor->socketName());
         break;
+    case WaylandMode:
+        args << QStringLiteral("--socket=%1").arg(m_compositor->socketName());
+        break;
     default:
         break;
     }
diff --git a/session/main.cpp b/session/main.cpp
index dbdcc79..489bcc1 100644
--- a/session/main.cpp
+++ b/session/main.cpp
@@ -134,6 +134,8 @@ int main(int argc, char *argv[])
         launcher->setMode(CompositorLauncher::HwComposerMode);
     else if (mode == QStringLiteral("nested"))
         launcher->setMode(CompositorLauncher::NestedMode);
+    else if (mode == QStringLiteral("wayland"))
+        launcher->setMode(CompositorLauncher::WaylandMode);
     else if (!mode.isEmpty()) {
         qWarning() << "Invalid mode argument" << mode;
         return 1;
diff --git a/session/processcontroller.h b/session/processcontroller.h
index 46be07a..89a164b 100644
--- a/session/processcontroller.h
+++ b/session/processcontroller.h
@@ -43,7 +43,8 @@ public:
     enum Mode {
         EglFSMode = 0,
         HwComposerMode,
-        NestedMode
+        NestedMode,
+        WaylandMode
     };
 
     ProcessController(const QString &mode, QObject *parent = Q_NULLPTR);
