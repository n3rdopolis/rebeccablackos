--- usr/bin/waylandloginmanager	2024-01-14 21:01:09.900838588 -0500
+++ usr/bin/waylandloginmanagertui	2024-01-14 21:15:40.111887848 -0500
@@ -18,9 +18,9 @@
 
 #This script is the WaylandLoginManager it handles a graphical login for the user, and allows the user to start multiple types of Wayland sessions, specified in wsession files, and it supports autologin, and user switching. It supports watching the active session until it fails, so that it swiches back to the needed TTY for the user.
 
-#The main server it displays on is refered to as the loginmanagerdisplay. it runs as non root, as well as the kdialog dialogs
+#The main server it displays on is refered to as the loginmanagerdisplay. it runs as non root, as well as the dialog dialogs
 
-#It depends on kdialog kbd, weston, socat, and libauthen-pam-perl
+#It depends on dialog kbd, socat, cage, foot, and libauthen-pam-perl
 
 #User sessions can have /etc/wlprofile or ~/.local/wlprofile (similar to xprofile only for Wayland)
 
@@ -804,7 +804,7 @@
   export MAX_UI_ATTEMPTS=5
   ######################################################
 
-  #User that the kdialog dialogs and the loginmanagerdisplay (weston instance for the waylandloginmanager runs as
+  #User that the dialog dialogs and the loginmanagerdisplay (weston instance for the waylandloginmanager runs as
   export LOGINMANAGERDISPLAYUSER=waylandloginmanager
   #User that reads from the loginmanager_control socket, and filters the command sent to it to loginmanager_listener FIFO
   export FIFOREADERUSER=waylandloginmanager
@@ -818,6 +818,7 @@
   #Get the UID of the $LOGINMANAGERDISPLAYUSER
   export LOGINMANAGERDISPLAYUID=$(id $LOGINMANAGERDISPLAYUSER -u)
   export XDG_RUNTIME_DIR=/run/user/$LOGINMANAGERDISPLAYUID
+  export TERM=xterm-256color
 
   #Require root privlages
   if [[ $UID != 0 ]]
@@ -862,11 +863,10 @@
     exit 1
   fi
 
-  #Create home folder
-  mkdir -p /run/waylandloginmanager/home
-  export HOME=/run/waylandloginmanager/home
-  chmod 700 /run/waylandloginmanager/home
-  chown $LOGINMANAGERDISPLAYUSER /run/waylandloginmanager/home
+  #Create PTY folder
+  mkdir -p /run/waylandloginmanager/ptys
+  chmod 700 /run/waylandloginmanager/ptys
+  chown $LOGINMANAGERDISPLAYUSER /run/waylandloginmanager/ptys
 
   #Prepare logging for the loginmanagerdisplay
   GetConfigKey wlmdebug "" 0 2 wlmdebug
@@ -944,7 +944,7 @@
   export QT_QPA_PLATFORMTHEME=qt6ct
   export QT_LOGGING_TO_CONSOLE=1
   #Set the default path for weston
-  export DEFAULTWAYLANDSERVER=$(which weston 2>/dev/null)
+  export DEFAULTWAYLANDSERVER=$(which cage 2>/dev/null)
   #Specify where wsession files are found
   export WSESSIONSPATH="/usr/share/wsessions.d"
 
@@ -957,21 +957,8 @@
     WriteToLog "libweston path: $LibWestonPath, Weston plugin path: $WestonPluginPath"
   fi
 
-  if [[ -e "$LibWestonPath/drm-backend.so" ]]
-  then
-    WestonSupportsDRM=1
-  else
-    WriteToLog "Installed version of Weston does not have a drm backend. The drm backend is now disabled."
-    WestonSupportsDRM=0
-  fi
-
-  if [[ -e "$LibWestonPath/fbdev-backend.so" ]]
-  then
-    WestonSupportsFBDev=1
-  else
-    WriteToLog "Installed version of Weston does not have a framebuffer backend. The framebuffer fallback is now disabled."
-    WestonSupportsFBDev=0
-  fi
+  WestonSupportsDRM=1
+  WestonSupportsFBDev=0
 
   #Weston in wsessions can bee a host for. Weston must be installed for this feature to work
   if [[ ! -z $WestonPath && -e "$WestonPluginPath/fullscreen-shell.so" ]]
@@ -1002,7 +989,7 @@
   #Determine if this is running on a live instance, if booted with casper
   GetConfigKey wlmlivemode "" 0 0 LiveCDMode
 
-  KDIALOGCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- kdialog"
+  UIDIALOGCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- dialog"
   WAYLANDINFOCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- wayland-info"
   if [[ $seat0HasTTYs == 1 ]]
   then
@@ -1013,8 +1000,8 @@
     TTYWIZARDCMD=true
   fi
 
-  command -v kdialog > /dev/null
-  KdialogCommandFoundResult=$?
+  command -v dialog > /dev/null
+  DialogCommandFoundResult=$?
 
   #Detect hardware abilities, first try to see if the system has kernel mode setting, then try framebuffer. if both aren't supported, bring up a text mode dialog
   GetConfigKey wlmforcefbdev "" 0 1 wlmforcefbdev
@@ -1092,7 +1079,7 @@
 
   ReadyNotifySent=0
   #Get the TTY that will hold the Wayland server that displays the login screen for seat0
-  ProbeFilesExist "/run/user/$LOGINMANAGERDISPLAYUID/loginmanagerdisplay_*" LoginManagerDisplayFileProbe
+  ProbeFilesExist "/run/waylandloginmanager/ptys/*" LoginManagerDisplayFileProbe
   if [[ $LoginManagerDisplayFileProbe == 1 ]]
   then
     RUNNINGWLMCOUNT=$(systemctl show wlm-loginmanagerdisplay_*.service -p MainPID --value |& wc -l )
@@ -1337,10 +1324,7 @@
   SeatFileName=${SeatFileNames[$ReturnSeatIndex]}
   export WAYLAND_DISPLAY=loginmanagerdisplay_"$SeatFileName"
   SetFallbackEnvironmentVariables $3
-  $KDIALOGCMD --title="Login Manager" --msgbox "$2" 2>/dev/null &
-  DialogPID=$!
-  $SLEEPCMD $1
-  TerminateJobPID $DialogPID 15 0
+  $UIDIALOGCMD --title "Login Manager" --no-ok --no-cancel --pause "$2" 10 40 "$1" 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
 }
 
 #This function takes 1 argument, the seat that the loginmanagerdisplay belongs to, and waits for the loginmanagerdisplay to startup
@@ -1350,26 +1334,10 @@
   GetStartedSeatIndex $CurrentSeat
   SeatFileName=${SeatFileNames[$ReturnSeatIndex]}
 
-  while [[ ! -e /run/user/$LOGINMANAGERDISPLAYUID/loginmanagerdisplay_"$SeatFileName" ]]
+  while [[ ! -e /run/waylandloginmanager/ptys/"$SeatFileName" ]]
   do
     $SLEEPCMD 1
   done
-
-  export WAYLAND_DISPLAY=loginmanagerdisplay_"$SeatFileName"
-  command -v wayland-info &> /dev/null
-  WaylandInfoCommandExists=$?
-  if [[ $WaylandInfoCommandExists == 0 ]]
-  then
-    while [[ $($WAYLANDINFOCMD &>/dev/null; echo $?) != 0 ]]
-    do
-      $SLEEPCMD 1
-    done
-  else
-    while [[ $(fuser -s /run/user/$LOGINMANAGERDISPLAYUID/loginmanagerdisplay_"$SeatFileName" &>/dev/null; echo $?) == 1 ]]
-    do
-      $SLEEPCMD 1
-    done
-  fi
 }
 
 #This takes 1 argument, the user home dir to search for wsession files under $HOME/.local/share/wsessions.d/*.desktop.
@@ -2055,7 +2023,7 @@
       done
       if [[ $WSESSIONNUMBER == -1 ]]
       then
-        $KDIALOGCMD --title="Session Selection" --error "$DEFAULTWSESSION set as default session for $SessionUser, but was not found, configured correctly, or supported by the hardware in this seat." 2>/dev/null
+        $UIDIALOGCMD --title "Session Selection" --msgbox "$DEFAULTWSESSION set as default session for $SessionUser, but was not found, configured correctly, or supported by the hardware in this seat." 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
         WriteToLog "$DEFAULTWSESSION set as default session for $SessionUser, but was not found in $WSESSIONSPATHS, configured correctly, or supported by the hardware in this seat, $CurrentHandleSeat ."
         return 1
       fi
@@ -2091,7 +2059,7 @@
       unset IFS
       #select the session. Each line is handled as a column. currently there are 9 collumns. So line 1 is is column 1, line 2 is in collumn 2, and line 10 is in collumn 1 again
       #The dialog then outputs the selected session's lines into the WSESSIONDATA variable. each collumn is a different aspect of the wsessions
-      WSESSIONNUMBER=$($KDIALOGCMD --geometry=750x300+0+0 --title="$SessionSelectionTitleHint" --menu "Select a Wayland Desktop Environment to use" -- "${WSESSIONPICKLIST[@]}" 2>/dev/null )
+      WSESSIONNUMBER=$($UIDIALOGCMD --title "$SessionSelectionTitleHint" --menu "Select a Wayland Desktop Environment to use" 30 90 0 -- "${WSESSIONPICKLIST[@]}" 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName)
       #Abort if the user selected cancel on the dialog
       CancelOrOK=$?
       if [[ $CancelOrOK != 0 ]]
@@ -2108,7 +2076,7 @@
   else
     unset WSESSIONDATA
     unset WSESSIONNUMBER
-    $KDIALOGCMD --title="Session Selection" --error "No sessions are installed, configured correctly, or supported by the hardware in this seat." 2>/dev/null
+    $UIDIALOGCMD --title "Session Selection" --msgbox "No sessions are installed, configured correctly, or supported by the hardware in this seat." 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
     WriteToLog "No sessions are installed in $WSESSIONSPATHS, configured correctly, or supported by the hardware in this seat, $CurrentHandleSeat ."
     return 1
   fi
@@ -2144,16 +2112,11 @@
 
 This is the optimal way to run Weston or other Wayland servers."
   fi
-  $KDIALOGCMD --title="System Information" --msgbox "This is a third party fan made distribution!
+  $UIDIALOGCMD --title "Information" --msgbox "This is a third party fan made distribution!
 
 $BACKENDSTRING
 
-$SEATSTRING
-
-The key icon brings up a login prompt
-The arrow icon brings up a prompt to switch between running sessions
-The red X icon brings up a shutdown prompt
-The i icon shows this help prompt" &> /dev/null
+$SEATSTRING" 30 60 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
 
 }
 
@@ -2221,7 +2184,7 @@
 
   unset ChangeSession
   #prompt for the list of running sessions, and return the session ID. (which is used in all of the arrays for Session PID, user name, etc)
-  ChangeSession=$($KDIALOGCMD --title="Switch User" --menu "Select a running session to change into" --geometry=500x300+0+0 -- "${SessionList[@]}" 2>/dev/null )
+  ChangeSession=$($UIDIALOGCMD --title "Switch User" --menu "Select a running session to change into" 50 80 0 -- "${SessionList[@]}" 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName )
   CancelOrOK=$?
   #Abort if the user selected cancel on the dialog
   if [[ $CancelOrOK != 0 ]]
@@ -2252,7 +2215,7 @@
         #hand over the logind session ID to allow desktop permissions to work.
         loginctl activate $ChangeSessionID &>/dev/null
       else
-        $KDIALOGCMD --title="Switch User" --msgbox "The selected session was not found. The session may have quit." 2>/dev/null
+        $UIDIALOGCMD --title "Switch User" --msgbox "The selected session was not found. The session may have quit." 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
       fi
     fi
   fi
@@ -2509,7 +2472,7 @@
     #The display in the dialog should be "Firstname Lastname    (loginname)"
     UserDisplayName="$UserDisplayName   (${UserData[1]})" 
     unset IFS
-    #add the data to the USERLISTSTRING that gets sent into kdialog. line 1 is the user login name, Line 2 is the display name, and then line 3 is the login of the next user...
+    #add the data to the USERLISTSTRING that gets sent into dialog. line 1 is the user login name, Line 2 is the display name, and then line 3 is the login of the next user...
     USERLISTSTRING+="$UserName"
     USERLISTSTRING+=$'\n'
     USERLISTSTRING+="$UserDisplayName"
@@ -2526,7 +2489,7 @@
   unset IFS
 
   #present the list of the users to the system
-  LOGINUSER=$($KDIALOGCMD --title="Username" --menu "Select a user from the list to log into." -- "${USERLISTSTRING[@]}" 2>/dev/null )
+  LOGINUSER=$($UIDIALOGCMD --title "Username" --menu "Select a user from the list to log into." 30 70 0 -- "${USERLISTSTRING[@]}" 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName )
   CancelOrOK=$?
   export LOGINUSER
   #Abort if the user selected cancel on the dialog
@@ -2537,7 +2500,7 @@
   #if there is no user selected or if the LOGINUSER is -1, as in the user opted to enter a username manually prompt for the username with a text dialog
   if [[ -z $LOGINUSER || $LOGINUSER == -1 ]]
   then
-    LOGINUSER=$($KDIALOGCMD --title="Username" --inputbox "Enter the User Name:" 2>/dev/null)
+    LOGINUSER=$($UIDIALOGCMD --title "Username" --inputbox "Enter the User Name:" 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName )
     CancelOrOK=$?
     #Abort if the user selected cancel on the dialog
     if [[ $CancelOrOK != 0 ]]
@@ -2570,7 +2533,7 @@
       passwordresult=0
     else
       #Prompt for the users password
-      USERPASSWORD=$( $KDIALOGCMD --title="Login for $LOGINUSER" --password "Type your password" 2>/dev/null )
+      USERPASSWORD=$( $UIDIALOGCMD --title "Login for $LOGINUSER" --insecure --passwordbox "Type your password" 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName )
       CancelOrOK=$?
       #Abort if the user selected cancel on the dialog
       if [[ $CancelOrOK != 0 ]]
@@ -2586,7 +2549,7 @@
     fi
     if [[ $passwordresult != 0 ]]
     then
-      $KDIALOGCMD --title="Login Failed" --msgbox "Invalid password for $LOGINUSER, or username invalid" 2>/dev/null
+      $UIDIALOGCMD --msgbox "Invalid password for $LOGINUSER, or username invalid" 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
       WriteToLog "Invalid password for $LOGINUSER, or username invalid"
     else
       export USERHOME=$(eval echo ~$LOGINUSER)
@@ -2605,12 +2568,12 @@
         TTYSTRING=""
       fi
       WriteToLog "Opening a session for $LOGINUSER $TTYSTRING on seat $CurrentSeat"
-      DialogWait 3 "Selected session is attempting to start. Please wait..." "$CurrentSeat" &
+      #DialogWait 3 "Selected session is attempting to start. Please wait..." "$CurrentSeat" &
       DoSessionLock=0
       StartUserSession "$SessionTTY" "$CurrentSeat" "$LOGINUSER" $DoSessionLock "$WSESSIONDATA" &
     fi
   else
-    $KDIALOGCMD --title="System Error" --error "Not Enough TTYs!" 2>/dev/null
+    $UIDIALOGCMD --msgbox "Not Enough TTYs!" 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
     WriteToLog "Not Enough TTYs for user login!"
   fi
 }
@@ -2629,10 +2592,12 @@
     export WAYLAND_DISPLAY=loginmanagerdisplay_"$SeatFileName"
     SetFallbackEnvironmentVariables $CurrentSeat
     SessionPromptThreshold=1
+    PromptAsUser=0
   else
     SetCommonConfig
-    KDIALOGCMD=kdialog
+    UIDIALOGCMD="cage -- foot -- dialog"
     SessionPromptThreshold=2
+    PromptAsUser=1
 
     ACTIONSTRING="Switch User"$'\n'"Switch User"$'\n'"Logoff"$'\n'"Logoff Session"
   fi
@@ -2720,7 +2685,12 @@
   ACTIONSTRING=($ACTIONSTRING)
   unset IFS
 
-  ACTION=$($KDIALOGCMD --title="Leave..." --menu "What do you want to do?" -- "${ACTIONSTRING[@]}" 2>/dev/null )
+  if [[ $PromptAsUser == 0 ]]
+  then
+    ACTION=$($UIDIALOGCMD --title "Leave..." --menu "What do you want to do?" 30 60 0 -- "${ACTIONSTRING[@]}" 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName )
+  else
+    ACTION=$($UIDIALOGCMD --title "Leave..." --menu "What do you want to do?" 30 60 0 -- "${ACTIONSTRING[@]}" 2>&1)
+  fi
 
   CancelOrOK=$?
   #Abort if the user selected cancel on the dialog
@@ -2742,7 +2712,12 @@
   fi
 
   #Prompt the user if they are sure they want to execute the selected action
-  $KDIALOGCMD --title="Leave..." --yesno "Are you sure you want to ${ACTION}? $SESSIONINFO" 2>/dev/null
+  if [[ $PromptAsUser == 0 ]]
+  then
+    $UIDIALOGCMD --title "Leave..." --yesno "Are you sure you want to ${ACTION}? $SESSIONINFO" 10 60 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
+  else
+    $UIDIALOGCMD --title "Leave..." --yesno "Are you sure you want to ${ACTION}? $SESSIONINFO" 10 60 2>&1
+  fi
   CONFIRM=$?
   if [[ $CONFIRM != 0 ]]
   then
@@ -2787,7 +2762,12 @@
   #if the selected action failed, tell the user
   if [[ $RESULT != 0 ]]
   then
-    $KDIALOGCMD --title="Failure" --error "Failed to $ACTION" 2>/dev/null
+    if [[ $PromptAsUser == 0 ]]
+    then
+      $UIDIALOGCMD --title "Failure" --msgbox "Failed to $ACTION" 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
+    else
+      $UIDIALOGCMD --title "Failure" --msgbox "Failed to $ACTION" 10 40 2>&1
+    fi
   fi
 }
 
@@ -2978,7 +2958,7 @@
         OutputArgs=""
       fi
       SetFallbackEnvironmentVariables $CurrentSeat
-      LOGINMANAGERDISPLAYENVSTRING=""
+      LOGINMANAGERDISPLAYENVSTRING=" --setenv=TERM=xterm-256color --setenv=WLR_LIBINPUT_NO_DEVICES=1 --setenv=WLR_NO_HARDWARE_CURSORS=1 --setenv=WLR_RENDERER_ALLOW_SOFTWARE=1 --setenv=WLR_RENDERER=pixman"
       if [[ ! -z $LIBGL_ALWAYS_SOFTWARE ]]
       then
         LOGINMANAGERDISPLAYENVSTRING+=" --setenv=LIBGL_ALWAYS_SOFTWARE=$LIBGL_ALWAYS_SOFTWARE "
@@ -2987,7 +2967,7 @@
       then
         LOGINMANAGERDISPLAYENVSTRING+=" --setenv=GBM_ALWAYS_SOFTWARE=$GBM_ALWAYS_SOFTWARE "
       fi
-      systemd-run --unit=wlm-loginmanagerdisplay_$SeatFileName -p CollectMode=inactive-or-failed -p PrivateTmp=yes -p BindPaths="/tmp/.X11-unix/ /tmp/.ICE-unix/ /tmp/.XIM-unix/ /tmp/.font-unix/" -p PAMName=waylandloginmanager-loginmanagerdisplay -p User="$LOGINMANAGERDISPLAYUSER" $OutputArgs -p WorkingDirectory=\~ $LOGINMANAGERDISPLAYENVSTRING --setenv=LD_LIBRARY_PATH="$LD_LIBRARY_PATH" --setenv=PATH="$PATH" --setenv=XDG_CONFIG_HOME="$XDG_CONFIG_HOME" --setenv=XDG_SEAT=$CurrentSeat --setenv=HOME="$HOME" $DEFAULTWAYLANDSERVER --backend=$WESTONBACKENDSTRING $PIXMANARGS --socket=loginmanagerdisplay_$SeatFileName --log=/var/log/waylandloginmanager/loginmanagerdisplays/loginmanagerdisplay_$SeatFileName.log --config="$XDG_CONFIG_HOME/loginmanagerdisplay.ini" &>/dev/null
+      systemd-run --unit=wlm-loginmanagerdisplay_$SeatFileName -p CollectMode=inactive-or-failed -p PrivateTmp=yes -p BindPaths="/tmp/.X11-unix/ /tmp/.ICE-unix/ /tmp/.XIM-unix/ /tmp/.font-unix/" -p PAMName=waylandloginmanager-loginmanagerdisplay -p User="$LOGINMANAGERDISPLAYUSER" $OutputArgs -p WorkingDirectory=\~ $LOGINMANAGERDISPLAYENVSTRING --setenv=LD_LIBRARY_PATH="$LD_LIBRARY_PATH" --setenv=PATH="$PATH" --setenv=XDG_CONFIG_HOME="$XDG_CONFIG_HOME" --setenv=XDG_SEAT=$CurrentSeat --setenv=HOME="$HOME" --setenv=SeatFileName=$SeatFileName $DEFAULTWAYLANDSERVER -m last -d -s -- foot --config=/etc/footkiosk.conf -- bash -c "trap '' 2; rm /run/waylandloginmanager/ptys/\$SeatFileName &>/dev/null; ln -s \$(tty) /run/waylandloginmanager/ptys/\$SeatFileName; sleep inf" &>/dev/null
 
       LOGINMANAGERDISPLAYREADY=1
       TRYCOUNT=0
@@ -3127,7 +3107,7 @@
    else
     export AutoSessionTTY=0
   fi
-  DialogWait 3 "Selected session is attempting to start. Please wait..." "$1" &
+  #DialogWait 3 "Selected session is attempting to start. Please wait..." "$CurrentSeat" &
   #if there is a tty for the autologin session, the autologin is configured, start the autologin session
   if [[ $AutoSessionTTY -ne -1 ]]
   then
@@ -3152,7 +3132,7 @@
 
     StartUserSession "$AutoSessionTTY" "$CurrentSeat" "$AUTOLOGINUSER" $DoSessionLock "$WSESSIONDATA" &
   else
-    $KDIALOGCMD --title="System Error" --error "Not Enough TTYs!" 2>/dev/null
+    $UIDIALOGCMD --msgbox "Not Enough TTYs!" 10 40 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName
     WriteToLog "Not Enough TTYs for autologin!"
   fi
 }
@@ -3196,7 +3176,7 @@
   ActionMenu=($ActionMenu)
   unset IFS
 
-  USERACTION=$($KDIALOGCMD --title="Login Manager" --menu "Select an Action" -- "${ActionMenu[@]}"  2>> /var/log/waylandloginmanager/loginmanagerdisplays/loginmanagerdisplay_"$SeatFileName".log)
+  USERACTION=$($UIDIALOGCMD --title "Login Manager" --menu "Select an Action" 20 60 0 -- "${ActionMenu[@]}" 2>&1 > /run/waylandloginmanager/ptys/$SeatFileName < /run/waylandloginmanager/ptys/$SeatFileName)
   DIALOGSTATUS=$?
   #If the useraction exists (the user did not click cancel), then send the command to the loginmanager_control
   if [[ ! -z $USERACTION ]]
@@ -3558,9 +3538,9 @@
       fi
     done
 
-    if [[ $KdialogCommandFoundResult != 0 ]]
+    if [[ $DialogCommandFoundResult != 0 ]]
     then
-      WriteToLog "kdialog is not installed"
+      WriteToLog "dialog is not installed"
       UIPromptAttemptsMaxedOut=1
     fi
 
@@ -3793,7 +3773,7 @@
         loginctl lock-session $(loginctl show-seat "$SEATARG" -p ActiveSession --value 2>/dev/null) &>/dev/null
         loginctl activate $LOGINMANAGERDISPLAYSESSION &>/dev/null
       fi
-      if [[ ! $(jobs -p -r) =~ (^|[[:space:]])${LastSwitchPIDs[$SeatIndexID]}([[:space:]]|$) ]]
+      if [[ $(jobs -p -r | grep -E ^${LastSwitchPIDs[$SeatIndexID]}$\|^${LastLoginPIDs[$SeatIndexID]}$\|^${LastLeavePIDs[$SeatIndexID]}$\|^${LastInfoPIDs[$SeatIndexID]}$) == "" ]]
       then
         if [[ ! -z ${LastUserActionPIDs[$SeatIndexID]} ]]
         then
@@ -3839,7 +3819,7 @@
       else
         WriteToLog "received command $COMMAND for seat $SEATARG"
       fi
-      if [[ ! $(jobs -p -r) =~ (^|[[:space:]])${LastLoginPIDs[$SeatIndexID]}([[:space:]]|$) ]]
+      if [[ $(jobs -p -r | grep -E ^${LastSwitchPIDs[$SeatIndexID]}$\|^${LastLoginPIDs[$SeatIndexID]}$\|^${LastLeavePIDs[$SeatIndexID]}$\|^${LastInfoPIDs[$SeatIndexID]}$) == "" ]]
       then
         if [[ ! -z ${LastUserActionPIDs[$SeatIndexID]} ]]
         then
@@ -3868,7 +3848,7 @@
       else
         WriteToLog "received command $COMMAND for seat $SEATARG"
       fi
-      if [[ ! $(jobs -p -r) =~ (^|[[:space:]])${LastLeavePIDs[$SeatIndexID]}([[:space:]]|$) ]]
+      if [[ $(jobs -p -r | grep -E ^${LastSwitchPIDs[$SeatIndexID]}$\|^${LastLoginPIDs[$SeatIndexID]}$\|^${LastLeavePIDs[$SeatIndexID]}$\|^${LastInfoPIDs[$SeatIndexID]}$) == "" ]]
       then
         if [[ ! -z ${LastUserActionPIDs[$SeatIndexID]} ]]
         then
@@ -3914,7 +3894,7 @@
       else
         WriteToLog "received command $COMMAND for seat $SEATARG"
       fi
-      if [[ ! $(jobs -p -r) =~ (^|[[:space:]])${LastInfoPIDs[$SeatIndexID]}([[:space:]]|$) ]]
+      if [[ $(jobs -p -r | grep -E ^${LastSwitchPIDs[$SeatIndexID]}$\|^${LastLoginPIDs[$SeatIndexID]}$\|^${LastLeavePIDs[$SeatIndexID]}$\|^${LastInfoPIDs[$SeatIndexID]}$) == "" ]]
       then
         if [[ ! -z ${LastUserActionPIDs[$SeatIndexID]} ]]
         then
@@ -3986,6 +3966,7 @@
 
     #Start the filter that will only send valid data to the main command FIFO
     WLM_SOCKET_FILTER=1 $0 --socketfilter &
+    FIFOFilterPID=$!
 
     #Start the loginmanager
     WaylandLoginManagerMain
