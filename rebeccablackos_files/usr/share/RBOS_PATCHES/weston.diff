diff --git a/fullscreen-shell/fullscreen-shell.c b/fullscreen-shell/fullscreen-shell.c
index 7368cb42..4f909849 100644
--- a/fullscreen-shell/fullscreen-shell.c
+++ b/fullscreen-shell/fullscreen-shell.c
@@ -569,9 +569,9 @@ fs_output_configure_for_mode(struct fs_output *fsout,
 	mode.flags = 0;
 	mode.refresh = fsout->pending.framerate;
 
-	ret = weston_output_mode_switch_to_temporary(fsout->output, &mode,
-					fsout->output->native_scale);
-
+	//ret = weston_output_mode_switch_to_temporary(fsout->output, &mode,
+	//				fsout->output->native_scale);
+	ret= 0;
 	if (ret != 0) {
 		/* The mode switch failed.  Clear the pending and
 		 * reconfigure as per normal */



diff --git a/libweston/compositor-drm.c b/libweston/compositor-drm.c
index 10adb463..44b2e448 100644
--- a/libweston/compositor-drm.c
+++ b/libweston/compositor-drm.c
@@ -3502,8 +3502,13 @@ drm_backend_create(struct weston_compositor *compositor,
 	struct udev_device *drm_device;
 	struct wl_event_loop *loop;
 	const char *seat_id = default_seat;
+	const char *session_seat;
 	int ret;
 
+	session_seat=getenv("XDG_SEAT");
+	if (session_seat)
+		seat_id=session_seat;
+
 	weston_log("initializing drm backend\n");
 
 	b = zalloc(sizeof *b);
diff --git a/libweston/compositor-fbdev.c b/libweston/compositor-fbdev.c
index e80a5040..81e5ec3b 100644
--- a/libweston/compositor-fbdev.c
+++ b/libweston/compositor-fbdev.c
@@ -712,6 +712,11 @@ fbdev_backend_create(struct weston_compositor *compositor,
 {
 	struct fbdev_backend *backend;
 	const char *seat_id = default_seat;
+	const char *session_seat;
+
+	session_seat=getenv("XDG_SEAT");
+	if (session_seat)
+		seat_id=session_seat;
 
 	weston_log("initializing fbdev backend\n");
 




diff --git a/libweston/launcher-logind.c b/libweston/launcher-logind.c
index a069bd4f..11627590 100644
--- a/libweston/launcher-logind.c
+++ b/libweston/launcher-logind.c
@@ -762,18 +762,20 @@ launcher_logind_connect(struct weston_launcher **out, struct weston_compositor *
 		free(t);
 		goto err_session;
 	}
-	free(t);
 
-	r = weston_sd_session_get_vt(wl->sid, &wl->vtnr);
-	if (r < 0) {
-		weston_log("logind: session not running on a VT\n");
-		goto err_session;
-	} else if (tty > 0 && wl->vtnr != (unsigned int )tty) {
-		weston_log("logind: requested VT --tty=%d differs from real session VT %u\n",
-			   tty, wl->vtnr);
-		r = -EINVAL;
-		goto err_session;
+        if (!strcmp(t, "seat0")) {
+		r = weston_sd_session_get_vt(wl->sid, &wl->vtnr);
+		if (r < 0) {
+			weston_log("logind: session not running on a VT\n");
+			goto err_session;
+		} else if (tty > 0 && wl->vtnr != (unsigned int )tty) {
+			weston_log("logind: requested VT --tty=%d differs from real session VT %u\n",
+				   tty, wl->vtnr);
+			r = -EINVAL;
+			goto err_session;
+		}
 	}
+	free(t);
 
 	loop = wl_display_get_event_loop(compositor->wl_display);
 	r = weston_dbus_open(loop, DBUS_BUS_SYSTEM, &wl->dbus, &wl->dbus_ctx);





diff --git a/compositor/main.c b/compositor/main.c
index f632fc0e..5358f25a 100644
--- a/compositor/main.c
+++ b/compositor/main.c
@@ -574,6 +574,7 @@ usage(int error_code)
 		"Options for fbdev-backend.so:\n\n"
 		"  --tty=TTY\t\tThe tty to use\n"
 		"  --device=DEVICE\tThe framebuffer device to use\n"
+		"  --seat=SEAT\t\tThe seat that weston should run on, instead of the seat defined in XDG_SEAT\n"
 		"\n");
 #endif
 
@@ -1446,6 +1447,7 @@ load_fbdev_backend(struct weston_compositor *c,
 	const struct weston_option fbdev_options[] = {
 		{ WESTON_OPTION_INTEGER, "tty", 0, &config.tty },
 		{ WESTON_OPTION_STRING, "device", 0, &config.device },
+		{ WESTON_OPTION_STRING, "seat", 0, &config.seat_id },
 	};
 
 	parse_options(fbdev_options, ARRAY_LENGTH(fbdev_options), argc, argv);
diff --git a/libweston/compositor-fbdev.c b/libweston/compositor-fbdev.c
index 81e5ec3b..f4103d20 100644
--- a/libweston/compositor-fbdev.c
+++ b/libweston/compositor-fbdev.c
@@ -717,6 +717,8 @@ fbdev_backend_create(struct weston_compositor *compositor,
 	session_seat=getenv("XDG_SEAT");
 	if (session_seat)
 		seat_id=session_seat;
+	if (param->seat_id)
+		seat_id = param->seat_id;
 
 	weston_log("initializing fbdev backend\n");
 
@@ -740,7 +742,7 @@ fbdev_backend_create(struct weston_compositor *compositor,
 	wl_signal_add(&compositor->session_signal,
 		      &backend->session_listener);
 	compositor->launcher =
-		weston_launcher_connect(compositor, param->tty, "seat0", false);
+		weston_launcher_connect(compositor, param->tty, seat_id, false);
 	if (!compositor->launcher) {
 		weston_log("fatal: fbdev backend should be run "
 			   "using weston-launch binary or as root\n");
@@ -786,6 +788,7 @@ config_init_to_defaults(struct weston_fbdev_backend_config *config)
 	 * udev, rather than passing a device node in as a parameter. */
 	config->tty = 0; /* default to current tty */
 	config->device = "/dev/fb0"; /* default frame buffer */
+	config->seat_id = "seat0"; /* default seat*/
 }
 
 WL_EXPORT int
diff --git a/libweston/compositor-fbdev.h b/libweston/compositor-fbdev.h
index 8b7d900e..c4e3305a 100644
--- a/libweston/compositor-fbdev.h
+++ b/libweston/compositor-fbdev.h
@@ -43,6 +43,7 @@ struct weston_fbdev_backend_config {
 
 	int tty;
 	char *device;
+	char *seat_id;
 
 	/** Callback used to configure input devices.
 	 *







diff --git a/libweston/compositor-fbdev.c b/libweston/compositor-fbdev.c
index f4103d20..93888494 100644
--- a/libweston/compositor-fbdev.c
+++ b/libweston/compositor-fbdev.c
@@ -477,6 +477,8 @@ fbdev_output_create(struct fbdev_backend *backend,
                     const char *device)
 {
 	struct fbdev_output *output;
+	struct fb_var_screeninfo varinfo;
+
 	int fb_fd;
 
 	weston_log("Creating fbdev output.\n");
@@ -495,6 +497,13 @@ fbdev_output_create(struct fbdev_backend *backend,
 		goto out_free;
 	}
 
+	/* Attempt to correct the framebuffer settings */
+	if (fbdev_set_screen_info(output, fb_fd,
+	                          &output->fb_info) < 0) {
+		weston_log("Failed to set mode settings. "
+		           "Attempting to open output anyway.\n");
+	}
+
 	output->base.name = strdup("fbdev");
 	output->base.destroy = fbdev_output_destroy;
 	output->base.disable = NULL;












