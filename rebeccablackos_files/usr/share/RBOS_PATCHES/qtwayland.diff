diff --git a/.qmake.conf b/.qmake.conf
index 2c01c5d2..f8cda0e7 100644
--- a/.qmake.conf
+++ b/.qmake.conf
@@ -1,7 +1,3 @@
 load(qt_build_config)
 
-DEFINES += QT_NO_FOREACH
-DEFINES += QT_NO_JAVA_STYLE_ITERATORS
-DEFINES += QT_NO_LINKED_LIST
-
-MODULE_VERSION = 5.14.0
+MODULE_VERSION = 5.13.0
diff --git a/examples/wayland/server-buffer/README b/examples/wayland/server-buffer/README
index da20b0f5..5744a6ba 100644
--- a/examples/wayland/server-buffer/README
+++ b/examples/wayland/server-buffer/README
@@ -1,7 +1,4 @@
-This example shows how to use the low-level server buffer extension. This
-version of Qt also provides a texture sharing extension that provides more
-functionality and convenience for sharing graphical assets with Qt Quick
-clients: see the texture-sharing example.
+This is the example to demonstrate the server buffer interfaces
 
 Compile up both compositor and client.
 
diff --git a/examples/wayland/wayland.pro b/examples/wayland/wayland.pro
index f9287481..03053763 100644
--- a/examples/wayland/wayland.pro
+++ b/examples/wayland/wayland.pro
@@ -25,7 +25,6 @@ qtHaveModule(quick) {
             qtConfig(opengl) {
                 SUBDIRS += \
                     server-buffer \
-                    texture-sharing
             }
     }
     SUBDIRS += hwlayer-compositor
diff --git a/src/client/configure.json b/src/client/configure.json
index e9e16324..60445f96 100644
--- a/src/client/configure.json
+++ b/src/client/configure.json
@@ -75,11 +75,6 @@
             "type": "compile",
             "test": "dmabuf_server_buffer",
             "use": "egl"
-        },
-        "vulkan-server-buffer": {
-            "label": "Vulkan Buffer Sharing",
-            "type": "compile",
-            "test": "vulkan_server_buffer"
         }
     },
 
@@ -163,11 +158,6 @@
             "condition": "features.wayland-client && features.opengl && features.egl && tests.dmabuf-server-buffer",
             "output": [ "privateFeature" ]
         },
-        "wayland-vulkan-server-buffer": {
-            "label": "Vulkan-based server buffer integration",
-            "condition": "features.wayland-client && features.opengl && features.egl && tests.vulkan-server-buffer",
-            "output": [ "privateFeature" ]
-        },
         "wayland-shm-emulation-server-buffer": {
             "label": "Shm emulation server buffer integration",
             "condition": "features.wayland-client && features.opengl",
@@ -194,8 +184,6 @@
                 "xcomposite-glx",
                 "wayland-drm-egl-server-buffer",
                 "wayland-libhybris-egl-server-buffer",
-                "wayland-dmabuf-server-buffer",
-                "wayland-vulkan-server-buffer",
                 "wayland-shm-emulation-server-buffer"
             ]
         },
diff --git a/src/client/hardwareintegration/qwaylandserverbufferintegration_p.h b/src/client/hardwareintegration/qwaylandserverbufferintegration_p.h
index 6833efd0..632429be 100644
--- a/src/client/hardwareintegration/qwaylandserverbufferintegration_p.h
+++ b/src/client/hardwareintegration/qwaylandserverbufferintegration_p.h
@@ -70,8 +70,7 @@ class Q_WAYLAND_CLIENT_EXPORT QWaylandServerBuffer
 public:
     enum Format {
         RGBA32,
-        A8,
-        Custom
+        A8
     };
 
     QWaylandServerBuffer();
diff --git a/src/client/qwaylanddisplay.cpp b/src/client/qwaylanddisplay.cpp
index a17e8917..3c9e5ead 100644
--- a/src/client/qwaylanddisplay.cpp
+++ b/src/client/qwaylanddisplay.cpp
@@ -167,11 +167,13 @@ QWaylandDisplay::~QWaylandDisplay(void)
     if (mSyncCallback)
         wl_callback_destroy(mSyncCallback);
 
-    qDeleteAll(qExchange(mInputDevices, {}));
+    qDeleteAll(mInputDevices);
+    mInputDevices.clear();
 
-    for (QWaylandScreen *screen : qExchange(mScreens, {})) {
+    foreach (QWaylandScreen *screen, mScreens) {
         QWindowSystemInterface::handleScreenRemoved(screen);
     }
+    mScreens.clear();
     qDeleteAll(mWaitingScreens);
 
 #if QT_CONFIG(wayland_datadevice)
@@ -336,8 +338,7 @@ void QWaylandDisplay::registry_global(uint32_t id, const QString &interface, uin
 
     mGlobals.append(RegistryGlobal(id, interface, version, registry));
 
-    const auto copy = mRegistryListeners; // be prepared for listeners unregistering on notification
-    for (Listener l : copy)
+    foreach (Listener l, mRegistryListeners)
         (*l.listener)(l.data, registry, id, interface, version);
 }
 
diff --git a/src/client/qwaylandshmbackingstore.cpp b/src/client/qwaylandshmbackingstore.cpp
index 9b5971a2..d768e7fc 100644
--- a/src/client/qwaylandshmbackingstore.cpp
+++ b/src/client/qwaylandshmbackingstore.cpp
@@ -249,7 +249,7 @@ QWaylandShmBuffer *QWaylandShmBackingStore::getBuffer(const QSize &size)
             if (b->size() == size) {
                 return b;
             } else {
-                mBuffers.remove(b);
+                mBuffers.removeOne(b);
                 if (mBackBuffer == b)
                     mBackBuffer = nullptr;
                 delete b;
@@ -257,11 +257,11 @@ QWaylandShmBuffer *QWaylandShmBackingStore::getBuffer(const QSize &size)
         }
     }
 
-    static const size_t MAX_BUFFERS = 5;
-    if (mBuffers.size() < MAX_BUFFERS) {
+    static const int MAX_BUFFERS = 5;
+    if (mBuffers.count() < MAX_BUFFERS) {
         QImage::Format format = QPlatformScreen::platformScreenForWindow(window())->format();
         QWaylandShmBuffer *b = new QWaylandShmBuffer(mDisplay, size, format, waylandWindow()->scale());
-        mBuffers.push_front(b);
+        mBuffers.prepend(b);
         return b;
     }
     return nullptr;
@@ -300,9 +300,9 @@ void QWaylandShmBackingStore::resize(const QSize &size)
 
     // ensure the new buffer is at the beginning of the list so next time getBuffer() will pick
     // it if possible
-    if (mBuffers.front() != buffer) {
-        mBuffers.remove(buffer);
-        mBuffers.push_front(buffer);
+    if (mBuffers.first() != buffer) {
+        mBuffers.removeOne(buffer);
+        mBuffers.prepend(buffer);
     }
 
     if (windowDecoration() && window()->isVisible() && oldSizeInBytes != newSizeInBytes)
diff --git a/src/client/qwaylandshmbackingstore_p.h b/src/client/qwaylandshmbackingstore_p.h
index 8a85cd7f..88ecfc5e 100644
--- a/src/client/qwaylandshmbackingstore_p.h
+++ b/src/client/qwaylandshmbackingstore_p.h
@@ -57,8 +57,7 @@
 #include <QtGui/QImage>
 #include <qpa/qplatformwindow.h>
 #include <QMutex>
-
-#include <list>
+#include <QLinkedList>
 
 QT_BEGIN_NAMESPACE
 
@@ -117,7 +116,7 @@ private:
     QWaylandShmBuffer *getBuffer(const QSize &size);
 
     QWaylandDisplay *mDisplay = nullptr;
-    std::list<QWaylandShmBuffer *> mBuffers;
+    QLinkedList<QWaylandShmBuffer *> mBuffers;
     QWaylandShmBuffer *mFrontBuffer = nullptr;
     QWaylandShmBuffer *mBackBuffer = nullptr;
     bool mPainting = false;
diff --git a/src/compositor/compositor_api/qwaylandcompositor.cpp b/src/compositor/compositor_api/qwaylandcompositor.cpp
index e2d617c3..b8e21614 100644
--- a/src/compositor/compositor_api/qwaylandcompositor.cpp
+++ b/src/compositor/compositor_api/qwaylandcompositor.cpp
@@ -234,7 +234,7 @@ void QWaylandCompositorPrivate::init()
 
     initialized = true;
 
-    for (const QPointer<QObject> &object : qExchange(polish_objects, {})) {
+    Q_FOREACH (QPointer<QObject> object, polish_objects) {
         if (object) {
             QEvent polishEvent(QEvent::Polish);
             QCoreApplication::sendEvent(object.data(), &polishEvent);
diff --git a/src/compositor/compositor_api/qwaylandquickitem.cpp b/src/compositor/compositor_api/qwaylandquickitem.cpp
index ecea8125..bab1e368 100644
--- a/src/compositor/compositor_api/qwaylandquickitem.cpp
+++ b/src/compositor/compositor_api/qwaylandquickitem.cpp
@@ -610,7 +610,7 @@ void QWaylandQuickItem::wheelEvent(QWheelEvent *event)
 {
     Q_D(QWaylandQuickItem);
     if (d->shouldSendInputEvents()) {
-        if (!inputRegionContains(event->position())) {
+        if (!inputRegionContains(event->pos())) {
             event->ignore();
             return;
         }
diff --git a/src/compositor/configure.json b/src/compositor/configure.json
index 46caceff..7659b78e 100644
--- a/src/compositor/configure.json
+++ b/src/compositor/configure.json
@@ -87,11 +87,6 @@
             "type": "compile",
             "test": "dmabuf_client_buffer",
             "use": "egl"
-        },
-        "vulkan-server-buffer": {
-            "label": "Vulkan Buffer Sharing",
-            "type": "compile",
-            "test": "vulkan_server_buffer"
         }
     },
 
@@ -145,11 +140,6 @@
             "condition": "features.wayland-server && features.opengl && features.egl && tests.dmabuf-client-buffer",
             "output": [ "privateFeature" ]
         },
-        "wayland-vulkan-server-buffer": {
-            "label": "Vulkan-based server buffer integration",
-            "condition": "features.wayland-server && features.opengl && features.egl && tests.vulkan-server-buffer",
-            "output": [ "privateFeature" ]
-        },
         "wayland-shm-emulation-server-buffer": {
             "label": "Shm emulation server buffer",
             "condition": "features.wayland-server && features.opengl",
diff --git a/src/compositor/extensions/extensions.pri b/src/compositor/extensions/extensions.pri
index 61ab043e..a3778d2a 100644
--- a/src/compositor/extensions/extensions.pri
+++ b/src/compositor/extensions/extensions.pri
@@ -83,7 +83,7 @@ qtHaveModule(quick) {
         extensions/qwaylandquickxdgoutputv1.h \
         extensions/qwaylandxdgshellv5integration_p.h \
         extensions/qwaylandxdgshellv6integration_p.h \
-        extensions/qwaylandxdgshellintegration_p.h \
+        extensions/qwaylandxdgshellintegration_p.h
 
     SOURCES += \
         extensions/qwaylandquickshellintegration.cpp \
@@ -93,18 +93,7 @@ qtHaveModule(quick) {
         extensions/qwaylandquickxdgoutputv1.cpp \
         extensions/qwaylandxdgshellv5integration.cpp \
         extensions/qwaylandxdgshellv6integration.cpp \
-        extensions/qwaylandxdgshellintegration.cpp \
-
-    qtConfig(opengl) {
-        WAYLANDSERVERSOURCES += \
-            ../extensions/qt-texture-sharing-unstable-v1.xml
-
-        HEADERS += \
-            extensions/qwltexturesharingextension_p.h
-
-        SOURCES += \
-            extensions/qwltexturesharingextension.cpp
-    }
+        extensions/qwaylandxdgshellintegration.cpp
 }
 
 include ($$PWD/pregenerated/xdg-shell-v5.pri)
diff --git a/src/compositor/hardware_integration/qwlserverbufferintegration_p.h b/src/compositor/hardware_integration/qwlserverbufferintegration_p.h
index e8f774e6..7d8901d5 100644
--- a/src/compositor/hardware_integration/qwlserverbufferintegration_p.h
+++ b/src/compositor/hardware_integration/qwlserverbufferintegration_p.h
@@ -75,8 +75,7 @@ class Q_WAYLAND_COMPOSITOR_EXPORT ServerBuffer
 public:
     enum Format {
         RGBA32,
-        A8,
-        Custom
+        A8
     };
 
     ServerBuffer(const QSize &size, ServerBuffer::Format format);
@@ -86,7 +85,6 @@ public:
     virtual bool bufferInUse() { return true; }
 
     virtual QOpenGLTexture *toOpenGlTexture() = 0;
-    virtual void releaseOpenGlTexture() {}
 
     virtual bool isYInverted() const;
 
@@ -107,13 +105,6 @@ public:
 
     virtual bool supportsFormat(ServerBuffer::Format format) const = 0;
     virtual ServerBuffer *createServerBufferFromImage(const QImage &qimage, ServerBuffer::Format format) = 0;
-    virtual ServerBuffer *createServerBufferFromData(const QByteArray &data, const QSize &size, uint glInternalFormat)
-    {
-        Q_UNUSED(data);
-        Q_UNUSED(size);
-        Q_UNUSED(glInternalFormat);
-        return nullptr;
-    }
 };
 
 }
diff --git a/src/imports/imports.pro b/src/imports/imports.pro
index 7452a928..3ab470c9 100644
--- a/src/imports/imports.pro
+++ b/src/imports/imports.pro
@@ -4,9 +4,4 @@ qtHaveModule(quick):qtHaveModule(waylandcompositor) {
     SUBDIRS += \
         compositor
 
-    qtConfig(opengl):qtHaveModule(waylandclient) {
-        SUBDIRS += \
-            texture-sharing \
-            texture-sharing-extension
-    }
 }
diff --git a/src/plugins/hardwareintegration/client/client.pro b/src/plugins/hardwareintegration/client/client.pro
index 7b7e8a49..82e431ee 100644
--- a/src/plugins/hardwareintegration/client/client.pro
+++ b/src/plugins/hardwareintegration/client/client.pro
@@ -18,5 +18,3 @@ qtConfig(wayland-shm-emulation-server-buffer): \
     SUBDIRS += shm-emulation-server
 qtConfig(wayland-dmabuf-server-buffer): \
     SUBDIRS += dmabuf-server
-qtConfig(wayland-vulkan-server-buffer): \
-    SUBDIRS += vulkan-server
diff --git a/src/plugins/hardwareintegration/compositor/compositor.pro b/src/plugins/hardwareintegration/compositor/compositor.pro
index 32edf1f1..59ea9141 100644
--- a/src/plugins/hardwareintegration/compositor/compositor.pro
+++ b/src/plugins/hardwareintegration/compositor/compositor.pro
@@ -20,8 +20,6 @@ qtConfig(wayland-shm-emulation-server-buffer): \
     SUBDIRS += shm-emulation-server
 qtConfig(wayland-dmabuf-server-buffer): \
     SUBDIRS += dmabuf-server
-qtConfig(wayland-vulkan-server-buffer): \
-    SUBDIRS += vulkan-server
 
 qtConfig(wayland-egl): \
     SUBDIRS += wayland-eglstream-controller
diff --git a/src/plugins/shellintegration/shellintegration.pro b/src/plugins/shellintegration/shellintegration.pro
index 39c57940..76968aec 100644
--- a/src/plugins/shellintegration/shellintegration.pro
+++ b/src/plugins/shellintegration/shellintegration.pro
@@ -2,7 +2,6 @@ TEMPLATE = subdirs
 QT_FOR_CONFIG += waylandclient-private
 
 qtConfig(wayland-client-fullscreen-shell-v1): SUBDIRS += fullscreen-shell-v1
-qtConfig(wayland-client-ivi-shell): SUBDIRS += ivi-shell
 qtConfig(wayland-client-wl-shell): SUBDIRS += wl-shell
 qtConfig(wayland-client-xdg-shell): SUBDIRS += xdg-shell
 qtConfig(wayland-client-xdg-shell-v5): SUBDIRS += xdg-shell-v5
diff --git a/src/src.pro b/src/src.pro
index 3d68c69f..c03c5422 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -17,7 +17,6 @@ qtConfig(wayland-client)|qtConfig(wayland-server) {
 
     sub_plugins.subdir = plugins
     sub_plugins.depends += sub-qtwaylandscanner
-    qtConfig(wayland-client):sub_plugins.depends += sub-client
     qtConfig(wayland-server):sub_plugins.depends += sub-compositor
     sub_plugins.target = sub-plugins
     SUBDIRS += sub_plugins
@@ -30,7 +29,6 @@ qtConfig(wayland-client)|qtConfig(wayland-server) {
     }
 
     sub_imports.subdir = imports
-    qtConfig(wayland-client):sub_imports.depends += sub-client
     qtConfig(wayland-server):sub_imports.depends += sub-compositor
     sub_imports.target = sub-imports
     SUBDIRS += sub_imports
diff --git a/sync.profile b/sync.profile
index 5c7ada91..8a41e2ef 100644
--- a/sync.profile
+++ b/sync.profile
@@ -61,7 +61,6 @@
         "^qwayland-server-ivi-application.h",
         "^qwayland-server-qt-windowmanager.h",
         "^qwayland-server-qt-key-unstable-v1.h",
-        "^qwayland-server-qt-texture-sharing-unstable-v1.h",
         "^qwayland-server-scaler.h",
         "^qwayland-server-server-buffer-extension.h",
         "^qwayland-server-text-input-unstable-v2.h",
@@ -76,7 +75,6 @@
         "^wayland-ivi-application-server-protocol.h",
         "^wayland-qt-windowmanager-server-protocol.h",
         "^wayland-qt-key-unstable-v1-server-protocol.h",
-        "^wayland-qt-texture-sharing-unstable-v1-server-protocol.h",
         "^wayland-scaler-server-protocol.h",
         "^wayland-server-buffer-extension-server-protocol.h",
         "^wayland-text-input-unstable-v2-server-protocol.h",
diff --git a/tests/auto/client/shared_old/mocksurface.cpp b/tests/auto/client/shared_old/mocksurface.cpp
index e9df5f90..81a5edbd 100644
--- a/tests/auto/client/shared_old/mocksurface.cpp
+++ b/tests/auto/client/shared_old/mocksurface.cpp
@@ -149,10 +149,11 @@ void Surface::surface_commit(Resource *resource)
         }
     }
 
-    for (wl_resource *frameCallback : qExchange(m_frameCallbackList, {})) {
+    foreach (wl_resource *frameCallback, m_frameCallbackList) {
         wl_callback_send_done(frameCallback, m_compositor->time());
         wl_resource_destroy(frameCallback);
     }
+    m_frameCallbackList.clear();
 }
 
 }
