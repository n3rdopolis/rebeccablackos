diff --git a/man/logind.conf.xml b/man/logind.conf.xml
index 9682add08c..93c3574f2f 100644
--- a/man/logind.conf.xml
+++ b/man/logind.conf.xml
@@ -192,6 +192,14 @@
         and continues to run until system shutdown. Defaults to 10s.</para></listitem>
       </varlistentry>
 
+      <varlistentry>
+        <term><varname>HandleSecureAttentionKeyPress=</varname></term>
+
+        <listitem><para>Specifies if the Secure Attention Sequence (Ctrl+Alt+Shift+Esc) should be handled or not</para>
+
+        <xi:include href="version-info.xml" xpointer="v256"/></listitem>
+      </varlistentry>
+
       <varlistentry>
         <term><varname>HandlePowerKey=</varname></term>
         <term><varname>HandlePowerKeyLongPress=</varname></term>
diff --git a/man/org.freedesktop.login1.xml b/man/org.freedesktop.login1.xml
index 639b09ad8c..e040a7b40b 100644
--- a/man/org.freedesktop.login1.xml
+++ b/man/org.freedesktop.login1.xml
@@ -143,6 +143,8 @@ node /org/freedesktop/login1 {
       SetWallMessage(in  s wall_message,
                      in  b enable);
     signals:
+      SecureAttentionKey(s seat_id,
+                         o object_path);
       SessionNew(s session_id,
                  o object_path);
       SessionRemoved(s session_id,
@@ -214,6 +216,8 @@ node /org/freedesktop/login1 {
       @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
       readonly s HandleLidSwitchDocked = '...';
       @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
+      readonly s HandleSecureAttentionKeyPress = '...';
+      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
       readonly t HoldoffTimeoutUSec = ...;
       @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
       readonly s IdleAction = '...';
@@ -264,6 +268,8 @@ node /org/freedesktop/login1 {
 
     <!--property HandleHibernateKeyLongPress is not documented!-->
 
+    <!--property HandleSecureAttentionKeyPress is not documented!-->
+
     <!--property StopIdleSessionUSec is not documented!-->
 
     <!--Autogenerated cross-references for systemd.directives, do not edit-->
@@ -388,6 +394,8 @@ node /org/freedesktop/login1 {
 
     <variablelist class="dbus-method" generated="True" extra-ref="SetWallMessage()"/>
 
+    <variablelist class="dbus-signal" generated="True" extra-ref="SecureAttentionKey()"/>
+
     <variablelist class="dbus-signal" generated="True" extra-ref="SessionNew"/>
 
     <variablelist class="dbus-signal" generated="True" extra-ref="SessionRemoved"/>
@@ -462,6 +470,8 @@ node /org/freedesktop/login1 {
 
     <variablelist class="dbus-property" generated="True" extra-ref="HandleLidSwitchDocked"/>
 
+    <variablelist class="dbus-property" generated="True" extra-ref="HandleSecureAttentionKeyPress"/>
+
     <variablelist class="dbus-property" generated="True" extra-ref="HoldoffTimeoutUSec"/>
 
     <variablelist class="dbus-property" generated="True" extra-ref="IdleAction"/>
@@ -667,6 +677,10 @@ node /org/freedesktop/login1 {
       <para>Whenever the inhibition state or idle hint changes, <function>PropertyChanged</function>
       signals are sent out to which clients can subscribe.</para>
 
+      <para>The <function>SecureAttentionKey()</function> signal is sent when the user presses Ctrl+Alt+Shift+Esc to
+      request the login manager to display the greeter, for instance in the case of a deadlocked compositor
+      </para>
+
       <para>The <function>SessionNew</function>, <function>SessionRemoved</function>,
       <function>UserNew</function>, <function>UserRemoved</function>, <function>SeatNew</function>, and
       <function>SeatRemoved</function> signals are sent each time a session is created or removed, a user
diff --git a/src/basic/macro.h b/src/basic/macro.h
index 2671c6ceaa..dc3f4ececf 100644
--- a/src/basic/macro.h
+++ b/src/basic/macro.h
@@ -313,6 +313,15 @@ static inline int __coverity_check_and_return__(int condition) {
 /* Pointers range from NULL to POINTER_MAX */
 #define POINTER_MAX ((void*) UINTPTR_MAX)
 
+#define _FOREACH_ARRAY(i, array, num, m, end)                           \
+        for (typeof(array[0]) *i = (array), *end = ({                   \
+                                typeof(num) m = (num);                  \
+                                (i && m > 0) ? i + m : NULL;            \
+                        }); end && i < end; i++)
+
+#define FOREACH_ARRAY(i, array, num)                                    \
+        _FOREACH_ARRAY(i, array, num, UNIQ_T(m, UNIQ), UNIQ_T(end, UNIQ))
+
 /* Iterates through a specified list of pointers. Accepts NULL pointers, but uses POINTER_MAX as internal marker for EOL. */
 #define FOREACH_POINTER(p, x, ...)                                                       \
         for (typeof(p) *_l = (typeof(p)[]) { ({ p = x; }), ##__VA_ARGS__, POINTER_MAX }; \
diff --git a/src/login/logind-action.c b/src/login/logind-action.c
index c6a36a1556..05abbfe41a 100644
--- a/src/login/logind-action.c
+++ b/src/login/logind-action.c
@@ -177,7 +177,7 @@ int manager_handle_action(
                 }
         }
 
-        /* Locking is handled differently from the rest. */
+        /* Locking and greeter activation is handled differently from the rest. */
         if (handle == HANDLE_LOCK) {
                 if (!is_edge)
                         return 0;
@@ -263,6 +263,7 @@ static const char* const handle_action_verb_table[_HANDLE_ACTION_MAX] = {
         [HANDLE_SUSPEND_THEN_HIBERNATE] = "suspend and later hibernate",
         [HANDLE_FACTORY_RESET]          = "perform a factory reset",
         [HANDLE_LOCK]                   = "be locked",
+        [HANDLE_SECURE_ATTENTION_KEY]   = "secure attention key pressed",
 };
 
 DEFINE_STRING_TABLE_LOOKUP_TO_STRING(handle_action_verb, HandleAction);
@@ -279,6 +280,7 @@ static const char* const handle_action_table[_HANDLE_ACTION_MAX] = {
         [HANDLE_SUSPEND_THEN_HIBERNATE] = "suspend-then-hibernate",
         [HANDLE_FACTORY_RESET]          = "factory-reset",
         [HANDLE_LOCK]                   = "lock",
+        [HANDLE_SECURE_ATTENTION_KEY]   = "secure attention key",
 };
 
 DEFINE_STRING_TABLE_LOOKUP(handle_action, HandleAction);
diff --git a/src/login/logind-action.h b/src/login/logind-action.h
index 9a01af1690..fa1f556b97 100644
--- a/src/login/logind-action.h
+++ b/src/login/logind-action.h
@@ -15,6 +15,7 @@ typedef enum HandleAction {
         HANDLE_SUSPEND_THEN_HIBERNATE,
         HANDLE_LOCK,
         HANDLE_FACTORY_RESET,
+        HANDLE_SECURE_ATTENTION_KEY,
         _HANDLE_ACTION_MAX,
         _HANDLE_ACTION_INVALID = -EINVAL,
 } HandleAction;
diff --git a/src/login/logind-button.c b/src/login/logind-button.c
index 0314ae1774..c15c336fd7 100644
--- a/src/login/logind-button.c
+++ b/src/login/logind-button.c
@@ -11,11 +11,30 @@
 #include "async.h"
 #include "fd-util.h"
 #include "logind-button.h"
+#include "logind-dbus.h"
+#include "logind-seat-dbus.h"
 #include "missing_input.h"
 #include "string-util.h"
 #include "util.h"
 
-#define CONST_MAX5(a, b, c, d, e) CONST_MAX(CONST_MAX(a, b), CONST_MAX(CONST_MAX(c, d), e))
+#define KEY_MAX_INTERESTED KEY_RESTART
+
+static const int keys_interested[] = {
+        KEY_ESC,
+        KEY_LEFTCTRL,
+        KEY_LEFTSHIFT,
+        KEY_RIGHTSHIFT,
+        KEY_LEFTALT,
+        KEY_RIGHTCTRL,
+        KEY_RIGHTALT,
+        KEY_POWER,
+        KEY_LEFTMETA,
+        KEY_RIGHTMETA,
+        KEY_SLEEP,
+        KEY_SUSPEND,
+        KEY_POWER2,
+        KEY_RESTART
+};
 
 #define ULONG_BITS (sizeof(unsigned long)*8)
 
@@ -48,6 +67,8 @@ Button* button_new(Manager *m, const char *name) {
                 return mfree(b);
         }
 
+        b->mods_depressed = Button_Modifier_None;
+
         b->manager = m;
         b->fd = -1;
 
@@ -177,6 +198,23 @@ static int long_press_of_hibernate_key_handler(sd_event_source *e, uint64_t usec
         return 0;
 }
 
+static void secure_attention_key_handler(Button *b) {
+        Seat *o = hashmap_get(b->manager->seats, b->seat);
+        char *p = seat_bus_path(o);
+
+        assert(b);
+
+        log_struct(LOG_INFO,
+                   LOG_MESSAGE("Secure Attention Key sequence pressed on seat %s", b->seat),
+                   "MESSAGE_ID=" SD_MESSAGE_SECURE_ATTENTION_KEY_PRESS_STR);
+
+        (void) sd_bus_emit_signal(b->manager->bus,
+                                  "/org/freedesktop/login1",
+                                  "org.freedesktop.login1.Manager",
+                                  "SecureAttentionKey",
+                                  "so", b->seat, p);
+}
+
 static void start_long_press(Manager *m, sd_event_source **e, sd_event_time_handler_t callback) {
         int r;
 
@@ -273,6 +311,35 @@ static int button_dispatch(sd_event_source *s, int fd, uint32_t revents, void *u
                                 manager_handle_action(b->manager, INHIBIT_HANDLE_HIBERNATE_KEY, b->manager->handle_hibernate_key, b->manager->hibernate_key_ignore_inhibited, true);
                         }
                         break;
+
+                case KEY_ESC:
+                        if (b->manager->handle_secure_attention_key_press != HANDLE_IGNORE) {
+                                if (b->mods_depressed == (Button_Modifier_Ctrl | Button_Modifier_Alt | Button_Modifier_Shift)) {
+                                        log_debug("Secure Attention Key sequence pressed short.");
+                                        secure_attention_key_handler(b);
+                                }
+                        }
+                        break;
+
+                case KEY_LEFTSHIFT:
+                case KEY_RIGHTSHIFT:
+                        b->mods_depressed |= Button_Modifier_Shift;
+                        break;
+
+                case KEY_LEFTCTRL:
+                case KEY_RIGHTCTRL:
+                        b->mods_depressed |= Button_Modifier_Ctrl;
+                        break;
+
+                case KEY_LEFTMETA:
+                case KEY_RIGHTMETA:
+                        b->mods_depressed |= Button_Modifier_Meta;
+                        break;
+
+                case KEY_LEFTALT:
+                case KEY_RIGHTALT:
+                        b->mods_depressed |= Button_Modifier_Alt;
+                        break;
                 }
 
         } else if (ev.type == EV_KEY && ev.value == 0) {
@@ -330,6 +397,29 @@ static int button_dispatch(sd_event_source *s, int fd, uint32_t revents, void *u
                                 manager_handle_action(b->manager, INHIBIT_HANDLE_HIBERNATE_KEY, b->manager->handle_hibernate_key, b->manager->hibernate_key_ignore_inhibited, true);
                         }
                         break;
+
+                case KEY_ESC:
+                        break;
+
+                case KEY_LEFTSHIFT:
+                case KEY_RIGHTSHIFT:
+                        b->mods_depressed &= ~Button_Modifier_Shift;
+                        break;
+
+                case KEY_LEFTCTRL:
+                case KEY_RIGHTCTRL:
+                        b->mods_depressed &= ~Button_Modifier_Ctrl;
+                        break;
+
+                case KEY_LEFTMETA:
+                case KEY_RIGHTMETA:
+                        b->mods_depressed &= ~Button_Modifier_Meta;
+                        break;
+
+                case KEY_LEFTALT:
+                case KEY_RIGHTALT:
+                        b->mods_depressed &= ~Button_Modifier_Alt;
+                        break;
                 }
 
         } else if (ev.type == EV_SW && ev.value > 0) {
@@ -382,17 +472,17 @@ static int button_suitable(int fd) {
                 return -errno;
 
         if (bitset_get(types, EV_KEY)) {
-                unsigned long keys[CONST_MAX5(KEY_POWER, KEY_POWER2, KEY_SLEEP, KEY_SUSPEND, KEY_RESTART)/ULONG_BITS+1];
+                unsigned long keys[KEY_MAX_INTERESTED/ULONG_BITS+1];
 
                 if (ioctl(fd, EVIOCGBIT(EV_KEY, sizeof keys), keys) < 0)
                         return -errno;
 
-                if (bitset_get(keys, KEY_POWER) ||
-                    bitset_get(keys, KEY_POWER2) ||
-                    bitset_get(keys, KEY_SLEEP) ||
-                    bitset_get(keys, KEY_SUSPEND) ||
-                    bitset_get(keys, KEY_RESTART))
-                        return true;
+                FOREACH_ARRAY(key, keys_interested, ELEMENTSOF(keys_interested)) {
+                        assert(*key <= KEY_MAX_INTERESTED);
+
+                        if (bitset_get(keys, *key))
+                                return true;
+                }
         }
 
         if (bitset_get(types, EV_SW)) {
@@ -410,9 +500,9 @@ static int button_suitable(int fd) {
 }
 
 static int button_set_mask(const char *name, int fd) {
-        unsigned long
+         unsigned long
                 types[CONST_MAX(EV_KEY, EV_SW)/ULONG_BITS+1] = {},
-                keys[CONST_MAX5(KEY_POWER, KEY_POWER2, KEY_SLEEP, KEY_SUSPEND, KEY_RESTART)/ULONG_BITS+1] = {},
+                keys[KEY_MAX_INTERESTED/ULONG_BITS+1] = {},
                 switches[CONST_MAX(SW_LID, SW_DOCK)/ULONG_BITS+1] = {};
         struct input_mask mask;
 
@@ -433,11 +523,11 @@ static int button_set_mask(const char *name, int fd) {
                 return log_full_errno(IN_SET(errno, ENOTTY, EOPNOTSUPP, EINVAL) ? LOG_DEBUG : LOG_WARNING,
                                       errno, "Failed to set EV_SYN event mask on /dev/input/%s: %m", name);
 
-        bitset_put(keys, KEY_POWER);
-        bitset_put(keys, KEY_POWER2);
-        bitset_put(keys, KEY_SLEEP);
-        bitset_put(keys, KEY_SUSPEND);
-        bitset_put(keys, KEY_RESTART);
+        FOREACH_ARRAY(key, keys_interested, ELEMENTSOF(keys_interested)) {
+                assert(*key <= KEY_MAX_INTERESTED);
+
+                bitset_put(keys, *key);
+        }
 
         mask = (struct input_mask) {
                 .type = EV_KEY,
diff --git a/src/login/logind-button.h b/src/login/logind-button.h
index 041d66521c..df4a5953de 100644
--- a/src/login/logind-button.h
+++ b/src/login/logind-button.h
@@ -5,6 +5,15 @@ typedef struct Button Button;
 
 #include "logind.h"
 
+typedef enum {
+        Button_Modifier_None  = 0,
+        Button_Modifier_Shift = 1 << 0,
+        Button_Modifier_Ctrl  = 1 << 1,
+        Button_Modifier_Alt   = 1 << 2,
+        Button_Modifier_Meta  = 1 << 3,
+
+} ButtonModifierMask;
+
 struct Button {
         Manager *manager;
 
@@ -15,6 +24,8 @@ struct Button {
         char *seat;
         int fd;
 
+        ButtonModifierMask mods_depressed;
+
         bool lid_closed;
         bool docked;
 };
diff --git a/src/login/logind-core.c b/src/login/logind-core.c
index 02adc81909..a9e78aca10 100644
--- a/src/login/logind-core.c
+++ b/src/login/logind-core.c
@@ -46,6 +46,7 @@ void manager_reset_config(Manager *m) {
         m->handle_suspend_key_long_press = HANDLE_HIBERNATE;
         m->handle_hibernate_key = HANDLE_HIBERNATE;
         m->handle_hibernate_key_long_press = HANDLE_IGNORE;
+        m->handle_secure_attention_key_press = HANDLE_SECURE_ATTENTION_KEY;
 
         m->handle_lid_switch = HANDLE_SUSPEND;
         m->handle_lid_switch_ep = _HANDLE_ACTION_INVALID;
@@ -697,6 +698,8 @@ bool manager_all_buttons_ignored(Manager *m) {
                 return false;
         if (m->handle_lid_switch_docked != HANDLE_IGNORE)
                 return false;
+        if (m->handle_secure_attention_key_press != HANDLE_IGNORE)
+                return false;
 
         return true;
 }
diff --git a/src/login/logind-dbus.c b/src/login/logind-dbus.c
index 56aba3b073..e8808c454d 100644
--- a/src/login/logind-dbus.c
+++ b/src/login/logind-dbus.c
@@ -3338,6 +3338,7 @@ static const sd_bus_vtable manager_vtable[] = {
         SD_BUS_PROPERTY("HandleLidSwitch", "s", property_get_handle_action, offsetof(Manager, handle_lid_switch), SD_BUS_VTABLE_PROPERTY_CONST),
         SD_BUS_PROPERTY("HandleLidSwitchExternalPower", "s", property_get_handle_action, offsetof(Manager, handle_lid_switch_ep), SD_BUS_VTABLE_PROPERTY_CONST),
         SD_BUS_PROPERTY("HandleLidSwitchDocked", "s", property_get_handle_action, offsetof(Manager, handle_lid_switch_docked), SD_BUS_VTABLE_PROPERTY_CONST),
+        SD_BUS_PROPERTY("HandleSecureAttentionKeyPress", "s", property_get_handle_action, offsetof(Manager, handle_secure_attention_key_press), SD_BUS_VTABLE_PROPERTY_CONST),
         SD_BUS_PROPERTY("HoldoffTimeoutUSec", "t", NULL, offsetof(Manager, holdoff_timeout_usec), SD_BUS_VTABLE_PROPERTY_CONST),
         SD_BUS_PROPERTY("IdleAction", "s", property_get_handle_action, offsetof(Manager, idle_action), SD_BUS_VTABLE_PROPERTY_CONST),
         SD_BUS_PROPERTY("IdleActionUSec", "t", NULL, offsetof(Manager, idle_action_usec), SD_BUS_VTABLE_PROPERTY_CONST),
@@ -3668,6 +3669,9 @@ static const sd_bus_vtable manager_vtable[] = {
                                 method_set_wall_message,
                                 SD_BUS_VTABLE_UNPRIVILEGED),
 
+        SD_BUS_SIGNAL_WITH_ARGS("SecureAttentionKey",
+                                SD_BUS_ARGS("s", seat_id, "o", object_path),
+                                0),
         SD_BUS_SIGNAL_WITH_ARGS("SessionNew",
                                 SD_BUS_ARGS("s", session_id, "o", object_path),
                                 0),
diff --git a/src/login/logind-gperf.gperf b/src/login/logind-gperf.gperf
index c95a3b2dc3..92c79649d4 100644
--- a/src/login/logind-gperf.gperf
+++ b/src/login/logind-gperf.gperf
@@ -36,6 +36,7 @@ Login.HandleHibernateKeyLongPress,  config_parse_handle_action,         0, offse
 Login.HandleLidSwitch,              config_parse_handle_action,         0, offsetof(Manager, handle_lid_switch)
 Login.HandleLidSwitchExternalPower, config_parse_handle_action,         0, offsetof(Manager, handle_lid_switch_ep)
 Login.HandleLidSwitchDocked,        config_parse_handle_action,         0, offsetof(Manager, handle_lid_switch_docked)
+Login.HandleSecureAttentionKeyPress,config_parse_handle_action,         0, offsetof(Manager, handle_secure_attention_key_press)
 Login.PowerKeyIgnoreInhibited,      config_parse_bool,                  0, offsetof(Manager, power_key_ignore_inhibited)
 Login.SuspendKeyIgnoreInhibited,    config_parse_bool,                  0, offsetof(Manager, suspend_key_ignore_inhibited)
 Login.HibernateKeyIgnoreInhibited,  config_parse_bool,                  0, offsetof(Manager, hibernate_key_ignore_inhibited)
diff --git a/src/login/logind-inhibit.h b/src/login/logind-inhibit.h
index 871e69a03a..276bd3f01f 100644
--- a/src/login/logind-inhibit.h
+++ b/src/login/logind-inhibit.h
@@ -12,7 +12,8 @@ typedef enum InhibitWhat {
         INHIBIT_HANDLE_HIBERNATE_KEY = 1 << 5,
         INHIBIT_HANDLE_LID_SWITCH    = 1 << 6,
         INHIBIT_HANDLE_REBOOT_KEY    = 1 << 7,
-        _INHIBIT_WHAT_MAX            = 1 << 8,
+        INHIBIT_SECURE_ATTENTION_KEY = 1 << 8,
+        _INHIBIT_WHAT_MAX            = 1 << 9,
         _INHIBIT_WHAT_INVALID        = -EINVAL,
 } InhibitWhat;
 
diff --git a/src/login/logind.h b/src/login/logind.h
index d0b1f9671e..051fb8a415 100644
--- a/src/login/logind.h
+++ b/src/login/logind.h
@@ -106,6 +106,7 @@ struct Manager {
         HandleAction handle_suspend_key_long_press;
         HandleAction handle_hibernate_key;
         HandleAction handle_hibernate_key_long_press;
+        HandleAction handle_secure_attention_key_press;
 
         HandleAction handle_lid_switch;
         HandleAction handle_lid_switch_ep;
diff --git a/src/systemd/sd-messages.h b/src/systemd/sd-messages.h
index 51241c9426..648041cd4b 100644
--- a/src/systemd/sd-messages.h
+++ b/src/systemd/sd-messages.h
@@ -143,6 +143,8 @@ _SD_BEGIN_DECLARATIONS;
 #define SD_MESSAGE_POWER_KEY_STR                      SD_ID128_MAKE_STR(b7,2e,a4,a2,88,15,45,a0,b5,0e,20,0e,55,b9,b0,71)
 #define SD_MESSAGE_POWER_KEY_LONG_PRESS               SD_ID128_MAKE(3e,01,17,10,1e,b2,43,c1,b9,a5,0d,b3,49,4a,b1,0b)
 #define SD_MESSAGE_POWER_KEY_LONG_PRESS_STR           SD_ID128_MAKE_STR(3e,01,17,10,1e,b2,43,c1,b9,a5,0d,b3,49,4a,b1,0b)
+#define SD_MESSAGE_SECURE_ATTENTION_KEY_PRESS         SD_ID128_MAKE(b2,bc,ba,f5,ed,f9,48,e0,93,ce,50,bb,ea,0e,81,ec)
+#define SD_MESSAGE_SECURE_ATTENTION_KEY_PRESS_STR     SD_ID128_MAKE_STR(b2,bc,ba,f5,ed,f9,48,e0,93,ce,50,bb,ea,0e,81,ec)
 #define SD_MESSAGE_REBOOT_KEY                         SD_ID128_MAKE(9f,a9,d2,c0,12,13,4e,c3,85,45,1f,fe,31,6f,97,d0)
 #define SD_MESSAGE_REBOOT_KEY_STR                     SD_ID128_MAKE_STR(9f,a9,d2,c0,12,13,4e,c3,85,45,1f,fe,31,6f,97,d0)
 #define SD_MESSAGE_REBOOT_KEY_LONG_PRESS              SD_ID128_MAKE(f1,c5,9a,58,c9,d9,43,66,89,65,c3,37,ca,ec,59,75)
