--- usr/bin/waylandloginmanager	2023-08-11 19:52:00.549921030 -0400
+++ usr/bin/waylandloginmanagerzenity	2023-08-16 20:36:15.985898144 -0400
@@ -18,9 +18,9 @@
 
 #This script is the WaylandLoginManager it handles a graphical login for the user, and allows the user to start multiple types of Wayland sessions, specified in wsession files, and it supports autologin, and user switching. It supports watching the active session until it fails, so that it swiches back to the needed TTY for the user.
 
-#The main server it displays on is refered to as the loginmanagerdisplay. it runs as non root, as well as the kdialog dialogs
+#The main server it displays on is refered to as the loginmanagerdisplay. it runs as non root, as well as the zenity dialogs
 
-#It depends on kdialog kbd, weston, socat, and libauthen-pam-perl
+#It depends on zenity kbd, weston, socat, and libauthen-pam-perl
 
 #User sessions can have /etc/wlprofile or ~/.local/wlprofile (similar to xprofile only for Wayland)
 
@@ -752,7 +752,7 @@
   export MAX_UI_ATTEMPTS=5
   ######################################################
 
-  #User that the kdialog dialogs and the loginmanagerdisplay (weston instance for the waylandloginmanager runs as
+  #User that the zenity dialogs and the loginmanagerdisplay (weston instance for the waylandloginmanager runs as
   export LOGINMANAGERDISPLAYUSER=waylandloginmanager
   #User that reads from the loginmanager_control socket, and filters the command sent to it to loginmanager_listener FIFO
   export FIFOREADERUSER=waylandloginmanager
@@ -890,8 +890,7 @@
   export DEB_HOST_MULTIARCH=$(dpkg-architecture -qDEB_HOST_MULTIARCH 2>/dev/null)
   export LD_LIBRARY_PATH=/opt/lib/$DEB_HOST_MULTIARCH:/opt/lib:/usr/local/lib/$DEB_HOST_MULTIARCH:/usr/lib/$DEB_HOST_MULTIARCH:/usr/local/lib:/usr/lib
   export XDG_DATA_DIRS=/opt/share:/usr/share
-  export QT_QPA_PLATFORM=wayland
-  export QT_QPA_PLATFORMTHEME=qt5ct
+  export GDK_BACKEND=wayland
   #Set the default path for weston
   export DEFAULTWAYLANDSERVER=$(which weston)
   #Specify where wsession files are found
@@ -919,7 +918,7 @@
   #Determine if this is running on a live instance, if booted with casper
   GetConfigKey wlmlivemode "" 0 0 LiveCDMode
 
-  KDIALOGCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- kdialog"
+  ZENITYCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- zenity"
   TERMINALCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- vte"
   WAYLANDINFOCMD="runuser -u $LOGINMANAGERDISPLAYUSER -m -- wayland-info"
   if [[ $seat0HasTTYs == 1 ]]
@@ -931,8 +930,8 @@
     TTYWIZARDCMD=true
   fi
 
-  command -v kdialog > /dev/null
-  KdialogCommandFoundResult=$?
+  command -v zenity > /dev/null
+  ZenityCommandFoundResult=$?
 
   #Detect hardware abilities, first try to see if the system has kernel mode setting, then try framebuffer. if both aren't supported, bring up a text mode dialog
   GetConfigKey wlmforcefbdev "" 0 1 wlmforcefbdev
@@ -1252,17 +1251,23 @@
   done
 }
 
-#This function takes three arguments. The first is the number of seconds to wait, and the second is the string to show in the dialog. it shows a dialog with a progress bar to count down the specified time, with the string. The third is the seat to display it on
+#This function takes three arguments. The first is the number of seconds to wait, and the second is the string to show in the dialog. it shows a Zenity dialog with a progress bar to count down the specified time, with the string. The third is the seat to display it on
 function DialogWait
 {
   GetStartedSeatIndex $3
   SeatFileName=${SeatFileNames[$ReturnSeatIndex]}
   export WAYLAND_DISPLAY=loginmanagerdisplay_"$SeatFileName"
   SetFallbackEnvironmentVariables $3
-  $KDIALOGCMD --title="Login Manager" --msgbox "$2" 2>/dev/null &
-  DialogPID=$!
-  $SLEEPCMD $1
-  TerminateJobPID $DialogPID 15 0
+  waitseconds=$1
+  displaystring="$2"
+  countseconds=0
+  while [[ $countseconds -lt $waitseconds ]]
+  do
+    percent=$(( $countseconds * 100 / $waitseconds ))
+    echo $percent
+    ((countseconds++))
+    $SLEEPCMD 1
+  done | $ZENITYCMD --width=450 --title="Login Manager" --no-cancel --progress --auto-close --text="$displaystring" 2>/dev/null
 }
 
 #This function takes 1 argument, the seat that the loginmanagerdisplay belongs to, and waits for the loginmanagerdisplay to startup
@@ -1965,7 +1970,7 @@
       done
       if [[ $WSESSIONNUMBER == -1 ]]
       then
-        $KDIALOGCMD --title="Session Selection" --error "$DEFAULTWSESSION set as default session for $SessionUser, but was not found, configured correctly, or supported by the hardware in this seat." 2>/dev/null
+        $ZENITYCMD --width=500 --error --title "Session Selection" --text="$DEFAULTWSESSION set as default session for $SessionUser, but was not found, configured correctly, or supported by the hardware in this seat." 2>/dev/null
         WriteToLog "$DEFAULTWSESSION set as default session for $SessionUser, but was not found in $WSESSIONSPATHS, configured correctly, or supported by the hardware in this seat, $CurrentHandleSeat ."
         return 1
       fi
@@ -1976,33 +1981,17 @@
       WSESSIONPICKLIST=""
       for (( element=0; element<$WSESSIONCOUNT; element++ ))
       do
-        WSessionName=${WSESSIONARRAY[$((8+element*10))]}
-        WSessionNameLength=${#WSessionName}
-        if [[ $WSessionNameLength -gt 28 ]]
-        then
-          WSessionName="${WSessionName:0:25}..."
-          WSessionNameLength=${#WSessionName}
-        fi
-        SpacePadCount=$(( 30 - $WSessionNameLength ))
-        SpacePadString=""
-        for (( SpaceItr=0; SpaceItr<$SpacePadCount; SpaceItr++ ))
-        do
-          SpacePadString+=" "
-        done
         if [[ ! -z $WSESSIONPICKLIST ]]
         then
           WSESSIONPICKLIST+=$'\n'
         fi
-        WSESSIONPICKLIST+=$element"#"${WSessionName}$SpacePadString${WSESSIONARRAY[$((9+element*10))]}
+        WSESSIONPICKLIST+=$element$"#"${WSESSIONARRAY[$((8+element*10))]}"#"${WSESSIONARRAY[$((9+element*10))]}
       done
       WSESSIONPICKLIST=$(echo "$WSESSIONPICKLIST" | sort -t "#" -k 2,2 | sed 's/#/\n/g')
-      IFS=$'\n'
-      WSESSIONPICKLIST=($WSESSIONPICKLIST)
-      unset IFS
       #select the session. Each line is handled as a column. currently there are 9 collumns. So line 1 is is column 1, line 2 is in collumn 2, and line 10 is in collumn 1 again
-      #The dialog then outputs the selected session's lines into the WSESSIONDATA variable. each collumn is a different aspect of the wsessions
-      WSESSIONNUMBER=$($KDIALOGCMD --geometry=750x300+0+0 --title="$SessionSelectionTitleHint" --menu "Select a Wayland Desktop Environment to use" -- "${WSESSIONPICKLIST[@]}" 2>/dev/null )
-      #Abort if the user selected cancel on the dialog
+      #The zenity dialog then outputs the selected session's lines into the WSESSIONDATA variable. each collumn is a different aspect of the wsessions
+      WSESSIONNUMBER=$(echo "$WSESSIONPICKLIST" | $ZENITYCMD --title="$SessionSelectionTitleHint" --height=450 --width=630 --list --text "Select a Wayland Desktop Environment to use" --column sessionnumber --column Name --column Comment --hide-column=1 --print-column=1 2>/dev/null )
+      #Abort if the user selected cancel on the zenity dialog
       CancelOrOK=$?
       if [[ $CancelOrOK != 0 ]]
       then
@@ -2018,7 +2007,7 @@
   else
     unset WSESSIONDATA
     unset WSESSIONNUMBER
-    $KDIALOGCMD --title="Session Selection" --error "No sessions are installed, configured correctly, or supported by the hardware in this seat." 2>/dev/null
+    $ZENITYCMD --width=500 --error --title "Session Selection" --text="No sessions are installed, configured correctly, or supported by the hardware in this seat." 2>/dev/null
     WriteToLog "No sessions are installed in $WSESSIONSPATHS, configured correctly, or supported by the hardware in this seat, $CurrentHandleSeat ."
     return 1
   fi
@@ -2070,7 +2059,7 @@
 
 This is the optimal way to run Weston or other Wayland servers."
   fi
-  $KDIALOGCMD --title="System Information" --msgbox "This is a third party fan made distribution!
+  $ZENITYCMD --title="Information" --no-wrap --info --text="This is a third party fan made distribution!
 
 $BACKENDSTRING
 
@@ -2098,17 +2087,15 @@
   ((NumberOfSessions--))
 
   #go thorugh each session, reading the arrays containing information about the sessions. to build the SessionList variable
+  #The session list variable is multiline, and used by a zenity dialog.
+  #line 1 is the session number
+  #line 2 is the TTY for the session
+  #line 3 is the PID of the session
+  #line 4 is the user name
+  #line 5 is the logind session id.
   RunningSeatSessions=($(loginctl show-seat "$CurrentSeat" -p Sessions --value 2>/dev/null))
   while [[ $NumberOfSessions -ge 0 ]]
   do
-    SessionIDName=${AllSessionIDs[$NumberOfSessions]}
-    RunningSeatSessionNameLength=${#SessionIDName}
-    SpacePadCount=$(( 8 - $RunningSeatSessionNameLength ))
-    SpacePadString=""
-    for (( SpaceItr=0; SpaceItr<$SpacePadCount; SpaceItr++ ))
-    do
-      SpacePadString+=" "
-    done
     #determine if the current session is alive, before adding it to the list
     SessionisRunning=0
     for RunningSeatSession in "${RunningSeatSessions[@]}"
@@ -2128,7 +2115,11 @@
         then
           SessionList+=$'\n'
         fi
-        SessionList+="$NumberOfSessions"$'\n'"${AllSessionIDs[$NumberOfSessions]}"$SpacePadString"${AllSessionUsers[$NumberOfSessions]}"
+        SessionList+="$NumberOfSessions"$'\n'
+        SessionList+="${AllSessionIDs[$NumberOfSessions]}"$'\n'
+        SessionList+="${AllSessionPIDs[$NumberOfSessions]}"$'\n'
+        SessionList+="${AllSessionUsers[$NumberOfSessions]}"$'\n'
+        SessionList+="tty${AllSessionTTYs[$NumberOfSessions]}"
       fi
     fi
     ((NumberOfSessions--))
@@ -2139,17 +2130,19 @@
     SessionList+=$'\n'
   fi
   SessionList+="-1"$'\n'
-  SessionList+="New Session..."
+  SessionList+=$'\n'
+  SessionList+=$'\n'
+  SessionList+="New Session..."$'\n'
+  SessionList+=$'\n'
+
+
 
-  IFS=$'\n'
-  SessionList=($SessionList)
-  unset IFS
 
   unset ChangeSession
   #prompt for the list of running sessions, and return the session ID. (which is used in all of the arrays for Session PID, user name, etc)
-  ChangeSession=$($KDIALOGCMD --title="Switch User" --menu "Select a running session to change into" -- "${SessionList[@]}" 2>/dev/null )
+  ChangeSession=$(echo "$SessionList"  | sed '$d'| $ZENITYCMD --title="Switch User" --height=450 --list --text "Select a running session to change into" --hide-header --column sessionid --column tty --column pid --column username --column ID --print-column=1 --hide-column=1,3,5 --separator="\n" 2>/dev/null )
   CancelOrOK=$?
-  #Abort if the user selected cancel on the dialog
+  #Abort if the user selected cancel on the zenity dialog
   if [[ $CancelOrOK != 0 ]]
   then
     exit 0
@@ -2178,7 +2171,7 @@
         #hand over the logind session ID to allow desktop permissions to work.
         loginctl activate $ChangeSessionID &>/dev/null
       else
-        $KDIALOGCMD --title="Switch User" --msgbox "The selected session was not found. The session may have quit." 2>/dev/null
+        $ZENITYCMD --title="Switch User" --warning --text="The selected session was not found. The session may have quit." 2>/dev/null
       fi
     fi
   fi
@@ -2432,30 +2425,26 @@
     then
       UserDisplayName=$UserName
     fi
-    #The display in the dialog should be "Firstname Lastname    (loginname)"
+    #The display in the zenity dialog should be "Firstname Lastname    (loginname)"
     UserDisplayName="$UserDisplayName   (${UserData[1]})" 
     unset IFS
-    #add the data to the USERLISTSTRING that gets sent into kdialog. line 1 is the user login name, Line 2 is the display name, and then line 3 is the login of the next user...
-    USERLISTSTRING+="$UserName"
-    USERLISTSTRING+=$'\n'
+    #add the data to the USERLISTSTRING that gets sent into zenity. Line 1 is the display name, line 2 is the user login name, and then line 3 is the display name of the next user...
     USERLISTSTRING+="$UserDisplayName"
     USERLISTSTRING+=$'\n'
+    USERLISTSTRING+="$UserName"
+    USERLISTSTRING+=$'\n'
   done < <(echo "$USERLIST")
   #Append a default value with the display string to enter the username with -1. When selected, this tells the script to bring up a dialog to allow the user to enter a manual name
-  USERLISTSTRING+="-1"
-  USERLISTSTRING+=$'\n'
   USERLISTSTRING+="Enter User Name..."
+  USERLISTSTRING+=$'\n'
+  USERLISTSTRING+="-1"
 
-  #Convert the data to an array
-  IFS=$'\n'
-  USERLISTSTRING=($USERLISTSTRING)
-  unset IFS
 
   #present the list of the users to the system
-  LOGINUSER=$($KDIALOGCMD --title="Username" --menu "Select a user from the list to log into." -- "${USERLISTSTRING[@]}" 2>/dev/null )
+  LOGINUSER=$(echo "$USERLISTSTRING" | $ZENITYCMD --title="Username" --height=450 --list --text "Select a user from the list to log into."  --column users --column usernames --hide-column 2 --print-column 2 --hide-header --separator="\n" 2>/dev/null )
   CancelOrOK=$?
   export LOGINUSER
-  #Abort if the user selected cancel on the dialog
+  #Abort if the user selected cancel on the zenity dialog
   if [[ $CancelOrOK != 0 ]]
   then
     exit 0
@@ -2463,9 +2452,9 @@
   #if there is no user selected or if the LOGINUSER is -1, as in the user opted to enter a username manually prompt for the username with a text dialog
   if [[ -z $LOGINUSER || $LOGINUSER == -1 ]]
   then
-    LOGINUSER=$($KDIALOGCMD --title="Username" --inputbox "Enter the User Name:" 2>/dev/null)
+    LOGINUSER=$($ZENITYCMD --title="Username" --entry --text="Enter the User Name:" 2>/dev/null)
     CancelOrOK=$?
-    #Abort if the user selected cancel on the dialog
+    #Abort if the user selected cancel on the zenity dialog
     if [[ $CancelOrOK != 0 ]]
     then
       exit 0
@@ -2496,9 +2485,9 @@
       passwordresult=0
     else
       #Prompt for the users password
-      USERPASSWORD=$( $KDIALOGCMD --title="Login for $LOGINUSER" --password "Type your password" 2>/dev/null )
+      USERPASSWORD=$( $ZENITYCMD --title="Login for $LOGINUSER" --password 2>/dev/null )
       CancelOrOK=$?
-      #Abort if the user selected cancel on the dialog
+      #Abort if the user selected cancel on the zenity dialog
       if [[ $CancelOrOK != 0 ]]
       then
         exit 0
@@ -2512,7 +2501,7 @@
     fi
     if [[ $passwordresult != 0 ]]
     then
-      $KDIALOGCMD --title="Login Failed" --msgbox "Invalid password for $LOGINUSER, or username invalid" 2>/dev/null
+      $ZENITYCMD --warning --text="Invalid password for $LOGINUSER, or username invalid" 2>/dev/null
       WriteToLog "Invalid password for $LOGINUSER, or username invalid"
     else
       export USERHOME=$(eval echo ~$LOGINUSER)
@@ -2536,13 +2525,13 @@
       StartUserSession "$SessionTTY" "$CurrentSeat" "$LOGINUSER" $DoSessionLock "$WSESSIONDATA" &
     fi
   else
-    $KDIALOGCMD --title="System Error" --error "Not Enough TTYs!" 2>/dev/null
+    $ZENITYCMD --warning --text="Not Enough TTYs!" 2>/dev/null
     WriteToLog "Not Enough TTYs for user login!"
   fi
 }
 
 
-#This function is called when the loginmanager_control socket recives the command "Leave". It brings up a dialog for handling power options for the computer.
+#This function is called when the loginmanager_control socket recives the command "Leave". It brings up a zenity dialog for handling power options for the computer.
 #It takes 1 optional argument, the seat to display the dialogs on
 function LeavePrompt
 {
@@ -2557,7 +2546,7 @@
     SessionPromptThreshold=1
   else
     SetCommonConfig
-    KDIALOGCMD=kdialog
+    ZENITYCMD=zenity
     SessionPromptThreshold=2
 
     ACTIONSTRING="Switch User"$'\n'"Switch User"$'\n'"Logoff"$'\n'"Logoff Session"
@@ -2585,7 +2574,7 @@
   unset RunningSessions
   unset RunningSessionTypes
 
-  #The first line is sent to the dialog is the actual command it sets the ACTION variable to be. the second line is what it appears as in the dialog for the user.
+  #The first line is sent to the zenity dialog is the actual command it sets the ACTION variable to be. the second line is what it appears as in the Zenity dialog for the user.
   CanPowerOff=$(dbus-send --print-reply --system --dest=org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.CanPowerOff)
   if [[ $CanPowerOff =~ " \"yes\"" ]]
   then
@@ -2641,15 +2630,9 @@
     ACTIONSTRING+=$'\n'
     ACTIONSTRING+="Hibernate Computer"
   fi
-
-  IFS=$'\n'
-  ACTIONSTRING=($ACTIONSTRING)
-  unset IFS
-
-  ACTION=$($KDIALOGCMD --title="Leave..." --menu "What do you want to do?" -- "${ACTIONSTRING[@]}" 2>/dev/null )
-
+  ACTION=$(echo "$ACTIONSTRING" | $ZENITYCMD --title="Leave..." --height=450 --list  --hide-header --text="What do you want to do?" --separator="\n" --column 'action' --column 'useraction' --hide-column 1 --print-column=1  2>/dev/null )
   CancelOrOK=$?
-  #Abort if the user selected cancel on the dialog
+  #Abort if the user selected cancel on the zenity dialog
   if [[ $CancelOrOK != 0 ]]
   then
     exit 0
@@ -2668,7 +2651,7 @@
   fi
 
   #Prompt the user if they are sure they want to execute the selected action
-  $KDIALOGCMD --title="Leave..." --yesno "Are you sure you want to ${ACTION}? $SESSIONINFO" 2>/dev/null
+  $ZENITYCMD --width=450 --title="Leave..." --question --text="Are you sure you want to ${ACTION}? $SESSIONINFO" 2>/dev/null
   CONFIRM=$?
   if [[ $CONFIRM != 0 ]]
   then
@@ -2713,7 +2696,7 @@
   #if the selected action failed, tell the user
   if [[ $RESULT != 0 ]]
   then
-    $KDIALOGCMD --title="Failure" --error "Failed to $ACTION" 2>/dev/null
+    $ZENITYCMD --title="Failure" --warning --text="Failed to $ACTION" 2>/dev/null
   fi
 }
 
@@ -3040,7 +3023,7 @@
   DisplayServerWait "$CurrentSeat"
   AUTOLOGINUSERHOME=$(eval echo ~$AUTOLOGINUSER)
   ChooseSessionType "$CurrentSeat" "$AUTOLOGINUSER" "$AUTOLOGINUSERHOME" 1
-  #Abort if the user selected cancel on the dialog
+  #Abort if the user selected cancel on the zenity dialog
   CancelOrOK=$?
   if [[ $CancelOrOK != 0 ]]
   then
@@ -3078,7 +3061,7 @@
 
     StartUserSession "$AutoSessionTTY" "$CurrentSeat" "$AUTOLOGINUSER" $DoSessionLock "$WSESSIONDATA" &
   else
-    $KDIALOGCMD --title="System Error" --error "Not Enough TTYs!" 2>/dev/null
+    $ZENITYCMD --warning --text="Not Enough TTYs for autologin!" 2>/dev/null
     WriteToLog "Not Enough TTYs for autologin!"
   fi
 }
@@ -3114,20 +3097,15 @@
   SetFallbackEnvironmentVariables $CurrentSeat
   #wait for the loginmanagerdisplay
   DisplayServerWait "$CurrentSeat"
-  ActionMenu="Login"$'\n'"Login..."$'\n'
-  ActionMenu+="Switch"$'\n'"Switch User..."$'\n'
-  ActionMenu+="Leave"$'\n'"Shutdown..."$'\n'"Info"$'\n'"Help..."
+  ActionMenu="Login\nLogin...\n"
+  ActionMenu+="Switch\nSwitch User...\n"
+  ActionMenu+="Leave\nShutdown...\nInfo\nHelp..."
   if [[ $wlmdebuginsecure == 1 ]]
   then
-    ActionMenu+=$'\n'"Debug"$'\n'"Root Terminal..."
+    ActionMenu+="\nDebug\nRoot Terminal..."
   fi
-
-  IFS=$'\n'
-  ActionMenu=($ActionMenu)
-  unset IFS
-
-  USERACTION=$($KDIALOGCMD --title="Login Manager" --menu "Select an Action" -- "${ActionMenu[@]}"  2>> /var/log/waylandloginmanager/loginmanagerdisplays/loginmanagerdisplay_"$SeatFileName".log)
-  DIALOGSTATUS=$?
+  USERACTION=$(echo -e "$ActionMenu"|$ZENITYCMD  --title="Login Manager" --height=300 --hide-column 1 --separator="\n" --list --column action --column display --hide-header --text "Select an Action"  2>> /var/log/waylandloginmanager/loginmanagerdisplays/loginmanagerdisplay_"$SeatFileName".log; exit ${PIPESTATUS[1]})
+ZENITYSTATUS=$?
   #If the useraction exists (the user did not click cancel), then send the command to the loginmanager_control
   if [[ ! -z $USERACTION ]]
   then
@@ -3135,12 +3113,12 @@
   else
     $SLEEPCMD .1
   fi
-  #if the dialog program segfaults, then something is wrong. wait longer
-  if [[ $DIALOGSTATUS == 139 ]]
+  #if zenity segfaults, then something is wrong. wait longer
+  if [[ $ZENITYSTATUS == 139 ]]
   then
     $SLEEPCMD 5
   fi
-  exit $DIALOGSTATUS
+  exit $ZENITYSTATUS
 }
 
 #Function to get the index number of the specified seat of the array "StartedSeats" for the specified seat. It takes 1 argument, the seat
@@ -3489,9 +3467,9 @@
       fi
     done
 
-    if [[ $KdialogCommandFoundResult != 0 ]]
+    if [[ $ZenityCommandFoundResult != 0 ]]
     then
-      WriteToLog "kdialog is not installed"
+      WriteToLog "zenity is not installed"
       UIPromptAttemptsMaxedOut=1
     fi
 
