diff --git a/src/modules/displaymanager/main.py b/src/modules/displaymanager/main.py
index b5a9dbb..0192bdd 100644
--- a/src/modules/displaymanager/main.py
+++ b/src/modules/displaymanager/main.py
@@ -88,197 +88,22 @@ def set_autologin(username, displaymanagers, default_desktop_environment, root_m
     if username is None:
         do_autologin = False
 
-    if "mdm" in displaymanagers:
-        # Systems with MDM as Desktop Manager
-        mdm_conf_path = os.path.join(root_mount_point, "etc/mdm/custom.conf")
-
-        if os.path.exists(mdm_conf_path):
-            with open(mdm_conf_path, 'r') as mdm_conf:
-                text = mdm_conf.readlines()
-
-            with open(mdm_conf_path, 'w') as mdm_conf:
-                for line in text:
-                    if '[daemon]' in line:
-                        if do_autologin:
-                            line = "[daemon]\nAutomaticLogin={!s}\nAutomaticLoginEnable=True\n".format(username)
-                        else:
-                            line = "[daemon]\nAutomaticLoginEnable=False\n"
-
-                    mdm_conf.write(line)
-        else:
-            with open(mdm_conf_path, 'w') as mdm_conf:
-                mdm_conf.write('# Calamares - Configure automatic login for user\n')
-                mdm_conf.write('[daemon]\n')
-
-                if do_autologin:
-                    mdm_conf.write("AutomaticLogin={!s}\n".format(username))
-                    mdm_conf.write('AutomaticLoginEnable=True\n')
-                else:
-                    mdm_conf.write('AutomaticLoginEnable=False\n')
-
-    if "gdm" in displaymanagers:
-        # Systems with GDM as Desktop Manager
-        gdm_conf_path = os.path.join(root_mount_point, "etc/gdm/custom.conf")
-
-        if os.path.exists(gdm_conf_path):
-            with open(gdm_conf_path, 'r') as gdm_conf:
-                text = gdm_conf.readlines()
-
-            with open(gdm_conf_path, 'w') as gdm_conf:
-                for line in text:
-                    if '[daemon]' in line:
-                        if do_autologin:
-                            line = "[daemon]\nAutomaticLogin={!s}\nAutomaticLoginEnable=True\n".format(username)
-                        else:
-                            line = "[daemon]\nAutomaticLoginEnable=False\n"
-
-                    gdm_conf.write(line)
-        else:
-            with open(gdm_conf_path, 'w') as gdm_conf:
-                gdm_conf.write('# Calamares - Enable automatic login for user\n')
-                gdm_conf.write('[daemon]\n')
-
-                if do_autologin:
-                    gdm_conf.write("AutomaticLogin={!s}\n".format(username))
-                    gdm_conf.write('AutomaticLoginEnable=True\n')
-                else:
-                    gdm_conf.write('AutomaticLoginEnable=False\n')
-
-        if do_autologin and os.path.exists("{!s}/var/lib/AccountsService/users".format(root_mount_point)):
-            os.system("echo \"[User]\" > {!s}/var/lib/AccountsService/users/{!s}".format(root_mount_point, username))
-
-            if default_desktop_environment is not None:
-                os.system("echo \"XSession={!s}\" >> {!s}/var/lib/AccountsService/users/{!s}".format(
-                          default_desktop_environment.desktop_file, root_mount_point, username))
-
-            os.system("echo \"Icon=\" >> {!s}/var/lib/AccountsService/users/{!s}".format(
-                      root_mount_point, username))
-
-    if "kdm" in displaymanagers:
-        # Systems with KDM as Desktop Manager
-        kdm_conf_path = os.path.join(root_mount_point, "usr/share/config/kdm/kdmrc")
+    if "waylandloginmanager" in displaymanagers:
+        # Systems with waylandloginmanager as Desktop Manager
+        waylandloginmanager_conf_path = os.path.join(root_mount_point, "etc/waylandloginmanager.conf")
         text = []
-
-        if os.path.exists(kdm_conf_path):
-            with open(kdm_conf_path, 'r') as kdm_conf:
-                text = kdm_conf.readlines()
-
-            with open(kdm_conf_path, 'w') as kdm_conf:
-                for line in text:
-                    if 'AutoLoginEnable=' in line:
-                        if do_autologin:
-                            line = 'AutoLoginEnable=true\n'
-                        else:
-                            line = 'AutoLoginEnable=false\n'
-
-                    if do_autologin and 'AutoLoginUser=' in line:
-                        line = "AutoLoginUser={!s}\n".format(username)
-
-                    kdm_conf.write(line)
+        os.mknod(waylandloginmanager_conf_path)
+        if os.path.exists(waylandloginmanager_conf_path):
+          with open(waylandloginmanager_conf_path, 'w') as waylandloginmanager_conf:
+             if do_autologin:
+                  line = "autologin-user={!s}\n".format(username)
+             else:
+                  line = "#autologin-user=\n"
+
+             waylandloginmanager_conf.write(line)
         else:
-            return "Cannot write KDM configuration file", "KDM config file {!s} does not exist".format(kdm_conf_path)
-
-    if "lxdm" in displaymanagers:
-        # Systems with LXDM as Desktop Manager
-        lxdm_conf_path = os.path.join(root_mount_point, "etc/lxdm/lxdm.conf")
-        text = []
-
-        if os.path.exists(lxdm_conf_path):
-            with open(lxdm_conf_path, 'r') as lxdm_conf:
-                text = lxdm_conf.readlines()
-
-            with open(lxdm_conf_path, 'w') as lxdm_conf:
-                for line in text:
-                    if 'autologin=' in line:
-                        if do_autologin:
-                            line = "autologin={!s}\n".format(username)
-                        else:
-                            line = "# autologin=\n"
-
-                    lxdm_conf.write(line)
-        else:
-            return "Cannot write LXDM configuration file", "LXDM config file {!s} does not exist".format(lxdm_conf_path)
-
-    if "lightdm" in displaymanagers:
-        # Systems with LightDM as Desktop Manager
-        # Ideally, we should use configparser for the ini conf file,
-        # but we just do a simple text replacement for now, as it
-        # worksforme(tm)
-        lightdm_conf_path = os.path.join(root_mount_point, "etc/lightdm/lightdm.conf")
-        text = []
-
-        if os.path.exists(lightdm_conf_path):
-            with open(lightdm_conf_path, 'r') as lightdm_conf:
-                text = lightdm_conf.readlines()
-
-            with open(lightdm_conf_path, 'w') as lightdm_conf:
-                for line in text:
-                    if 'autologin-user=' in line:
-                        if do_autologin:
-                            line = "autologin-user={!s}\n".format(username)
-                        else:
-                            line = "#autologin-user=\n"
-
-                    lightdm_conf.write(line)
-        else:
-            return "Cannot write LightDM configuration file", "LightDM config file {!s} does not exist".format(lightdm_conf_path)
-
-    if "slim" in displaymanagers:
-        # Systems with Slim as Desktop Manager
-        slim_conf_path = os.path.join(root_mount_point, "etc/slim.conf")
-        text = []
-
-        if os.path.exists(slim_conf_path):
-            with open(slim_conf_path, 'r') as slim_conf:
-                text = slim_conf.readlines()
-
-            with open(slim_conf_path, 'w') as slim_conf:
-                for line in text:
-                    if 'auto_login' in line:
-                        if do_autologin:
-                            line = 'auto_login yes\n'
-                        else:
-                            line = 'auto_login no\n'
+            return "Cannot write waylandloginmanager configuration file", "waylandloginmanager config file {!s} does not exist".format(waylandloginmanager_conf_path)
 
-                    if do_autologin and 'default_user' in line:
-                        line = "default_user {!s}\n".format(username)
-
-                    slim_conf.write(line)
-        else:
-            return "Cannot write SLIM configuration file", "SLIM config file {!s} does not exist".format(slim_conf_path)
-
-    if "sddm" in displaymanagers:
-        # Systems with Sddm as Desktop Manager
-        sddm_conf_path = os.path.join(root_mount_point, "etc/sddm.conf")
-
-        if os.path.isfile(sddm_conf_path):
-            libcalamares.utils.debug('SDDM config file exists')
-        else:
-            libcalamares.utils.check_chroot_call(["sh", "-c", "sddm --example-config > /etc/sddm.conf"])
-
-        text = []
-
-        with open(sddm_conf_path, 'r') as sddm_conf:
-            text = sddm_conf.readlines()
-
-        with open(sddm_conf_path, 'w') as sddm_conf:
-            for line in text:
-                # User= line, possibly commented out
-                if re.match('\\s*(?:#\\s*)?User=', line):
-                    if do_autologin:
-                        line = 'User={}\n'.format(username)
-                    else:
-                        line = '#User=\n'
-
-                # Session= line, commented out or with empty value
-                if re.match('\\s*#\\s*Session=|\\s*Session=$', line):
-                    if default_desktop_environment is not None:
-                        if do_autologin:
-                            line = 'Session={}.desktop\n'.format(default_desktop_environment.desktop_file)
-                        else:
-                            line = '#Session={}.desktop\n'.format(default_desktop_environment.desktop_file)
-
-                sddm_conf.write(line)
 
     return None
 
@@ -316,117 +141,13 @@ def run():
     else:
         enable_basic_setup = False
 
-    # Setup slim
-    if "slim" in displaymanagers:
-        if not have_dm("slim", root_mount_point):
-            libcalamares.utils.debug("slim selected but not installed")
-            displaymanagers.remove("slim")
-
-    # Setup sddm
-    if "sddm" in displaymanagers:
-        if not have_dm("sddm", root_mount_point):
-            libcalamares.utils.debug("sddm selected but not installed")
-            displaymanagers.remove("sddm")
-
-    # setup lightdm
-    if "lightdm" in displaymanagers:
-        if have_dm("lightdm", root_mount_point):
-            if enable_basic_setup:
-                libcalamares.utils.chroot_call(['mkdir', '-p', '/run/lightdm'])
-
-                if libcalamares.utils.chroot_call(['getent', 'group', 'lightdm']) != 0:
-                    libcalamares.utils.chroot_call(['groupadd', '-g', '620', 'lightdm'])
-
-                if libcalamares.utils.chroot_call(['getent', 'passwd', 'lightdm']) != 0:
-                    libcalamares.utils.chroot_call(['useradd', '-c', '"LightDM Display Manager"',
-                                                    '-u', '620', '-g', 'lightdm', '-d', '/var/run/lightdm',
-                                                    '-s', '/usr/bin/nologin', 'lightdm'])
-
-                libcalamares.utils.chroot_call(['passwd', '-l', 'lightdm'])
-                libcalamares.utils.chroot_call(['chown', '-R', 'lightdm:lightdm', '/run/lightdm'])
-                libcalamares.utils.chroot_call(['chmod', '+r' '/etc/lightdm/lightdm.conf'])
-
-            if default_desktop_environment is not None:
-                os.system("sed -i -e \"s/^.*user-session=.*/user-session={!s}/\" {!s}/etc/lightdm/lightdm.conf".format(
-                          default_desktop_environment.desktop_file, root_mount_point))
-        else:
-            libcalamares.utils.debug("lightdm selected but not installed")
-            displaymanagers.remove("lightdm")
-
-    # Setup gdm
-    if "gdm" in displaymanagers:
-        if have_dm("gdm", root_mount_point):
-            if enable_basic_setup:
-                if libcalamares.utils.chroot_call(['getent', 'group', 'gdm']) != 0:
-                    libcalamares.utils.chroot_call(['groupadd', '-g', '120', 'gdm'])
-
-                if libcalamares.utils.chroot_call(['getent', 'passwd', 'gdm']) != 0:
-                    libcalamares.utils.chroot_call(['useradd', '-c', '"Gnome Display Manager"',
-                                                    '-u', '120', '-g', 'gdm', '-d', '/var/lib/gdm',
-                                                    '-s', '/usr/bin/nologin', 'gdm'])
-
-                libcalamares.utils.chroot_call(['passwd', '-l', 'gdm'])
-                libcalamares.utils.chroot_call(['chown', '-R', 'gdm:gdm', '/var/lib/gdm'])
-        else:
-            libcalamares.utils.debug("gdm selected but not installed")
-            displaymanagers.remove("gdm")
-
-    # Setup mdm
-    if "mdm" in displaymanagers:
-        if have_dm("mdm", root_mount_point):
-            if enable_basic_setup:
-                if libcalamares.utils.chroot_call(['getent', 'group', 'mdm']) != 0:
-                    libcalamares.utils.chroot_call(['groupadd', '-g', '128', 'mdm'])
-
-                if libcalamares.utils.chroot_call(['getent', 'passwd', 'mdm']) != 0:
-                    libcalamares.utils.chroot_call(['useradd', '-c', '"Linux Mint Display Manager"',
-                                                    '-u', '128', '-g', 'mdm', '-d', '/var/lib/mdm',
-                                                    '-s', '/usr/bin/nologin', 'mdm'])
-
-                libcalamares.utils.chroot_call(['passwd', '-l', 'mdm'])
-                libcalamares.utils.chroot_call(['chown', 'root:mdm', '/var/lib/mdm'])
-                libcalamares.utils.chroot_call(['chmod', '1770', '/var/lib/mdm'])
-
-            if default_desktop_environment is not None:
-                os.system("sed -i \"s|default.desktop|{!s}.desktop|g\" {!s}/etc/mdm/custom.conf".format(
-                          default_desktop_environment.desktop_file, root_mount_point))
-        else:
-            libcalamares.utils.debug("mdm selected but not installed")
-            displaymanagers.remove("mdm")
-
-    # Setup lxdm
-    if "lxdm" in displaymanagers:
-        if have_dm("lxdm", root_mount_point):
-            if enable_basic_setup:
-                if libcalamares.utils.chroot_call(['getent', 'group', 'lxdm']) != 0:
-                    libcalamares.utils.chroot_call(['groupadd', '--system', 'lxdm'])
-
-                libcalamares.utils.chroot_call(['chgrp', '-R', 'lxdm', '/var/lib/lxdm'])
-                libcalamares.utils.chroot_call(['chgrp', 'lxdm', '/etc/lxdm/lxdm.conf'])
-                libcalamares.utils.chroot_call(['chmod', '+r', '/etc/lxdm/lxdm.conf'])
-
-            if default_desktop_environment is not None:
-                os.system("sed -i -e \"s|^.*session=.*|session={!s}|\" {!s}/etc/lxdm/lxdm.conf".format(
-                          default_desktop_environment.executable, root_mount_point))
-        else:
-            libcalamares.utils.debug("lxdm selected but not installed")
-            displaymanagers.remove("lxdm")
-
-    # Setup kdm
-    if "kdm" in displaymanagers:
-        if have_dm("kdm", root_mount_point):
-            if enable_basic_setup:
-                if libcalamares.utils.chroot_call(['getent', 'group', 'kdm']) != 0:
-                    libcalamares.utils.chroot_call(['groupadd', '-g', '135', 'kdm'])
-
-                if libcalamares.utils.chroot_call(['getent', 'passwd', 'kdm']) != 0:
-                    libcalamares.utils.chroot_call(['useradd', '-u', '135', '-g', 'kdm', '-d',
-                                                    '/var/lib/kdm', '-s', '/bin/false', '-r', '-M', 'kdm'])
-
-                libcalamares.utils.chroot_call(['chown', '-R', '135:135', 'var/lib/kdm'])
+    # setup waylandloginmanager
+    if "waylandloginmanager" in displaymanagers:
+        if have_dm("waylandloginmanager", root_mount_point):
+            libcalamares.utils.debug("Waylandloginmanager found")
         else:
-            libcalamares.utils.debug("kdm selected but not installed")
-            displaymanagers.remove("kdm")
+            libcalamares.utils.debug("waylandloginmanager selected but not installed")
+            displaymanagers.remove("waylandloginmanager")
 
     if username is not None:
         libcalamares.utils.debug("Setting up autologin for user {!s}.".format(username))
