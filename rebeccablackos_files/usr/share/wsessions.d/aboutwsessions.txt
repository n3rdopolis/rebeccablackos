Section 1----------------------------------------------

About the wsession file:

any variables in the keys are expanded with perl

The wsession file must be executable, the wsession file must end in .desktop, and must start with [Desktop File] at the top line 
It must be in the top directory of /usr/share/wsessions.d/ , as subfolders of that folder are not probed. See line 1 in the example


The keys------------------------------
Enabled:
A wsession file must also have an key Enabled=1 so that it shows up on the list.
It also must have CompositorSupports(BACKEND)=1 for each backend it supports.

Type:
There must be a key Type=WSession file, so that the .desktop file is known to be a .wsession file. See line 2 in the example

Name:
The Name key is the name of the wsession, in user friendly string. See line 3 in the example

CompositorExec:
The path to the Wayland server binary.


CompositorSupports(BACKEND):
Currently there are three case sensitive backend types KMS (Kernel Mode Setting) WL (Wayland hosted), and FB (framebuffer), so the three lines are CompositorSupportsKMS CompositorSupportsWL, and CompositorSupportsFB, as shown on lines 06 and 06 on the example below. if the compositor doesn't have support for the Framebuffer backend for example, CompositorSupportsFB=1 would be changed to CompositorSupportsFB=0

  If the hardware doesn't support a backend, for example VirtualBox doesn't support KMS, if a server only supports KMS, it does not appear in the list.
  Note that the WL backend requires the hardware to support either KMS or FB, as the Wayland display server host that will run the guest requires either KMS or FB in order to be able to run, which is selected automatically by the Wayland Login Manger.

  Currently, the backend selection preference is to check KMS, then WL, then lastly FB.

  If for example a session only supports FB backends, and the hardware supports FB and KMS, the session will be opened using the FB backend.
  If for example a session supports KMS and FB, and the hardware only supports FB backends, then the session will be opened with the FB backend.
  If for example a session only supports KMS, but the hardware only supports FB, then the session will not be available for selection.
  If a session supports only WL, then it will run on platforms that only support KMS, only support FB, and only support KMS and FB, as the host server that is used has support for both backends. This is a detail that is handled automatically.

Compositor(BACKEND)Arguments:
If there are different arguments that need to be passed to the compositor to enable a specific backend, then the Compositor(BACKEND)Arguments line must be specified for each backend, as shown on lines 08 and 09 on the example below. *These are optional*

CompositorDisplayArgument:
This specifies how the compositor is specified what to use for WAYLAND_DISPLAY in weston it is --socket= . waylandloginmanager then automatically appends the session ID after it, so it doesn't need any variables. it only appends it if CompositorDisplayArgument is specified

  Not all servers need this so this is optional. some servers have WAYLAND_DISPLAY specified based on what it's exported as, which waylandloginmanager supports

  See line 10 in the example

SessionArgument:
if the specific session needs arguments passed. Weston for example is one server, but can have different sessions specified, based on what modules it loads, such as loading the orbital or hawaii shell module opposed to the weston-desktop-shell. See line 11 in the example


IsFallbackSession:
This specifies if the current session is a fallback session, so that the session can be handled in a paticular way, for example sessions that use a fullscreen-shell enabled Weston, but to have the host weston server run using the pixman renderer.

AdditionalArguments:
Any other arguments that should be passed to the server, but are more generic, for example in line 12 in the example, it specifies where weston should log. See line 12 in the example.

NeedsFile: there can be as many NeedsFile arguments as needed. if one of these files are missing, for example, a path to a module or executable, it does NOT display in the waylandloginmanager as a usable session. See line 13 and 14 in the example

EnvironmentFile: this is documentated in Section 2, as to how to create this file, this file describes optional variables that should be set or unset to run this session. It also supports setting or unsetting variables for a specific backend. This is a path to the environment file, see line 15 in the example
----------------------------------------------

An example:
----------------------------------------------
01.|    [Desktop Entry]
02.|    Enabled=1
03.|    Type=WSession
04.|    Name=Default Weston Desktop Shell
05.|    CompositorExec=/opt/bin/weston
06.|    CompositorSupportsKMS=1
07.|    CompositorSupportsFB=1
08.|    CompositorSupportsWL=0
09.|    CompositorKMSArguments=--backend=drm-backend.so
10.|    CompositorFBArguments=--backend=fbdev-backend.so
11.|    CompositorDisplayArgument=--socket=
12.|    SessionArgument=--modules=xwayland.so,cms-colord.so
13.|    AdditionalArguments=--log=$HOME/weston.log
14.|    NeedsFile=$WESTON_PLUGIN_PATH/desktop-shell.so
15.|    NeedsFile=/opt/bin/weston
16.|    EnvironmentFile=/usr/share/wsessions.d/weston-debug.environment
----------------------------------------------



Section 2:----------------------------------------------

The environment file can be placed anywhere, as long as it is specified by the EnvironmentFile value in the wsession file. While the first line must be [EnvironmentFile], an example looks like this 
The environment file is not executable, but *parsed* and variables are not expanded, and has limited support for conditionals based on the backend type. See line 1 in the example

Currently there are three case sensitive backend types KMS (Kernel Mode Setting) WL (Wayland hosted) and FB (framebuffer)

----------------------------------------------
1.|    [EnvironmentFile]
2.|    set=E_WL_FORCE=kms@KMS
3.|    set=E_WL_FORCE=fb@FB
4.|    set=WAYLAND_DEBUG=server
5.|    unset=GDK_BACKEND
----------------------------------------------

the options are: set=varname=vardata		(set a variable to be something)
		 unset=varname			(unset a variable)
		 set=varname=vardata@BACKEND	(set a variable to be something if @BACKEND matches BackendType)
		 unset=varname@BACKEND		(unset a variable if @BACKEND matches BackendType)

If it ends with @BACKEND, then the variable action is only performed, if the BackendType is BACKEND. Otherwise if it is unspecified, it is performed on ALL backends.
  in Line 2 of the example the variable E_WL_FORCE to be kms (export E_WL_FORCE=kms) only if the BackendType is KMS.
  in Line 5 of the example the variable GDK_BACKEND is unset irregaurdless of what the BackendType is. 

default.environment is handled by all sessions first, before the specified environment file, in the case of a need of making an environment variable avaible to all sessions.