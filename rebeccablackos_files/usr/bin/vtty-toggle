#! /bin/bash
#    Copyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Disable a vtty (until the next reboot)



function PromptUI
{
  if [[ $Action == force* ]]
  then
    Prompt=0
  else
    read -p "By running the action $Action on $CurrentTTY this will end the current session on $CurrentTTY . Continue? (Must be y or Y): " Prompt 
    if [[ $Prompt != y && $Prompt != Y ]]
    then
      echo "Action not confirmed. Exiting..."
      exit 1
    fi
  fi
}
function PrintHelp
{
  echo "This utility changes the state of using vTTYs or using the the legacy TTYs."
  echo "The default action is to toggle, and it can only impact the current TTY."
  echo "You can specify other actions by running"
  echo "vtty-toggle ACTION"
  echo "The three actions are:"
  echo "toggle   -   If using legacy TTY mode, switch to TTY, and if using vTTY, switch to legacy"
  echo "vtty-on  -   Set vTTY on"
  echo "vtty-off -   Set vTTY off"
  echo "Adding the word force before the action, such as forcetoggle suppresses the prompt"
}

function ResetTTYMode
{
    python3 -c "from array import array; \
from fcntl import ioctl; \
buf = array('h', [0]); \
buf[0] = 0; \
fd = open('/dev/$1', 'wb'); \
ioctl(fd, 0x4B3A, 0); \
ioctl(fd, 0x05602, buf); \
fd.close()" &>/dev/null
}


function SwitchToGettyMode
{
  PromptUI
  touch /run/vtty/${CurrentTTY}/vttyinhibit 2>/dev/null
  systemd-run bash -c "systemctl start getty@${CurrentTTY}.service; systemctl stop vtty-frontend@${CurrentTTY}.service"
}

function SwitchToVTTYMode
{
  PromptUI
  rm /run/vtty/${CurrentTTY}/vttyinhibit 2>/dev/null
  systemd-run bash -c "systemctl stop getty@${CurrentTTY}.service; systemctl start vtty-frontend@${CurrentTTY}.service"
}


if [[ $1 == "--help" ]]
then
  PrintHelp
  exit
fi


#Require root privlages
if [[ $UID != 0 ]]
then
  echo "Must be run as root."
  exit
fi

CurrentTTYNumber=$(fgconsole 2>/dev/null)
CurrentTTY="tty$CurrentTTYNumber"
if [[ $? != 0 ]]
then
  echo "Could not get the current physical TTY"
fi


AutoVTService=$(systemctl show autovt@${CurrentTTY}.service -p Id --value)
GettyServiceState=$(systemctl is-active getty@${CurrentTTY}.service -p Id --value &>/dev/null; echo $?)
vTTYServiceState=$(systemctl is-active vtty-frontend@${CurrentTTY}.service -p Id --value &>/dev/null; echo $?)

if [[ $AutoVTService != "vtty-frontend@${CurrentTTY}.service" ]]
then
  echo "vtty-frontend is not configured as the default autovt handler"
  exit 1
fi

if [[ $GettyServiceState != 0 && $vTTYServiceState != 0 ]]
then
  echo "Neither the systemd getty handler nor the vtty handler for $CurrentTTY are active."
  exit 1
fi

if [[ $GettyServiceState == 0 && $vTTYServiceState == 0 ]]
then
  if [[ -e /run/vtty/${CurrentTTY}/vttyinhibit ]]
  then
    vTTYServiceState=0
  else
    systemctl stop getty@${CurrentTTY}.service
    GettyServiceState=0
  fi
fi

if [[ -z $1 ]]
then
  Action=toggle
else
  Action=$1
fi

if [[ $Action == force* ]]
then
  ActionType=${Action/force/}
else
  ActionType=$Action
fi



case $ActionType in
  toggle)
    if [[ $GettyServiceState == 0 ]]
    then
      SwitchToVTTYMode
    else
      SwitchToGettyMode
    fi
    ;;
  vtty-on)
    if [[ $vTTYServiceState != 0 ]]
    then
      SwitchToVTTYMode
    else
      echo "vTTY mode already active for $CurrentTTY"
      exit 1
    fi
    ;;
  vtty-off)
    if [[ $GettyServiceState != 0 ]]
    then
      SwitchToGettyMode
    else
      echo "Legacy mode already active for $CurrentTTY"
      exit 1
    fi
    ;;
  *)
    echo "$ActionType is not a valid command"
    PrintHelp
    ;;
esac
