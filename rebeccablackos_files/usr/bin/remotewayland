#! /bin/bash
#    Copyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#This file is for launching wayland programs remotely.

mkdir -p ~/.config/remotewayland/
touch ~/.config/remotewayland/connections.cfg


function ParseHostsCfg()
{
  RemoteConnectionLines=$(cat ~/.config/remotewayland/connections.cfg)

  IFS=$'\n'
  UniqueServersUserLines=($(echo "$RemoteConnectionLines" | awk -F $'\t' '{print $1"\t"$2}' |sort -u))
  unset IFS

  ConnectionCount=0
  RemoteUsers=()
  RemoteHosts=()
  RemoteCommands=()
  for RemoteConnectionLine in "${UniqueServersUserLines[@]}"
  do
    IFS=$'\t'
    RemoteConnection=($RemoteConnectionLine)
    unset IFS

    IFS=$'\n'
    RemoteUsers+=("${RemoteConnection[0]}")
    RemoteHosts+=("${RemoteConnection[1]}")
    unset IFS

    IFS=$'\t'
    RemoteCommands+=($(echo "$RemoteConnectionLines" | awk -v UserName="${RemoteConnection[0]}" -v ServerName="${RemoteConnection[1]}" '{if ($1 == UserName && $2 == ServerName) print $3}'))
    unset IFS

    ((ConnectionCount++))
  done
}


function ChooseConnection()
{
  ConnectionsString=()
  for ((ConnectionItr=0 ; ConnectionItr < $ConnectionCount ; ConnectionItr++))
  {
    if [[ ! -z ${RemoteUsers[$ConnectionItr]} && ! -z ${RemoteHosts[$ConnectionItr]} ]]
    then
      ConnectionsString+=($ConnectionItr)
      ConnectionsString+=("As ${RemoteUsers[$ConnectionItr]} on ${RemoteHosts[$ConnectionItr]}")
      ConnectionsString+=(off)
    fi
  }
  ProposedUser=""
  ProposedHost=""
  ProposedCommand=""
  SelectedConnection=$(dialog --radiolist "Select a Connection" 20 110 20 -1 "New Connection..." on  "${ConnectionsString[@]}" --stdout 2>/dev/tty)
  DialogReturn=$?
  clear
  if [[ $DialogReturn != 0 ]]
  then
    read -p "Selection canceled. Press Enter to close..."
    exit
  fi
  clear
  if [[ $SelectedConnection != -1 ]]
  then
    ProposedUser=${RemoteUsers[$SelectedConnection]}
    ProposedHost=${RemoteHosts[$SelectedConnection]}
  fi


  IFS=$'\n'
  ConnectionParameters=($(dialog  --title " Remote Wayland Launch "  --mixedform "Enter the following options to begin:" 15 100 0  "User Name       : " 1 1 "$ProposedUser" 1 20 90 0 0  "Host Name       :"  2 1   "$ProposedHost"  2 20  90 0 0 --stdout  2>/dev/tty))
  DialogReturn=$?
  unset IFS
  clear

  if [[ ("${ConnectionParameters[0]}" == "") || ("${ConnectionParameters[1]}" == "") || ($DialogReturn != 0) ]]
  then
    read -p "Username, or host name cannot be empty, or selection canceled. Press Enter to close..."
    exit
  fi

  IFS=$'\n'
  PreviousCommands=(${RemoteCommands[$SelectedConnection]})
  unset IFS

  CommandCount=${#PreviousCommands[@]}
  CommandsString=()

  for ((CommandItr=0 ; CommandItr < $CommandCount ; CommandItr++))
  {
    CommandsString+=($CommandItr)
    CommandsString+=("${PreviousCommands[$CommandItr]}")
    CommandsString+=(off)
  }
  SelectedCommand=$(dialog --radiolist "Select a command to run on $ProposedHost as $ProposedUser :" 20 110 20
  -1 "New Command..." on  "${CommandsString[@]}" --stdout 2>/dev/tty)
  DialogReturn=$?
  clear
  if [[ $DialogReturn != 0 ]]
  then
    read -p "Selection canceled. Press Enter to close..."
    exit
  fi

  if [[ $SelectedCommand != -1 ]]
  then
    ProposedCommand=${PreviousCommands[$SelectedCommand]}
  fi
  ConnectionParameters[2]=$(dialog  --title " Remote Wayland Launch "  --mixedform "Enter the following options to begin:" 15 100 0  "Command       : " 1 1 "$ProposedCommand" 1 20 90 0 0 --stdout  2>/dev/tty)
  clear
}

function StartRemoteCommand()
{
  RemoteHost="$1"
  RemoteUser="$2"
  RemoteCommand="$3"

  SessionID=$(date +\%s)
  mkdir -p "$XDG_RUNTIME_DIR/waypipe/clients/$RemoteHost/$RemoteUser"

  PreviousSessions=($(cat "$XDG_RUNTIME_DIR/waypipe/clients/$RemoteHost/$RemoteUser/Sessions"))
  systemd-run --setenv=DISPLAY="$DISPLAY" --setenv=WAYLAND_DISPLAY="$WAYLAND_DISPLAY" --user --unit=waypipeclient-$SessionID waypipe -s "$XDG_RUNTIME_DIR/waypipe/clients/$RemoteHost/$RemoteUser/waypipeclient-$SessionID" client 

  echo $SessionID >> "$XDG_RUNTIME_DIR/waypipe/clients/$RemoteHost/$RemoteUser/Sessions"

  echo "
    mkdir -p "\$XDG_RUNTIME_DIR/waypipe/servers/$HOSTNAME/$LOGNAME"
    mkdir -p "\$XDG_RUNTIME_DIR/waypipe/control/$HOSTNAME/$LOGNAME"
    ln -s "/tmp/waypipeserver-$SessionID" "$XDG_RUNTIME_DIR/waypipe/servers/$HOSTNAME/$LOGNAME/waypipeserver-$SessionID"
    PreviousSessions=(\$(cat "\$XDG_RUNTIME_DIR/waypipe/control/$HOSTNAME/$LOGNAME/Sessions"))
    echo $SessionID >> "\$XDG_RUNTIME_DIR/waypipe/control/$HOSTNAME/$LOGNAME/Sessions"

    systemd-run --user --unit=waypipeserver-$SessionID waypipe --control "$XDG_RUNTIME_DIR/waypipe/control/$HOSTNAME/$LOGNAME/waypipecontrol-$SessionID" -s "$XDG_RUNTIME_DIR/waypipe/servers/$HOSTNAME/$LOGNAME/waypipeserver-$SessionID" server -- $RemoteCommand
    sleep inf
  " | ssh -T -R "/tmp/waypipeserver-$SessionID":"$XDG_RUNTIME_DIR/waypipe/clients/$RemoteHost/$RemoteUser/waypipeclient-$SessionID" -t "$RemoteUser"@"$RemoteHost" -XC

}

if [[ $RemoteWaylandTerminal != 1 ]]
then
  export RemoteWaylandTerminal=1
  konsole -e $0

else
  #Don't get killed by CTRL+C
  trap '' 2

  ParseHostsCfg
  ChooseConnection


  if [[ ("${ConnectionParameters[0]}" != "$ProposedUser") || ("${ConnectionParameters[1]}" != "$ProposedHost") || ("${ConnectionParameters[2]}" != "$ProposedCommand") ]]
  then
    dialog --yesno  "Do you want to save \"${ConnectionParameters[2]}\" as user \"${ConnectionParameters[0]}\" on \"${ConnectionParameters[0]}\"?" 10 90
    if [[ $? == 0 ]]
    then
      echo "${ConnectionParameters[0]}"$'\t'"${ConnectionParameters[1]}"$'\t'"${ConnectionParameters[2]}"$'\t' >> ~/.config/remotewayland/connections.cfg
    fi
    clear
  fi

  StartRemoteCommand "${ConnectionParameters[1]}" "${ConnectionParameters[0]}" "${ConnectionParameters[2]}"

  read -p "Press Enter to close..."
fi


