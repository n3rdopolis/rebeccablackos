#! /bin/bash
#    Copyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


#This script is for configuring multiple seats in Weston. It matches the devices devpath, and the devices serial ID, and sets the ENV{WL_SEAT} and ENV{ID_SEAT} values, or the devices path ID and sets the ENV{ID_SEAT} value in a the udev file /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
#This makes it easier for users to configure multiple pointers and keyboard focuses, as well as multiple sessions.

#Require root privlages
if [[ $UID != 0 ]]
then
  zenity --info --text="Must be run as root." --title="Multipointer and Seat Configuration"
  exit
fi

#Allow Exclamation points to be used in commands by turning off the history
set +H

#Specify the maximum number of seats. This is a more for usability, for specifying how many seats are listed in the zenity dialog. There can be more, but if there are too many, it become a hastle for the user
MaxNumberOfSeats=10

#get the current tty so the script knows what TTY to switch back to
CurrentTTY=$(fgconsole)

#Dont run zenity as root
if [[ ! -z $SUDO_USER ]]
then
  ZENITYCMD="runuser -u $SUDO_USER -m -- zenity"
else
  ZENITYCMD="zenity"
fi


#Initial value of the device filter, where devices that are found, are not listed again
function ResetExcludedDevices
{
  DeviceExcludeString=^$
}



#Command to enumerate device files, used to collect or exclude devices
#It takes 1 argument, the string to exclude
function EnumerateDeviceFiles
{
  find /sys/class/input/input[0-9]* /sys/class/drm/card[0-9]* /sys/class/graphics/fb[0-9]* /sys/class/sound/card[0-9]* ! -path "*-*" | grep -Ev $1
}

#Get all devices attached at this point, and add them to DeviceExcludeString
function GetExcludeCurrentDevices
{
  ProposeDeviceExcludeString=^$
  while read -r Device
  do
    ProposeDeviceExcludeString+=\|$Device
  done < <(EnumerateDeviceFiles ^$)
  if [[ $FirstLoop == 1 ]]
  then
    FirstLoop=0
    FirstProposeDeviceExcludeString=$ProposeDeviceExcludeString
  fi
}

#Collect all non-excluded device info
function CollectDeviceInfo
{
  NumberOfDevices=0
  DeviceList=""
  unset DevicePaths
  unset DeviceDisplayNames
  unset DeviceNames
  unset DeviceConnections
  unset DeviceSessionSeatIDs
  unset DeviceWLSeatIDs
  unset DeviceTypes
  unset DeviceInputTypeFlags
  #Get all input devices from udev, and store attributes into an array
  while read -r Device
  do
    NewDevicesFound=1
    DeviceExcludeString+=\|$Device
    #Handle the display of the device type to the user. Some devices report themselves as multiple types such as a transciver that multiple wireless devices can register with, will appear as "Mouse / Keyboard"
    unset DeviceType

    #get properties of the device
    DeviceProperties=$(udevadm info --query=property  --path=$Device)
    IFS=$'\n'
    DeviceProperties=($DeviceProperties)
    unset IFS

    unset DEV_ID_SEAT DEV_WL_SEAT DEV_ID_INPUT DEV_ID_INPUT_MOUSE DEV_ID_INPUT_TOUCHSCREEN DEV_ID_INPUT_TOUCHPAD DEV_ID_INPUT_KEYBOARD DEV_DEVPATH DEV_ID_SERIAL DEV_ID_PATH DEV_DEVNAME DEV_SUBSYSTEM
    for DeviceProperty in ${DeviceProperties[@]}
    do
      IFS="="
      DeviceProperty=($DeviceProperty)
      unset IFS
      case ${DeviceProperty[0]} in
        ID_SEAT)
          DEV_ID_SEAT=${DeviceProperty[1]}
          ;;
        WL_SEAT)
          DEV_WL_SEAT=${DeviceProperty[1]}
          ;;
        ID_INPUT)
          DEV_ID_INPUT=${DeviceProperty[1]}
          ;;
        ID_INPUT_MOUSE)
          DEV_ID_INPUT_MOUSE=${DeviceProperty[1]}
          ;;
        ID_INPUT_TOUCHSCREEN)
          DEV_ID_INPUT_TOUCHSCREEN=${DeviceProperty[1]}
          ;;
        ID_INPUT_TOUCHPAD)
          DEV_ID_INPUT_TOUCHPAD=${DeviceProperty[1]}
          ;;
        ID_INPUT_KEYBOARD)
          DEV_ID_INPUT_KEYBOARD=${DeviceProperty[1]}
          ;;
        DEVPATH)
          DEV_DEVPATH=${DeviceProperty[1]}
          ;;
        ID_FOR_SEAT)
          DEV_ID_FOR_SEAT=${DeviceProperty[1]}
          ;;
        ID_SERIAL)
          DEV_ID_SERIAL=${DeviceProperty[1]}
          ;;
        ID_PATH)
          DEV_ID_PATH=${DeviceProperty[1]}
          ;;
        DEVNAME)
          DEV_DEVNAME=${DeviceProperty[1]}
          ;;
        SUBSYSTEM)
          DEV_SUBSYSTEM=${DeviceProperty[1]}
          ;;
      esac
    done

    DeviceSessionSeatID=$DEV_ID_SEAT
    DeviceWLSeatID=$DEV_WL_SEAT
    IsDeviceInput=$DEV_ID_INPUT
    IsDeviceMouse=$DEV_ID_INPUT_MOUSE
    IsDeviceTouchscreen=$DEV_ID_INPUT_TOUCHSCREEN
    IsDeviceTouchpad=$DEV_ID_INPUT_TOUCHPAD
    IsDeviceKeyboard=$DEV_ID_INPUT_KEYBOARD
    if [[ $IsDeviceInput == 1 ]]
    then
      IsDeviceInput=1
      DeviceConnection=$DEV_ID_PATH
      DeviceName=$DEV_ID_SERIAL
      DeviceDisplayName=$(udevadm info -q all --attribute-walk --path=$Device | sed -re '/=/!d' -e "s/^ *([a-zA-Z0-9])/\1/g" -e 's/==/=/g' -e 's/"//g' | awk -F ' *= *' '$1 == "ATTRS{name}" {print $0}' | cut -d = -f2- | tail -1 | sed 's/[^0-9a-zA-Z_ -]*//g')
    else
      IsDeviceInput=0
      DeviceConnection=$(echo $DEV_ID_FOR_SEAT |sed -e 's/^drm//g' -e 's/^graphics//g')
      DeviceName=$DEV_DEVNAME
      DeviceSubsystem=$DEV_SUBSYSTEM
      if [[ $DeviceSubsystem == "drm" ]]
      then
        DeviceType="KMS Graphics Card"
      fi
      if [[ $DeviceSubsystem == "graphics" ]]
      then
        DeviceType="Frame Buffer"
      fi
      if [[ $DeviceSubsystem == "sound" ]]
      then
        DeviceType="Sound Card"
      fi
      DeviceDisplayName=$(udevadm info -q all --attribute-walk --path=$Device | sed -re '/=/!d' -e "s/^ *([a-zA-Z0-9])/\1/g" -e 's/==/=/g' -e 's/"//g' | awk -F ' *= *' '$1 == "DRIVERS" {print $0}' | cut -d = -f2- | head -1 | sed 's/[^0-9a-zA-Z_ -]*//g')
      DeviceDisplayName+=" $Device"
    fi
    #if the device doesn't have a serial ID, which usually tells the make and model, then display it as 'generic' to the user
    if [[ -z $DeviceDisplayName ]]
    then
      DeviceDisplayName=$(echo $DeviceName| sed 's/[^0-9a-zA-Z_ -]*//g')
      if [[ $DeviceDisplayName == "noserial" ]]
      then
        DeviceDisplayName="Generic"
      fi
    fi

    #if the device has no configured WL_SEAT value, then weston sees it as it being under the default seat
    if [[ -z $DeviceWLSeatID ]]
    then
      DeviceWLSeatID="default"
    fi

    #if the device has no configured ID_SEAT value, then udev sees it as it being under the seat0 seat
    if [[ -z $DeviceSessionSeatID ]]
    then
      DeviceSessionSeatID="seat0"
    fi

    #if the device is reported as a mouse, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceMouse ]]
    then
      IsDeviceMouse=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
      DeviceType+="Mouse"
    fi

    #if the device is reported as a touchscreen, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceTouchscreen ]]
    then
      IsDeviceTouchscreen=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
    DeviceType+="Touchscreen"
    fi

    #if the device is reported as a touchpad (as in a laptop touchpad), then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceTouchpad ]]
    then
      IsDeviceTouchpad=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
    DeviceType+="Touchpad"
    fi

    #if the device is reported as a keyboard, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceKeyboard ]]
    then
      IsDeviceKeyboard=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
    DeviceType+="Keyboard"
    fi

    #if DeviceType exits, then add to the arrays. DeviceType only exists if the device is an input device, or graphics device. All other devices reported by udev, it will be empty and ignored. These devices are the only ones that concern weston multiseat, or udev multiseat.
    DeviceConnectionDuplicate=0
    for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=NumberOfDevices; CurrentDeviceNumber++ ))
    do
      DeviceDuplicateTest=${DeviceConnections[$CurrentDeviceNumber]}
      if [[ $DeviceDuplicateTest == $DeviceConnection ]]
      then
        DeviceConnectionDuplicate=1
        if [[ $IsDeviceInput == 0 ]]
        then
          DeviceTypes[$CurrentDeviceNumber]+="/$DeviceType"
          DeviceDisplayNames[$CurrentDeviceNumber]+=", $Device"
        fi
      fi
    done
    if [[ ! -z $DeviceType && $DeviceConnectionDuplicate == 0 ]]
    then
      ((NumberOfDevices++))
      DevicePaths[$NumberOfDevices]=$Device
      DeviceDisplayNames[$NumberOfDevices]=$DeviceDisplayName
      DeviceNames[$NumberOfDevices]=$DeviceName
      DeviceConnections[$NumberOfDevices]=$DeviceConnection
      DeviceSessionSeatIDs[$NumberOfDevices]=$DeviceSessionSeatID
      DeviceWLSeatIDs[$NumberOfDevices]=$DeviceWLSeatID
      DeviceTypes[$NumberOfDevices]=$DeviceType
      DeviceInputTypeFlags[$NumberOfDevices]=$IsDeviceInput
     fi

  done < <(EnumerateDeviceFiles $DeviceExcludeString)

  #Get a list of all devices for the main form
  for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=NumberOfDevices; CurrentDeviceNumber++ ))
  do
    if [[ ${DeviceInputTypeFlags[$CurrentDeviceNumber]} == 1 ]]
    then
      DeviceList+="$CurrentDeviceNumber:     ${DeviceTypes[$CurrentDeviceNumber]}      ${DeviceDisplayNames[$CurrentDeviceNumber]}      (Connected to: ${DeviceConnections[$CurrentDeviceNumber]})     ${DeviceSessionSeatIDs[$CurrentDeviceNumber]} / ${DeviceWLSeatIDs[$CurrentDeviceNumber]}"
    else
      DeviceList+="$CurrentDeviceNumber:     ${DeviceTypes[$CurrentDeviceNumber]}      ${DeviceDisplayNames[$CurrentDeviceNumber]}      (Connected to: ${DeviceConnections[$CurrentDeviceNumber]})     ${DeviceSessionSeatIDs[$CurrentDeviceNumber]}"
    fi
    DeviceList+=$'\n'
  done
}



function ModifyConfig
{
  #Create the config file
  touch /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules

  #Generate a list of wayland seats for the Zenity dialogs for selection
  unset WLSeatList
  WLSeatList="default"
  for (( CurrentSeat=1; CurrentSeat<MaxNumberOfSeats; CurrentSeat++ ))
  do
    WLSeatList+="|"
    WLSeatList+="seat$CurrentSeat"
  done

  #Generate a list of session seats for the Zenity dialogs for selection
  unset SessionSeatArray

  SessionSeatArray=($(loginctl list-seats --no-legend | sort))
  for (( CurrentSeat=1; CurrentSeat<MaxNumberOfSeats; CurrentSeat++ ))
  do
    IncludeSeat=1
    for SessionSeat in "${SessionSeatArray[@]}"
    do
      if [[ "seat$CurrentSeat" == $SessionSeat ]]
      then
        IncludeSeat=0
        break
      fi
    done
    if [[ $IncludeSeat == 1 ]]
    then
      SessionSeatArray+=("seat$CurrentSeat")
    fi
  done
  IFS="|"
  SessionSeatList=${SessionSeatArray[*]}
  unset IFS


  #Go through each probed input device and prompt for a the seata to add the device to
  for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=NumberOfDevices; CurrentDeviceNumber++ ))
  do
    unset NewWLSeatNumber
    unset NewSessionSeatNumber
    if [[ $CurrentDeviceNumber == 1 ]]
    then
      sleep 1
    fi
    if [[ ${DeviceInputTypeFlags[$CurrentDeviceNumber]} == 1 ]]
    then
      NewSeatSelection=$($ZENITYCMD  --forms --add-combo "Session Seat" --combo-values="$SessionSeatList" --add-combo "Wayland Seat/Pointer" --combo-values="$WLSeatList" --text="Multipointer and Seat Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)

      Select a seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]}
      Connected to: ${DeviceConnections[$CurrentDeviceNumber]}

      Current Session Seat: ${DeviceSessionSeatIDs[CurrentDeviceNumber]}
      Current Wayland Seat/Pointer: ${DeviceWLSeatIDs[CurrentDeviceNumber]}" --separator="@" --title "Multipointer and Seat Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)" 2>/dev/null)
      ZenityResult=$?
    else
      NewSeatSelection=$($ZENITYCMD --forms --add-combo "Session Seat" --combo-values="$SessionSeatList" --text="Multipointer and Seat Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)

      Select a seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]}
      Connected to: ${DeviceConnections[$CurrentDeviceNumber]}

      Current Session Seat: ${DeviceSessionSeatIDs[CurrentDeviceNumber]}" --separator="@" --title "Multipointer and Seat Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)" 2>/dev/null)
      ZenityResult=$?
    fi
    if [[ $ZenityResult != 0 ]]
    then
      exit 1
    fi
    IFS="@"
    NewSeatSelection=($NewSeatSelection)
    unset IFS
    NewSessionSeatNumber=(${NewSeatSelection[0]})
    NewWLSeatNumber=(${NewSeatSelection[1]})

    #only change the seat id in udev if the user specified to do so
    if [[ ! -z ${NewSeatSelection[0]} || ! -z ${NewSeatSelection[1]} ]]
    then
      if [[ -z $NewWLSeatNumber ]]
      then
        NewWLSeatNumber="${DeviceWLSeatIDs[CurrentDeviceNumber]}"
      fi
      if [[ -z $NewSessionSeatNumber ]]
      then
        NewSessionSeatNumber="${DeviceSessionSeatIDs[CurrentDeviceNumber]}"
      fi

      cat /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules > /tmp/72-weston_seats_and_udev_seats.rules.work
      if [[ ${DeviceInputTypeFlags[$CurrentDeviceNumber]} == 1 ]]
      then
        if [[ ! -z ${DeviceNames[$CurrentDeviceNumber]} && ! -z ${DeviceConnections[$CurrentDeviceNumber]} ]]
        then
          awk "!/\"${DeviceNames[$CurrentDeviceNumber]//\//\\/}\"/ || !/\"${DeviceConnections[$CurrentDeviceNumber]//\//\\/}\"/" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
        else
          if [[ ! -z ${DeviceNames[$CurrentDeviceNumber]} ]]
          then
            awk "!/${DeviceNames[$CurrentDeviceNumber]}//\//\\/}//" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
          fi
          if [[ ! -z ${DeviceConnections[$CurrentDeviceNumber]} ]]
          then
            awk "!/${DeviceConnections[$CurrentDeviceNumber]//\//\\/}/" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
          fi
        fi
        echo "ENV{ID_SERIAL}==\"${DeviceNames[$CurrentDeviceNumber]}\", ENV{ID_PATH}==\"${DeviceConnections[$CurrentDeviceNumber]}\", ENV{ID_SEAT}=\"$NewSessionSeatNumber\", ENV{WL_SEAT}=\"$NewWLSeatNumber\"" >> /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
      else
        if [[ ! -z ${DeviceConnections[$CurrentDeviceNumber]} ]]
        then
          awk "!/\"\*${DeviceConnections[$CurrentDeviceNumber]//\//\\/}\"/" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
        fi
        echo "TAG==\"seat\", ENV{ID_FOR_SEAT}==\"*${DeviceConnections[$CurrentDeviceNumber]}\", ENV{ID_SEAT}=\"$NewSessionSeatNumber\"" >> /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
      fi
      rm /tmp/72-weston_seats_and_udev_seats.rules.work
    fi
    sleep .3
    echo $(($CurrentDeviceNumber*100/$NumberOfDevices))
  done | $ZENITYCMD --no-cancel --auto-close --percentage=0 --progress --text "The changes made here will impact all users, as well as the login greeter. 
Multipointer is not supported by all Wayland desktops like it is on Weston. 

This will allow pointers and seats to be associated with devices.
   -  Session 'Seats' are a grouping of a graphics device, and input devices for side-by-side user sessions
      on one physical computer.

   -  Wayland 'Seats' are what belong to a separate mouse cursor and keyboard focus, but within one session
        There can be multiple Wayland Seats per Session Seat. This is what enables Multipointer.

Input are remembered by:
   1. The device's internal name, usually containing the make and model.
   2. The port they are plugged into.

In order for the configuration to work each time you plug your devices,  you need to plug them into the same port, 
(otherwise they will default to the default seats)

If you wish to return one to the default, The default seat for Session seats is 'seat0', and the default Seat 
for Wayland pointers is 'default', 

Please note that some devices have multiple internal components, and sometimes appear as 'different' devices

Devices:
        Device Type,      Device Name      Device Connection,      Session Seat, Wayland Seat
$DeviceList 

Device Progress:
" --title="Multipointer and Seat Configuration" --height=100 --width=900 2>/dev/null



  if [[ ${PIPESTATUS[0]} != 0 ]]
  then
    ConfigAborted=1
    DeviceExcludeString=$FirstProposeDeviceExcludeString
    $ZENITYCMD --title="Multipointer and Seat Configuration" --info --text "Configuration aborted" 2>/dev/null
    return
  fi
}

function CommitChanges
{
  if [[ $ConfigAborted == 1 ]]
  then
    return
  fi
  #tell the user that their session is going to 'flicker' as the tty is switched in and out so that the display server is forced to see the new Udev config (this works for weston)
  $ZENITYCMD --info --text "Seat Configuration for all devices is now complete.

Press OK to apply all the changes. This will switch user to the loginmanager display.
This is to signal the display server to detect the new changes, and the waylandloginmanager to detect new seats.

Your sessions will not be terminated, but they will need to be switched back into with Switch User" --no-wrap --title="Multipointer and Seat Configuration" 2>/dev/null

  #Reload the new configuration into udev
  udevadm control --reload-rules


  #Notify each input device about the change with udev, instead of doing a full trigger on all devices on the system
  for (( Itr=1; Itr<5; Itr++ ))
  do
    udevadm trigger --subsystem-match=input
    udevadm trigger --subsystem-match=drm
    udevadm trigger --subsystem-match=graphics
    udevadm trigger --subsystem-match=sound
    sleep 1
  done

  #If the Wayland server is hosted 
  if [[ ! -z $WAYLAND_HOST ]]
  then
    WAYLAND_SERVER=$WAYLAND_HOST
  else
    WAYLAND_SERVER=$WAYLAND_DISPLAY
  fi

  #Force the server to pickup the changes
  waylandloginmanager --sendcommand DetectSeats
  sleep 1
  RunningSeats=($(loginctl --no-legend list-seats 2>/dev/null | sort))
  for RunningSeat in ${RunningSeats[@]}
  do
    if [[ $RunningSeat == $XDG_SEAT ]]
    then
      waylandloginmanager --sendcommand Switch $RunningSeat
    else
      waylandloginmanager --sendcommand Change $RunningSeat
    fi
  done
}

function HelpDialog
{
echo "
INTRODUCTION
============

What is a seat? 
---------------
A seat is a combination of devices on a computer that belong 
to 1 user. Most computers have 1 seat each. However this
wizard allows multiple seats to be configured.

What is a Session Seat?
-----------------------
A session seat is a group of hardware, needing a different 
video card each to work, along with input devices, such as a 
keyboard or mouse.These devices belong to different sessions,
allowing each user to have independant control over their own
session each. If such a configuration was set up in a manor
that the cables and computer were well hidden such a setup
could appear to the unwitting eye as two (or more) computers,
where all seats are really being run on one.

A USB graphics card is usually suitable for the multiple
graphics card requirement, as long as the driver is supported.

What is a Wayland Seat?
-----------------------
A wayland seat is a group of hardware within a session seat 
that are shared within a session, to where, when supported by
a  given desktop environment, allows there to be multiple
pointers on one session, along with their keyboards and mice. 
This type of configuration allows for better collaboration,
with two users sharing a session. It is also possible to 
have session seats, with multiple wayland seats, to where each
independant session also has multiple pointers.

A special graphics configuration for wayland seats/pointers is not needed.

ABOUT THIS UTILITY
==================
This utility simplifies the configuration of the seats. 
Typically one could edit the configuration by editing udev
config files manually. This utility assists in creating 
and editing all seat config, and storing it in the file
/etc/udev/rules.d/72-weston_seats_and_udev_seats

Devices, and their configured seat values are stored by 
the name that the device presents itself as (if availible)
and the connection.

This utility handles the configuration for input devices
and for video and sound cards

Input Devices can be assignged to session seats, and 
wayland seats, identified in the config by their
ID_SERIAL and ID_PATH properties

Output devices (like video and sound cards) can only be
assigned to session seats, identified by their ID_FOR_SEAT
propeties.


USING THIS UTILITY
==================
This utility has 3 different ways to select how the wizard 
goes through all devices. However the wizard is similar for
all 3. It bests tries to describe the current device, and 
prompts the session and wayland seat the device should belong
to. Leaving a feild blank accepts the current seats the device
is assigned to.

DEVICE LISTING METHODS
======================
The three methods for enumerating devices are

Configure All Devices
---------------------
This lists all devices that are attached when this option is 
selected. Most users will likely use this one.

Configure Newly Attached Devices
--------------------------------
This only lists devices attached after the wizard was started,
and from before this option is selected and confirmed. It is best
for if a large number of devices is already configured, and only
one new device needs to be added.

Configure Sets of Devices As They Are Connected
-------------------------
This is similar to the prior method, it prompts if it is desired to 
change the seat association for devices attached before the 
wizard was started or not, and then it prompts to attach devices
scanning for new ones each time.
This is best for setting up a computer with a large number of 
seats, and a large number of similar devices. One could use this
to say attach a USB hub with a mouse, keyboard, USB video card
configure it for a seat. 
Then attach a second USB hub with a similar mouse, keyboard, USB
video card, where the devices would otherwise appear to be very
similar in the listing when doing them all at once.

"|$ZENITYCMD --text-info --font=mono --width=550 --height=600 2>/dev/null
}

function MainDialog
{
SelectedOption=$(echo "1
Configure All Devices
2
Configure Newly Attached Devices
3
Configure Sets of Devices As They Are Connected
4
Show Detailed Help
5
Quit"| $ZENITYCMD --height 580 --list --hide-column 1 --print-column 1 --column=selectionnumber --column=option --hide-header --title="Multipointer and Seat Configuration" --text "Select device configuration mode.

'Configure All Devices' lists all devices currently attached to be configured.
      If all the desired devices are currently attached, and there are not configured at all for any seat layouts yet, this option is likely desired.

'Configure Newly Attached Devices' prompts when to plug in new devices, then only runs the config for devices plugged in after the wizard starts.
     This option is best for adding a few newly attached devices, when there are already devices configured for seat layouts.

'Configure Sets of Devices As They Are Connected' works similar to 'Configure Newly Attached Devices', with the addition that it prompts for new devices until this wizard is closed.
     This option is best for adding large amounts of similar devices, for many seats.
     Devices can be incrementally added, so that they are not mixed up among each other.

'Show Detailed Help' shows more details on how to use this wizard

'Quit' Exits this wizard
" 2>/dev/null)
}

FirstLoop=1
#Main wizard dialog
while [ 1 ]
do
  NewDevicesFound=0
  ConfigAborted=0
  GetExcludeCurrentDevices
  MainDialog
  if [[ $SelectedOption == 1 ]]
  then
    ResetExcludedDevices
    CollectDeviceInfo
    ModifyConfig
    CommitChanges
  elif [[ $SelectedOption == 2 ]]
  then
    DeviceExcludeString=$ProposeDeviceExcludeString
    CollectDeviceInfo
    if [[ $NewDevicesFound == 0 ]]
    then
      $ZENITYCMD --info --text "No new devices were detected/plugged in" --no-wrap --title="Multipointer and Seat Configuration" 2>/dev/null
    else
      ModifyConfig
      CommitChanges
    fi
  elif [[ $SelectedOption == 3 ]]
  then
    $ZENITYCMD --question --text "Include devices that have already been connected before this wizard started?" --no-wrap --title="Multipointer and Seat Configuration" 2>/dev/null
    ZENITYANSWER=$?
    if [[ $ZENITYANSWER == 1 ]]
    then
      DeviceExcludeString=$ProposeDeviceExcludeString
    else
      ResetExcludedDevices
    fi
    while [ 1 ]
    do
      CollectDeviceInfo
      if [[ $NumberOfDevices == 0 ]]
      then
        $ZENITYCMD --info --text "No new devices were detected/plugged in" --no-wrap --title="Multipointer and Seat Configuration" 2>/dev/null
      else
        ModifyConfig
      fi
      if [[ $ConfigAborted == 1 ]]
      then
        break
      fi
      $ZENITYCMD --question --text "Add more devices to configure? If so, plug them in now, and select 'yes'" --no-wrap --title="Multipointer and Seat Configuration" 2>/dev/null
      ZENITYANSWER=$?
      if [[ $ZENITYANSWER == 1 ]]
      then
       if [[ $NewDevicesFound == 1 ]]
       then
         CommitChanges
       fi
       break
      fi
    done
  elif [[ $SelectedOption == 4 ]]
  then
    HelpDialog
  else
    exit
  fi
done



#chvt 63
#sleep .1
#chvt $CurrentTTY
