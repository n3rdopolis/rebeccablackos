#! /bin/bash
#    Copyright (c) 2012 - 2022 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


#This script is for configuring multiple seats in Weston. It matches the devices devpath, and the devices serial ID, and sets the ENV{WL_SEAT} and ENV{ID_SEAT} values, or the devices path ID and sets the ENV{ID_SEAT} value in a the udev file /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
#This makes it easier for users to configure multiple pointers and keyboard focuses, as well as multiple sessions.

#Require root privlages
if [[ $UID != 0 ]]
then
  zenity --info --text="Must be run as root." --title="Multipointer and Seat Configuration"
  exit
fi

#Allow Exclamation points to be used in commands by turning off the history
set +H

#Specify the maximum number of seats. This is a more for usability, for specifying how many seats are listed in the zenity dialog. There can be more, but if there are too many, it become a hastle for the user
MaxNumberOfSeats=10

#get the current session ID and seat id
export XDG_SESSION_ID=$(busctl get-property org.freedesktop.login1 /org/freedesktop/login1/session/auto org.freedesktop.login1.Session Id | awk -F \" '{print $2}')
export XDG_SEAT=$(busctl get-property org.freedesktop.login1 /org/freedesktop/login1/session/auto org.freedesktop.login1.Session Seat | awk -F \" '{print $2}')

#Dont run zenity as root
if [[ ! -z $SUDO_USER ]]
then
  ZENITYCMD="runuser -u "$SUDO_USER" -m -- zenity"
else
  ZENITYCMD="zenity"
fi

#Function that prepares the list of seats for the dropdown menus
#It takes no arguments
function PrepareSeatList
{
  #Generate a list of wayland seats for the Zenity dialogs for selection
  unset WLSeatList
  WLSeatList="default"
  for (( SeatIterator=1; SeatIterator<MaxNumberOfSeats; SeatIterator++ ))
  do
    WLSeatList+="|"
    WLSeatList+="seat$SeatIterator"
  done

  #Generate a list of session seats for the Zenity dialogs for selection
  unset SessionSeatArray

  SessionSeatArray=($(loginctl list-seats --no-legend | grep -v seat-vtty | sort))
  for (( SeatIterator=1; SeatIterator<MaxNumberOfSeats; SeatIterator++ ))
  do
    IncludeSeat=1
    for SessionSeat in "${SessionSeatArray[@]}"
    do
      if [[ "seat$SeatIterator" == $SessionSeat ]]
      then
        IncludeSeat=0
        break
      fi
    done
    if [[ $IncludeSeat == 1 ]]
    then
      SessionSeatArray+=("seat$SeatIterator")
    fi
  done
  unset SessionSeatList
  FirstSessionSeat=1
  for SeatElement in "${SessionSeatArray[@]}"
  do
    if [[ $FirstSessionSeat != 1 ]]
    then
      SessionSeatList+="|"
    fi
    SessionSeatList+=$SeatElement
    FirstSessionSeat=0
  done
}


#Command to enumerate device files
function EnumerateDeviceFiles
{
  find /sys/class/input/input[0-9]* /sys/class/drm/card[0-9]* /sys/class/sound/card[0-9]* ! -path "*-*" 
}

#Collect all device info
function CollectDeviceInfo
{
  NumberOfDevices=0
  unset DevicePaths
  unset DeviceDisplayNames
  unset DeviceNames
  unset DeviceConnections
  unset DeviceCurrentSessionSeatIDs
  unset DeviceCurrentWLSeatIDs
  unset DeviceTypes
  unset DeviceInputTypeFlags
  unset DeviceConnectTimestamps

  unset DeviceNewSessionSeatIDs
  unset DeviceNewWLSeatIDs
  unset DeviceNewSeatConfigChangeds
  #Get all input devices from udev, and store attributes into an array
  while read -r Device
  do
    NewDevicesFound=1
    #Handle the display of the device type to the user. Some devices report themselves as multiple types such as a transciver that multiple wireless devices can register with, will appear as "Mouse / Keyboard"
    unset DeviceType

    #get properties of the device
    DeviceProperties=$(udevadm info --query=property  --path=$Device)
    IFS=$'\n'
    DeviceProperties=($DeviceProperties)
    unset IFS

    unset DEV_ID_SEAT DEV_WL_SEAT DEV_ID_INPUT DEV_ID_INPUT_MOUSE DEV_ID_INPUT_TOUCHSCREEN DEV_ID_INPUT_TOUCHPAD DEV_ID_INPUT_KEYBOARD DEV_DEVPATH DEV_ID_SERIAL DEV_ID_PATH DEV_DEVNAME DEV_SUBSYSTEM DEV_USEC_INITIALIZED
    for DeviceProperty in ${DeviceProperties[@]}
    do
      IFS="="
      DeviceProperty=($DeviceProperty)
      unset IFS
      case ${DeviceProperty[0]} in
        ID_SEAT)
          DEV_ID_SEAT=${DeviceProperty[1]}
          ;;
        WL_SEAT)
          DEV_WL_SEAT=${DeviceProperty[1]}
          ;;
        ID_INPUT)
          DEV_ID_INPUT=${DeviceProperty[1]}
          ;;
        ID_INPUT_MOUSE)
          DEV_ID_INPUT_MOUSE=${DeviceProperty[1]}
          ;;
        ID_INPUT_TOUCHSCREEN)
          DEV_ID_INPUT_TOUCHSCREEN=${DeviceProperty[1]}
          ;;
        ID_INPUT_TOUCHPAD)
          DEV_ID_INPUT_TOUCHPAD=${DeviceProperty[1]}
          ;;
        ID_INPUT_KEYBOARD)
          DEV_ID_INPUT_KEYBOARD=${DeviceProperty[1]}
          ;;
        DEVPATH)
          DEV_DEVPATH=${DeviceProperty[1]}
          ;;
        ID_FOR_SEAT)
          DEV_ID_FOR_SEAT=${DeviceProperty[1]}
          ;;
        ID_SERIAL)
          DEV_ID_SERIAL=${DeviceProperty[1]}
          ;;
        ID_PATH)
          DEV_ID_PATH=${DeviceProperty[1]}
          ;;
        DEVNAME)
          DEV_DEVNAME=${DeviceProperty[1]}
          ;;
        SUBSYSTEM)
          DEV_SUBSYSTEM=${DeviceProperty[1]}
          ;;
        USEC_INITIALIZED)
          DEV_USEC_INITIALIZED=${DeviceProperty[1]}
          ;;
      esac
    done

    DeviceSessionSeatID=$DEV_ID_SEAT
    DeviceWLSeatID=$DEV_WL_SEAT
    IsDeviceInput=$DEV_ID_INPUT
    IsDeviceMouse=$DEV_ID_INPUT_MOUSE
    IsDeviceTouchscreen=$DEV_ID_INPUT_TOUCHSCREEN
    IsDeviceTouchpad=$DEV_ID_INPUT_TOUCHPAD
    IsDeviceKeyboard=$DEV_ID_INPUT_KEYBOARD
    if [[ $IsDeviceInput == 1 ]]
    then
      IsDeviceInput=1
      DeviceConnection=$DEV_ID_PATH
      DeviceName=$DEV_ID_SERIAL
      DeviceDisplayName=$(udevadm info -q all --attribute-walk --path=$Device | sed -re '/=/!d' -e "s/^ *([a-zA-Z0-9])/\1/g" -e 's/==/=/g' -e 's/"//g' | awk -F ' *= *' '$1 == "ATTRS{name}" {print $0}' | cut -d = -f2- | tail -1 | sed 's/[^0-9a-zA-Z_ -]*//g')
    else
      IsDeviceInput=0
      DeviceConnection=$(echo $DEV_ID_FOR_SEAT |sed -e 's/^drm//g' -e 's/^graphics//g')
      DeviceName=$DEV_DEVNAME
      DeviceSubsystem=$DEV_SUBSYSTEM
      if [[ $DeviceSubsystem == "drm" ]]
      then
        DeviceType="KMS Graphics Card"
      fi
      if [[ $DeviceSubsystem == "graphics" ]]
      then
        DeviceType="Frame Buffer"
      fi
      if [[ $DeviceSubsystem == "sound" ]]
      then
        DeviceType="Sound Card"
      fi
      DeviceDisplayName=$(udevadm info -q all --attribute-walk --path=$Device | sed -re '/=/!d' -e "s/^ *([a-zA-Z0-9])/\1/g" -e 's/==/=/g' -e 's/"//g' | awk -F ' *= *' '$1 == "DRIVERS" {print $0}' | cut -d = -f2- | head -1 | sed 's/[^0-9a-zA-Z_ -]*//g')
      DeviceDisplayName+=" $Device"
    fi
    #if the device doesn't have a serial ID, which usually tells the make and model, then display it as 'generic' to the user
    if [[ -z $DeviceDisplayName ]]
    then
      DeviceDisplayName=$(echo $DeviceName| sed 's/[^0-9a-zA-Z_ -]*//g')
      if [[ $DeviceDisplayName == "noserial" ]]
      then
        DeviceDisplayName="Generic"
      fi
    fi

    #if the device has no configured WL_SEAT value, then weston sees it as it being under the default seat
    if [[ -z $DeviceWLSeatID ]]
    then
      DeviceWLSeatID="default"
    fi

    #if the device has no configured ID_SEAT value, then udev sees it as it being under the seat0 seat
    if [[ -z $DeviceSessionSeatID ]]
    then
      DeviceSessionSeatID="seat0"
    fi

    #if the device is reported as a mouse, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceMouse ]]
    then
      IsDeviceMouse=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
      DeviceType+="Mouse"
    fi

    #if the device is reported as a touchscreen, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceTouchscreen ]]
    then
      IsDeviceTouchscreen=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
    DeviceType+="Touchscreen"
    fi

    #if the device is reported as a touchpad (as in a laptop touchpad), then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceTouchpad ]]
    then
      IsDeviceTouchpad=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
    DeviceType+="Touchpad"
    fi

    #if the device is reported as a keyboard, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
    if [[ -z $IsDeviceKeyboard ]]
    then
      IsDeviceKeyboard=0
    else
      if [[ ! -z $DeviceType ]]
      then
        DeviceType+=" / "
      fi
    DeviceType+="Keyboard"
    fi

    #if DeviceType exits, then add to the arrays. DeviceType only exists if the device is an input device, or graphics device. All other devices reported by udev, it will be empty and ignored. These devices are the only ones that concern weston multiseat, or udev multiseat.
    DeviceConnectionDuplicate=0
    for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=NumberOfDevices; CurrentDeviceNumber++ ))
    do
      DeviceDuplicateTest=${DeviceConnections[$CurrentDeviceNumber]}
      if [[ $DeviceDuplicateTest == $DeviceConnection ]]
      then
        DeviceConnectionDuplicate=1
        if [[ $IsDeviceInput == 0 ]]
        then
          DeviceTypes[$CurrentDeviceNumber]+="/$DeviceType"
          DeviceDisplayNames[$CurrentDeviceNumber]+=", $Device"
        fi
      fi
    done
    if [[ ! -z $DeviceType && $DeviceConnectionDuplicate == 0 ]]
    then
      ((NumberOfDevices++))
      DevicePaths[$NumberOfDevices]=$Device
      DeviceDisplayNames[$NumberOfDevices]=$DeviceDisplayName
      DeviceNames[$NumberOfDevices]=$DeviceName
      DeviceConnections[$NumberOfDevices]=$DeviceConnection
      DeviceCurrentSessionSeatIDs[$NumberOfDevices]=$DeviceSessionSeatID
      DeviceCurrentWLSeatIDs[$NumberOfDevices]=$DeviceWLSeatID
      DeviceTypes[$NumberOfDevices]=$DeviceType
      DeviceInputTypeFlags[$NumberOfDevices]=$IsDeviceInput
      DeviceConnectTimestamps[$NumberOfDevices]=$DEV_USEC_INITIALIZED

      DeviceNewSessionSeatIDs[$NumberOfDevices]=$DeviceSessionSeatID
      DeviceNewWLSeatIDs[$NumberOfDevices]=$DeviceWLSeatID
      DeviceNewSeatConfigChangeds[$NumberOfDevices]=0
     fi

  done < <(EnumerateDeviceFiles)
}

#Present a list of devices to select to associate to desired seats
function DeviceSelection
{
  DeviceSortArrayString=""
  for (( DeviceIterator=1; DeviceIterator <= $NumberOfDevices; DeviceIterator++ ))
  do
    if [[ $DeviceIterator != 1 ]]
    then
      DeviceSortArrayString+=$'\n'
    fi
    DeviceSortArrayString+="$DeviceIterator,${DeviceConnectTimestamps[$DeviceIterator]}"
  done
  DeviceSortArrayIndex=($(echo "$DeviceSortArrayString" | sort -t "," -k 2,2 | awk -F "," '{print $1}'))


  DeviceSelectionString=""
  DeviceIterator=0
  DeviceConnectionOrder=$NumberOfDevices
  for DeviceElementNumber in "${DeviceSortArrayIndex[@]}"
  do
    ((DeviceIterator++))
    if [[ $DeviceIterator != 1 ]]
    then
      DeviceSelectionString+=$'\n'
    fi

    DeviceSelectionString+=$DeviceIterator$'\n'
    DeviceSelectionString+=${DeviceTypes[$DeviceElementNumber]}$'\n'
    DeviceSelectionString+=${DeviceNames[$DeviceElementNumber]}$'\n'
    DeviceSelectionString+=${DeviceConnections[$DeviceElementNumber]}$'\n'
    DeviceSelectionString+="${DeviceCurrentSessionSeatIDs[$DeviceElementNumber]} / ${DeviceCurrentWLSeatIDs[$DeviceElementNumber]}"$'\n'
    DeviceSelectionString+="${DeviceNewSessionSeatIDs[$DeviceElementNumber]} / ${DeviceNewWLSeatIDs[$DeviceElementNumber]}"$'\n'
    DeviceSelectionString+=$DeviceConnectionOrder
    ((DeviceConnectionOrder--))
  done

  DeviceSelectionString+=$'\n'-1$'\n'"[Apply Changes]"$'\n'$'\n'$'\n'$'\n'$'\n'
  DeviceSelectionString+=$'\n'-2$'\n'"[Cancel Changes]"$'\n'$'\n'$'\n'$'\n'$'\n'

  echo "$DeviceSelectionString" | $ZENITYCMD --height 580 --width 800 --list --hide-column 1 --print-column 1 --column=selectionnumber --column="Type" --column="Name" --column="Connection Path" --column="Current Session/Wayland Seats" --column="New Session/Wayland Seats" --column="Connected Order" --title="Multipointer and Seat Configuration" --text="The changes made here will impact all users, as well as the login greeters. 
Multipointer is not supported by all Wayland desktops like it is on Weston.

This will devices to be associated with session seats and wayland seats.
   -  Session 'Seats' are a grouping containing at least of graphics device 'card', and input devices.
      Having multiple session seats allows one computer to act as multiple workstations.

   -  Wayland 'Seats' are what belong to a separate mouse cursor and keyboard focus.
      The more wayland seats with devices associated with them, the more pointers there will be.

Devices are associated with the session seat first, then the wayland seat. There can be multiple session seats with multiple pointers each.

This utility stores the device seat association with these following attributes:
   1. The device's internal name, usually containing the make and model.
   2. The port they are plugged into. Devices will only associate with the proper seats if plugged in the same way.

The default seat for Session seats is 'seat0', and the default Seat for Wayland seats is 'default',

Please note that some devices have multiple internal components, and sometimes appear as 'different' devices

Devices are sorted by the order they were connected, with the newest devices on top" 2> /dev/null
}

#Configure the seats of a selected device, it takes one argument, the array index element number of the device to configure
function ConfigureDevice
{
  CurrentDeviceNumber=$1
  unset NewWLSeatNumber
  unset NewSessionSeatNumber

  if [[ ${DeviceInputTypeFlags[$CurrentDeviceNumber]} == 1 ]]
  then
    NewSeatSelection=$($ZENITYCMD  --forms --add-combo "Session Seat" --combo-values="$SessionSeatList" --add-combo "Wayland Seat/Pointer" --combo-values="$WLSeatList" --text="Multipointer and Seat Configuration

    Select a seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]}
    Connected to: ${DeviceConnections[$CurrentDeviceNumber]}

    Current Session Seat: ${DeviceCurrentSessionSeatIDs[$CurrentDeviceNumber]}
    Current Wayland Seat/Pointer: ${DeviceCurrentWLSeatIDs[$CurrentDeviceNumber]}" --separator="@" --title "Multipointer and Seat Configuration" 2>/dev/null)
    ZenityResult=$?
  else
    NewSeatSelection=$($ZENITYCMD --forms --add-combo "Session Seat" --combo-values="$SessionSeatList" --text="Multipointer and Seat Configuration

    Select a seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]}
    Connected to: ${DeviceConnections[$CurrentDeviceNumber]}

    Current Session Seat: ${DeviceCurrentSessionSeatIDs[$CurrentDeviceNumber]}" --separator="@" --title "Multipointer and Seat Configuration" 2>/dev/null)
    ZenityResult=$?
  fi

  if [[ $ZenityResult != 0 ]]
  then
    return 1
  fi

  IFS="@"
  NewSeatSelection=($NewSeatSelection)
  unset IFS
  NewSessionSeatNumber=(${NewSeatSelection[0]})
  NewWLSeatNumber=(${NewSeatSelection[1]})

  #only change the seat id in udev if the user specified to do so
  if [[ ! -z ${NewSeatSelection[0]} || ! -z ${NewSeatSelection[1]} ]]
  then
    #If only the session seat is specified
    if [[ -z $NewWLSeatNumber ]]
    then
      NewWLSeatNumber="${DeviceCurrentWLSeatIDs[$CurrentDeviceNumber]}"
    fi
    #If only the Wayland seat is specified
    if [[ -z $NewSessionSeatNumber ]]
    then
      NewSessionSeatNumber="${DeviceCurrentSessionSeatIDs[$CurrentDeviceNumber]}"
    fi
    DeviceNewSessionSeatIDs[$CurrentDeviceNumber]=$NewSessionSeatNumber
    DeviceNewWLSeatIDs[$CurrentDeviceNumber]=$NewWLSeatNumber
    DeviceNewSeatConfigChangeds[$CurrentDeviceNumber]=1
  fi
}

#Function that writes the new changes to the config files
function CommitConfigFile
{
  #Create the config file
  touch /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules


  #Go through each probed input device and prompt for a the seata to add the device to
  for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=NumberOfDevices; CurrentDeviceNumber++ ))
  do

    #only change the seat id in udev if the user specified to do so
    if [[ ${DeviceNewSeatConfigChangeds[$CurrentDeviceNumber]} == 1 ]]
    then

      NewSessionSeatNumber=${DeviceNewSessionSeatIDs[$CurrentDeviceNumber]}
      NewWLSeatNumber=${DeviceNewWLSeatIDs[$CurrentDeviceNumber]}
      cat /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules > /tmp/72-weston_seats_and_udev_seats.rules.work
      if [[ ${DeviceInputTypeFlags[$CurrentDeviceNumber]} == 1 ]]
      then
        if [[ ! -z ${DeviceNames[$CurrentDeviceNumber]} && ! -z ${DeviceConnections[$CurrentDeviceNumber]} ]]
        then
          awk "!/\"${DeviceNames[$CurrentDeviceNumber]//\//\\/}\"/ || !/\"${DeviceConnections[$CurrentDeviceNumber]//\//\\/}\"/" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
        else
          if [[ ! -z ${DeviceNames[$CurrentDeviceNumber]} ]]
          then
            awk "!/${DeviceNames[$CurrentDeviceNumber]}//\//\\/}//" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
          fi
          if [[ ! -z ${DeviceConnections[$CurrentDeviceNumber]} ]]
          then
            awk "!/${DeviceConnections[$CurrentDeviceNumber]//\//\\/}/" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
          fi
        fi
        echo "ENV{ID_SERIAL}==\"${DeviceNames[$CurrentDeviceNumber]}\", ENV{ID_PATH}==\"${DeviceConnections[$CurrentDeviceNumber]}\", ENV{ID_SEAT}=\"$NewSessionSeatNumber\", ENV{WL_SEAT}=\"$NewWLSeatNumber\"" >> /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
      else
        if [[ ! -z ${DeviceConnections[$CurrentDeviceNumber]} ]]
        then
          awk "!/\"\*${DeviceConnections[$CurrentDeviceNumber]//\//\\/}\"/" /tmp/72-weston_seats_and_udev_seats.rules.work > /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
        fi
        echo "TAG==\"seat\", ENV{ID_FOR_SEAT}==\"*${DeviceConnections[$CurrentDeviceNumber]}\", ENV{ID_SEAT}=\"$NewSessionSeatNumber\"" >> /etc/udev/rules.d/72-weston_seats_and_udev_seats.rules
      fi
      rm /tmp/72-weston_seats_and_udev_seats.rules.work
    fi
  done
}

#Function that sends the signal to udev and to the waylandloginmanagers to now detect the config changes that have been made
function SignalCompletion
{

  $ZENITYCMD --info --text "Seat Configuration for all devices is now complete.

Press OK to apply all the changes. This will switch user to the loginmanager display.
This is to signal the display server to detect the new changes, and the waylandloginmanager to detect new seats.

Your sessions will NOT be terminated, but they will need to be switched back into with Switch User" --no-wrap --title="Multipointer and Seat Configuration" 2>/dev/null

  #Reload the new configuration into udev
  udevadm control --reload-rules


  #Notify each input device about the change with udev, instead of doing a full trigger on all devices on the system
  for (( Itr=1; Itr<5; Itr++ ))
  do
    udevadm trigger --subsystem-match=input
    udevadm trigger --subsystem-match=drm
    udevadm trigger --subsystem-match=graphics
    udevadm trigger --subsystem-match=sound
    sleep 1
  done

  #Force the server to pickup the changes
  waylandloginmanager --sendcommand DetectSeats
  sleep 1
  RunningSeats=($(loginctl --no-legend list-seats 2>/dev/null | sort))
  for RunningSeat in ${RunningSeats[@]}
  do
    if [[ $RunningSeat == $XDG_SEAT ]]
    then
      waylandloginmanager --sendcommand Switch $RunningSeat
    else
      waylandloginmanager --sendcommand Change $RunningSeat
    fi
  done
}

#Function that shows more detailed help
function HelpDialog
{
echo "
INTRODUCTION
============

What is a seat? 
---------------
A seat is a combination of devices on a computer that belong 
to 1 user. Most computers have 1 seat each. However this
wizard allows multiple seats to be configured.

What is a Session Seat?
-----------------------
A session seat is a group of hardware, needing a different 
video card each to work, along with input devices, such as a 
keyboard or mouse.These devices belong to different sessions,
allowing each user to have independant control over their own
session each. If such a configuration was set up in a manor
that the cables and computer were well hidden such a setup
could appear to the unwitting eye as two (or more) computers,
where all seats are really being run on one.

A USB graphics card is usually suitable for the multiple
graphics card requirement, as long as the driver is supported.

What is a Wayland Seat?
-----------------------
A wayland seat is a group of hardware within a session seat 
that are shared within a session, to where, when supported by
a  given desktop environment, allows there to be multiple
pointers on one session, along with their keyboards and mice. 
This type of configuration allows for better collaboration,
with two users sharing a session. It is also possible to 
have session seats, with multiple wayland seats, to where each
independant session also has multiple pointers.

A special graphics configuration for wayland seats/pointers is not needed.

ABOUT THIS UTILITY
==================
This utility simplifies the configuration of the seats. 
Typically one could edit the configuration by editing udev
config files manually. This utility assists in creating 
and editing all seat config, and storing it in the file
/etc/udev/rules.d/72-weston_seats_and_udev_seats

Devices, and their configured seat values are stored by 
the name that the device presents itself as (if availible)
and the connection.

This utility handles the configuration for input devices
and for video and sound cards

Input Devices can be assignged to session seats, and 
wayland seats, identified in the config by their
ID_SERIAL and ID_PATH properties

Output devices (like video and sound cards) can only be
assigned to session seats, identified by their ID_FOR_SEAT
propeties.


USING THIS UTILITY
==================
The utility will present a list of devices. Select the desired devices,
then associate them with the desired seat.

The devices are sorted by the order they were connected. Newest devices are on top.

Leaving a field blank leaves the device assigned to the current seat info.
For example, if a device is on seat0/default and the wayland seat is set to seat1
the device wil be left on seat0 for the session seat.

"|$ZENITYCMD --text-info --font=mono --width=550 --height=600 2>/dev/null
}

#Function for the main configuration wizard, it takes no arguments
function MainConfig
{
  while [ 1 ]
  do
    SelectedDevice=$(DeviceSelection)
    Result=$?

    #Exit if selected
    if [[ $Result != 0 && $SelectedDevice == -2 ]]
    then
      exit
    fi

    #Break if user is not selecting any more devices
    if [[ $SelectedDevice == -1 ]]
    then
      break
    fi

    ConfigureDevice $SelectedDevice
  done
}


function MainDialog
{
SelectedOption=$(echo "1
Configure Devices
2
Show Detailed Help
3
Quit"| $ZENITYCMD --height 380 --list --hide-column 1 --print-column 1 --column=selectionnumber --column=option --hide-header --title="Multipointer and Seat Configuration" --text "Select device configuration mode.

'Configure All Devices' lists all devices currently attached to be configured.

'Show Detailed Help' shows more details on how to use this wizard

'Quit' Exits this wizard
" 2>/dev/null)
}


PrepareSeatList
#Main wizard dialog
while [ 1 ]
do
  MainDialog
  if [[ $SelectedOption == 1 ]]
  then
    CollectDeviceInfo
    MainConfig
    CommitConfigFile
    SignalCompletion
  elif [[ $SelectedOption == 2 ]]
  then
    HelpDialog
  elif [[ $SelectedOption == 3 ]]
    exit
  fi
done
