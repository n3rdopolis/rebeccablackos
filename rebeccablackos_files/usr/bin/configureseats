#! /bin/bash
#    Copyright (c) 2012, 2013, 2014, 2015 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


#This script is for configuring multiple seats in Weston. It matches the devices connection ID, and the devices serial ID, and sets the ENV{WL_SEAT}= value in a the udev file /lib/udev/rules.d/99-westonseats.rules 
#This makes it easier for users to configure multiple pointers and keyboard focuses.

#Require root privlages
if [[ $UID != 0 ]]
then
  echo "Must be run as root."
  exit
fi

#Allow Exclamation points to be used in commands by turning off the history
set +H

#Specify the maximum number of seats. This is a more for usability, for specifying how many seats are listed in the zenity dialog. There can be more, but if there are too many, it become a hastle for the user
MaxNumberOfSeats=10

#get the current tty so the script knows what TTY to switch back to
CurrentTTY=$(fgconsole)

NumberOfDevices=0
#Get all input devices from udev, and store attributes into an array
while read Device
do
  #get properties of the device
  DeviceProperties=$(udevadm info --query=property  --name=$Device)
  DeviceDisplayName=$(udevadm info -q all --attribute-walk --name=$Device | sed -e '/looking at/d' -e 's/    //g' -e 's/==/=/g' -e 's/"//g' | awk -F ' *= *' '$1 == "ATTRS{name}" {print $0}' | cut -d = -f2- | tail -1 | sed 's/[^0-9a-zA-Z_ -]*//g')
  DeviceName=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_SERIAL" {print $0}' | cut -d = -f2- | tail -1 )
  DeviceConnection=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_PATH" {print $0}' | cut -d = -f2- | tail -1 )
  DeviceSeatID=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "WL_SEAT" {print $0}' | cut -d = -f2- | tail -1 )
  IsDeviceMouse=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_MOUSE" {print $0}' | cut -d = -f2- | tail -1 )
  IsDeviceTouchscreen=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_TOUCHSCREEN" {print $0}' | cut -d = -f2- | tail -1 )
  IsDeviceTouchpad=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_TOUCHPAD" {print $0}' | cut -d = -f2- | tail -1 )
  IsDeviceKeyboard=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_KEYBOARD" {print $0}' | cut -d = -f2- | tail -1 )

  #if the device doesn't have a serial ID, which usually tells the make and model, then display it as 'generic' to the user
  if [[ -z $DeviceDisplayName ]]
  then
    DeviceDisplayName=$(echo $DeviceName| sed 's/[^0-9a-zA-Z_ -]*//g')
    if [[ $DeviceDisplayName == "noserial" ]]
    then
      DeviceDisplayName="Generic"
    fi
  fi

  #if the device has no configured WL_SEAT value, then weston sees it as it being under the default seat
  if [[ -z $DeviceSeatID ]]
  then
    DeviceSeatID=default
  fi

  #Handle the display of the device type to the user. Some devices report themselves as multiple types such as a logitech transciver, will appear as "Mouse / Keyboard"
  unset DeviceType

  #if the device is reported as a mouse, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
  if [[ -z $IsDeviceMouse ]]
  then
    IsDeviceMouse=0
  else
    if [[ ! -z $DeviceType ]]
    then
      DeviceType+=" / "
    fi
    DeviceType+="Mouse"
  fi

  #if the device is reported as a touchscreen, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
  if [[ -z $IsDeviceTouchscreen ]]
  then
    IsDeviceTouchscreen=0
  else
    if [[ ! -z $DeviceType ]]
    then
      DeviceType+=" / "
    fi
  DeviceType+="Touchscreen"
  fi

  #if the device is reported as a touchpad (as in a laptop touchpad), then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
  if [[ -z $IsDeviceTouchpad ]]
  then
    IsDeviceTouchpad=0
  else
    if [[ ! -z $DeviceType ]]
    then
      DeviceType+=" / "
    fi
  DeviceType+="Touchpad"
  fi

  #if the device is reported as a keyboard, then add that to the device type string. if the device type string has a previous device type in it, prepend a / for the user
  if [[ -z $IsDeviceKeyboard ]]
  then
    IsDeviceKeyboard=0
  else
    if [[ ! -z $DeviceType ]]
    then
      DeviceType+=" / "
    fi
  DeviceType+="Keyboard"
  fi

  #if DeviceType exits, then add to the arrays. DeviceType only exists if the device is a  mouse, keyboard, touchpad and/or touchscreen. All other devices reported by udev, it will be empty and ignored. These devices are the only ones that concern weston multiseat.
  if [[ ! -z $DeviceType ]]
  then
    ((NumberOfDevices++))
    DevicePaths[$NumberOfDevices]=$Device
    DeviceDisplayNames[$NumberOfDevices]=$DeviceDisplayName
    DeviceNames[$NumberOfDevices]=$DeviceName
    DeviceConnections[$NumberOfDevices]=$DeviceConnection
    DeviceSeatIDs[$NumberOfDevices]=$DeviceSeatID
    DeviceTypes[$NumberOfDevices]=$DeviceType
   fi

done < <(find /dev/input/event*)

#Get a list of all devices for the main form
for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=$NumberOfDevices; CurrentDeviceNumber++ ))
do
  DeviceList+="     ${DeviceTypes[$CurrentDeviceNumber]}:      ${DeviceDisplayNames[$CurrentDeviceNumber]}      (Connected to: ${DeviceConnections[$CurrentDeviceNumber]})
"
done

#Show a guide for the users on what devices they have attached to their system, and what will be configured
zenity --no-wrap --info --text "The changes made here will effect all users, as well as the loginmanager.

Multiseat is not supported by all Wayland servers.

You will be able to select what seat devices belong to. 
The devices are remembered by the device's name (usually containing the make and model), 
and the port it's plugged into, so in order for the configuration to work each time you plug your devices, 
you need to plug them into the same port, (otherwise they will default to the default seat)

A seat in the Wayland sense is a group of input devices, such as a mouse and keyboard, window focus,
and clipboard and cursor. It is best to add at least 1 mouse device and 1 keyboard to each seat that 
you add devices to. You don't have to fill all seats with a device. 

This Dialog lists all the devices that will be configured by this wizard. 
You can close this dialog at anytime, as closing with will not interfere with the wizard, 
but serves as a guide to tell you how many devices are left.

Please note that some devices have multiple internal components, and sometimes register themselves more than once.

Devices:
$DeviceList " --title="Multipointer Configuration" &
MainFormPID=$!
sleep 5


#Create the config file
touch /lib/udev/rules.d/99-westonseats.rules

#Generate a list of seats for the Zenity dialogs for selection
unset SeatList
SeatList="default"
for (( CurrentSeat=1; CurrentSeat<$MaxNumberOfSeats; CurrentSeat++ ))
do
  SeatList+="
"
  SeatList+="seat$CurrentSeat"
done

#Go through each probed input device and prompt for a the seata to add the device to
for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=$NumberOfDevices; CurrentDeviceNumber++ ))
do
  unset NewSeatNumber
  NewSeatNumber=$(echo "$SeatList" | zenity --height=450 --list --column=seats --hide-header --text="Multipointer Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)

  Select a seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]}
  Connected to: ${DeviceConnections[$CurrentDeviceNumber]}

  Current Seat: ${DeviceSeatIDs[CurrentDeviceNumber]}" --separator="\n" --title "Multipointer Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)") 
  #only change the seat id in udev if the user specified to do so
  if [[ -z $NewSeatNumber ]]
  then
    zenity --info --text "Seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]} not Changed" --title="Multipointer Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)"
  else
    DeviceSeatIDs[CurrentDeviceNumber]=$NewSeatNumber

    cat /lib/udev/rules.d/99-westonseats.rules > /tmp/99-westonseats.rules.work
    awk "!/${DeviceNames[$CurrentDeviceNumber]}/ || !/${DeviceConnections[$CurrentDeviceNumber]}/" /tmp/99-westonseats.rules.work > /lib/udev/rules.d/99-westonseats.rules
    echo "ENV{ID_SERIAL}==\"${DeviceNames[$CurrentDeviceNumber]}\", ENV{ID_PATH}==\"${DeviceConnections[$CurrentDeviceNumber]}\", ENV{WL_SEAT}=\"$NewSeatNumber\"" >> /lib/udev/rules.d/99-westonseats.rules 
    rm /tmp/99-westonseats.rules.work
  fi
done

#Close the main zenity window that lists all devices when this script is exiting
kill -9 $MainFormPID

#tell the user that Weston is going to 'flicker' as the tty is switched in and out so that Weston is forced to see the new Udev config
zenity --info --text "Seat Configuration for all devices is now complete.

Press OK to apply the changes." --title="Multipointer Configuration"

#Reload the new configuration into udev
udevadm control --reload-rules

#Notify each input device about the change with udev, instead of doing a full trigger on all devices on the system
for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=$NumberOfDevices; CurrentDeviceNumber++ ))
do
  udevadm trigger --sysname-match=$(basename ${DevicePaths[$CurrentDeviceNumber]})
done

#If the Wayland server is hosted 
if [[ ! -z $WAYLAND_HOST ]]
then
  WAYLAND_SERVER=$WAYLAND_HOST
else
  WAYLAND_SERVER=$WAYLAND_DISPLAY
fi

#Force the server to pickup the changes
if [[ $SessionName =~ "Default Weston Desktop Shell" ]]
then
  fuser -k -34 $XDG_RUNTIME_DIR/$WAYLAND_SERVER
  fuser -k -35 $XDG_RUNTIME_DIR/$WAYLAND_SERVER
else
  chvt 63
  sleep .1
  chvt $CurrentTTY
fi