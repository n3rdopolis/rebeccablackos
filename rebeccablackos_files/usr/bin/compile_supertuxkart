#! /bin/bash
#    Copyright (c) 2012 - 2023 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#This script calls all files in /usr/bin/Compile in the needed order. it also fowards if it was called with build-only or download-only to the scripts.
#It also configures build_core (which is used by all of the build scripts) to create debs as they build, by turning on the BUILDCOREMAKEDEBS argument.


CompilePackagesList=()

MAXDOWNLOADINSTANCES=5
MAXCLEANINSTANCES=5
argument=$1

CLEANUPOVERLAY=1
export BUILDCOREMAKEDEBS=1
if [[ $(mountpoint -q /tmp/srcbuild_overlay/; echo $?) == 0 && $CLEANUPOVERLAY == 1 ]]
then
  export BUILDCOREUSEOVERLAY=1
fi


function CompilePackage
{
  CompilePackagesList+=($1)
}

function CompilePackageInList
{
  BUILDNAME=$1
  MULTIJOBSTATUS=""

  #compile_all is running to download the source
  if [[ "$argument" == download-only ]]
  then
    echo "Download/Update $BUILDNAME source (~$CurrentPackageNumber of $TotalPackageNumber)"

    #Allow more than one downloads running at a time, only downloads and clean can run more than one at a time
    #Even smalldebinstall cannot, as only one instance of dpkg can run
    RUNJOBS=($(jobs -rp))
    RUNJOBSCOUNT=${#RUNJOBS[@]}
    while [[ $RUNJOBSCOUNT -ge $MAXDOWNLOADINSTANCES ]]
    do
      RUNJOBS=($(jobs -rp))
      RUNJOBSCOUNT=${#RUNJOBS[@]}
      sleep .1
    done
    if [[ -x /usr/bin/Compile/$BUILDNAME ]]
    then
      build_core buildspec "/usr/bin/Compile/$BUILDNAME" download-only 2>&1 &
    else
      mkdir -p /buildlogs/build_core/$BUILDNAME
      echo "Builder for $BUILDNAME does not exist in /usr/bin/Compile/" | tee /buildlogs/build_core/$BUILDNAME/ExecDownloadBuilder
      echo "$BUILDNAME" >> /buildlogs/build_core/faileddownloads
      return
    fi
    export MULTIJOBSTATUS="~"
  fi

  #compile_all is running to build the source
  if [[ "$argument" == build-only ]]
  then
    #Cleanup any files in the srcbuild_overlay from the last build
    echo "Build $BUILDNAME ($CurrentPackageNumber of $TotalPackageNumber)"
    if [[ -x /usr/bin/Compile/$BUILDNAME ]]
    then
      build_core buildspec "/usr/bin/Compile/$BUILDNAME" build-only 2>&1
    else
      mkdir -p /buildlogs/build_core/$BUILDNAME
      echo "Builder for $BUILDNAME does not exist in /usr/bin/Compile/" | tee /buildlogs/build_core/$BUILDNAME/ExecCompileBuilder
      echo "$BUILDNAME" >> /buildlogs/build_core/failedcompiles
      return
    fi
  fi

  #Install the smaller version of the package
  if [[ "$argument" == installsmallpackage ]]
  then
    echo "Attempting to install smaller version of $BUILDNAME ($CurrentPackageNumber of $TotalPackageNumber)"
    if [[ -x /usr/bin/Compile/$BUILDNAME ]]
    then
      build_core buildspec "/usr/bin/Compile/$BUILDNAME" installsmallpackage 2>&1
    else
      mkdir -p /buildlogs/build_core/$BUILDNAME
      echo "Builder for $BUILDNAME does not exist in /usr/bin/Compile/" | tee /buildlogs/build_core/$BUILDNAME/ExecSmallInstallBuilder
      return
    fi
  fi
  
  #compile_all is running to clean the source
  if [[ "$argument" == clean ]]
  then
    echo "Cleanup $BUILDNAME ($CurrentPackageNumber of $TotalPackageNumber)"

    #Allow more than one cleans running at a time
    RUNJOBS=($(jobs -rp))
    RUNJOBSCOUNT=${#RUNJOBS[@]}
    while [[ $RUNJOBSCOUNT -ge $MAXCLEANINSTANCES ]]
    do
      RUNJOBS=($(jobs -rp))
      RUNJOBSCOUNT=${#RUNJOBS[@]}
      sleep .1
    done
    if [[ -x /usr/bin/Compile/$BUILDNAME ]]
    then
      build_core buildspec "/usr/bin/Compile/$BUILDNAME" clean 2>&1 &
    else
      mkdir -p /buildlogs/build_core/$BUILDNAME
      echo "Builder for $BUILDNAME does not exist in /usr/bin/Compile/" | tee /buildlogs/build_core/$BUILDNAME/ExecCleanBuilder
      return
    fi
    MULTIJOBSTATUS="~"
  fi
  
  #compile_all is running to download and build
  if [[ ! -n "$argument" ]]
  then
    if [[ -x /usr/bin/Compile/$BUILDNAME ]]
    then
      build_core buildspec "/usr/bin/Compile/$BUILDNAME"
    else
      echo "Builder for $BUILDNAME does not exist in /usr/bin/Compile/"
      return
    fi
  fi
  
}

function CompilePackageList
{
  TotalPackageNumber="${#CompilePackagesList[@]}"
  export BUILDCORETOTALPACKAGESNUMBER=$TotalPackageNumber
  CurrentPackageNumber=0
  for Package in "${CompilePackagesList[@]}"
  do
    ((CurrentPackageNumber++))
    export BUILDCORECURRENTPACKAGENUMBER=${MULTIJOBSTATUS}${CurrentPackageNumber}
    CompilePackageInList "$Package"
  done
  wait
}

CompilePackage stk-assets
CompilePackage stk-code

CompilePackageList
