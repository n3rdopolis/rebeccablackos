#! /bin/sh
#    Copyright (c) 2012 - 2025 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


#This calls a display server in a way that can be called as init (like a recovery console)

#If this is pid1 it starts /sbin/init upon exit, or the overrideinit= option if it is passed to the kernel

#If the first argument is "--", then further arguments are handled as a command to execute (as in "recinit -- command --argument1 --argument2")

GetFirstSeatCard()
{
  MatchSeat=$XDG_SEAT
  if [ -z $XDG_SEAT ]
  then
    MatchSeat=seat0
  fi

  ls -r /dev/dri/card* > /run/recinit/devices

  SelectCard=""
  while read -r ReadCard
  do
    ReadCardSeat=$(udevadm info --query=property  --property ID_SEAT --value --name=$ReadCard)
    CardIsVGABoot=$(udevadm info --name=$ReadCard -a | grep -c "{boot_vga}")
    if [ -z $ReadCardSeat ]
    then
      ReadCardSeat=seat0
    fi

    if [ $CardIsVGABoot -gt 0 ]
    then
      SelectCard=$ReadCard
      break
    fi
  done < /run/recinit/devices
  rm /run/recinit/devices
  echo $SelectCard
}

USER_UID=$(id -u)
if [ $USER_UID -ne 0 ]
then
  echo "Must be run as root"
  exit 1
fi

#Ensure /run is writable
touch /run/.rotest > /dev/null 2>&1
if [ $? -ne 0 ]
then
  unmountrunfs=1
  mount -t tmpfs none /run
else
  unmountrunfs=0
  rm /run/.rotest
fi

if [ ! -e /dev/shm ]
then
  removedevshm=1
  mkdir /run/shmfs
  ln -s /run/shmfs /dev/shm
else
  removedevshm=0
fi

OLD_PATH=$PATH
mkdir /run/recinit/
mkdir -p /run/user/0
chmod 700 /run/user/0
export XDG_RUNTIME_DIR=/run/user/0
export XDG_SEAT=seat0
export WLR_RENDERER_ALLOW_SOFTWARE=1
export LIBSEAT_BACKEND=noop
export PATH=/opt/bin:$PATH
export WLR_LIBINPUT_NO_DEVICES=1
export WLR_NO_HARDWARE_CURSORS=1
export WLR_RENDERER=pixman

#Get the keyboard layout from /etc/vconsole.conf
if [ -e /etc/vconsole.conf ]
then
  . /etc/vconsole.conf
  if [ $(echo $KEYMAP | awk -F'-' '{print NF}') -gt 1 ]
  then
    export XKB_DEFAULT_LAYOUT=$(echo $KEYMAP | cut -d "-" -f1)
    export XKB_DEFAULT_VARIANT=$(echo $KEYMAP | cut -d "-" -f2-)
  fi
fi

if [ ! -e /dev/tty0 ]
then
  export SEATD_VTBOUND=0
fi

#Make init command in /run/recinit/init file, 
#/run/recinit/init will get executed when recinit ends
#Users can replace it if they want recinit to start a different init command after working in recinit
if [ $$ -eq 1 ]
then
  echo "exec /sbin/init" > /run/recinit/init
  chmod +x /run/recinit/init
fi

#Supress warning when started from initramfs
LC_ALL_REAL=$LC_ALL
export LC_ALL=C.UTF-8

#Load simpledrm if there is no /dev/dri/card0 device
#SIMPLEDRM_FORCELOADAED=0
#if [ ! -e /dev/dri/card0 ]
#then
#  SIMPLEDRM_FORCELOADAED=1
#  modprobe simpledrm
#fi
modprobe evdev

if [ "$RECINIT_SYSTEMD" = 1 ]
then
  fuser -k /dev/dri/card*
  sleep 1
fi

#populate fake udev device info if udev not running
udevadm control --ping -t 1 > /dev/null 2>&1
udev_result=$?

#Get Plymouth status
plymouth --ping
plymouth_result=$?

if [ $udev_result -ne 0 ]
then
  /lib/systemd/systemd-udevd --daemon --resolve-names=never

  udevadm trigger --type=subsystems --action=add
  udevadm trigger --type=devices --action=add
  udevadm settle
fi

#Hide plymouth if it's running
if [ $plymouth_result -eq 0 ]
then
  plymouth hide-splash
fi

#If the first argument is --, the rest of the arguments are a command that will run within the terminal emulator
if [ $# -gt 0 ] && [ $1 = "--" ]
then
  shift
  RUNCOMMAND="$@"
else
  #Prefer bash, use sh as a fallback
  if command -v bash > /dev/null 2>/dev/null
  then
    RUNCOMMAND="bash -l"
  else
    RUNCOMMAND="sh -l"
  fi
fi

if [ "$RECINIT_SYSTEMD" = "1" ]
then
  if [ "$RECINIT_SYSTEMD_TYPE" = "rescue" ]
  then
    RUNCOMMAND="/usr/lib/systemd/systemd-sulogin-shell rescue"
  elif [ "$RECINIT_SYSTEMD_TYPE" = "emergency" ]
  then
    RUNCOMMAND="/usr/lib/systemd/systemd-sulogin-shell emergency"
  fi
fi

export WLR_DRM_DEVICES=$(GetFirstSeatCard)
cage -d -s -m last -- \
foot --config=/etc/footkiosk.conf --override=scrollback.lines=10000  -- \
sh -c "LC_ALL=$LC_ALL_REAL $RUNCOMMAND; kill -9 \$(pidof cage)" > /dev/null 2>&1

if [ $udev_result -ne 0 ]
then
  udevadm control --exit
fi

#Unload simpledrm if it was loaded manually, so udev can load it in the right order later
#if [ $SIMPLEDRM_FORCELOADAED -eq 1 ]
#then
#  rmmod simpledrm
#fi

if [ $unmountrunfs -eq 1 ]
then
  umount -lf /run
fi

if [ $removedevshm -eq 1 ]
then
  unlink /dev/shm
fi

#Reshow plymoth
if [ $plymouth_result -eq 0 ]
then
  plymouth show-splash
fi

#If this is pid 1 start init upon exit
if [ $$ -eq 1 ]
then
  export PATH=$OLD_PATH
  unset LC_ALL
  unset XDG_RUNTIME_DIR
  unset XDG_SEAT
  unset WLR_RENDERER_ALLOW_SOFTWARE
  unset LIBSEAT_BACKEND
  unset WLR_LIBINPUT_NO_DEVICES
  unset WLR_NO_HARDWARE_CURSORS
  unset WLR_RENDERER
  unset SEATD_VTBOUND
  if [ ! -z $overrideinit ]
  then
    exec $overrideinit
  else
    . /run/recinit/init
  fi
fi
