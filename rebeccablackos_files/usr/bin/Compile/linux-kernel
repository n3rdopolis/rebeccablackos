#! /bin/bash
#    Copyright (c) 2012 - 2025 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

#Inherit functions and variables from the script in /usr/bin/build_core
. /usr/bin/build_core

#The name of the source code folder that gets created
SOURCENAME=linux-kernel

#The URL of the Source code repo
SOURCEURL=https://gitlab.com/linux-kernel/stable.git

#The Type of repository the source code is on. Either 'GIT', 'SVN', 'BZR', 'HG', or 'ARCHIVE'.
REPOSITORYTYPE=GIT

#The revision of the source repo to use. To get the lastest revision for GIT it's 'git:defaultbranch', for SVN it's 'HEAD', for BZR, it's 'last:1', and for HG it's 'default', without the quotes. ARCHIVE doesn't have revisions
SOURCEREVISION=linux-6.14.y

#The prefix to compile and install the source code to
INSTALLDIR=/opt

#This variable is not manditory, /usr/bin/build_core sets it by default as 0, so that when it's set to create deb files, it only needs to build them once. 
REBUILDNEWREVISION=0

#Specify any custom revisions for git submodules in the format shown below
# SUBMODULEREVISIONS=(examplesubmodule master 
# nested/submodule 1.0
# 'submodule with spaces' master
# commitsubmodule 0123456789abcdef )
#
#This is an array where the first element specifies a submodule name, and the second element specifies the revision, the third specifies the name of another submodule, the fourth element specifies its revision and so on.
#If there are spaces in the submodule your are specifing, you will need to enclose the name in single quotes
#This is only applicable to git repositories with submodules

#VARIABLES PRESENTED
# EXTERNALBUILDHOME : For out of tree builds 
# INTERNALBUILDHOME : For in tree builds

#This gets called by DownloadSource in /usr/bin/build_core. If there are no other commands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to download source.
function PackageDownloadSource
{
DebianConfigCommit=debian/6.13.2-1_exp1
DebianConfigRootURL=https://salsa.debian.org/kernel-team/linux/-/raw/$DebianConfigCommit/debian/config
DebianArch=$(dpkg --print-architecture)

#Download the Debian defines
wget ${DebianConfigRootURL}/defines.toml -O - 2>/dev/null > ./defines.toml
if [[ $? != 0 ]]
then
  echo "Failed to download Debian config defines: ${DebianConfigRootURL}/defines.toml"
  exit 1
fi

#Parse the Debian defines to get the kernelarch of the debian arch (eg amd64 = x86)
KernelArchGroup=0
KernelArchGroupName=""
while IFS= read -r TOMLLINE
do
  if [[ "$TOMLLINE" == "[[kernelarch]]" ]]
  then
    KernelArchGroup=1
    KernelArchGroupName=""
    continue
  fi
  if [[ $KernelArchGroup == 1 && $TOMLLINE == "" ]]
  then
    KernelArchGroup=0
    continue
  fi
  if [[ $KernelArchGroup == 1 && $KernelArchGroupName == "" && $TOMLLINE =~ ^"name = " ]]
  then
    IFS=\'
    TOMLLINE=($TOMLLINE)
    unset IFS
    KernelArchGroupName=${TOMLLINE[1]}
    continue
  fi
  if [[ $KernelArchGroup == 1 && $KernelArchGroupName != ""&& $TOMLLINE =~ ^" "*"name = " ]]
  then
    IFS=\'
    TOMLLINE=($TOMLLINE)
    unset IFS
    DebianArchGroupName=${TOMLLINE[1]}
    if [[ $DebianArchGroupName == $DebianArch ]]
    then
      KernelArch=$KernelArchGroupName
      break
    fi
    continue
  fi
done < <(cat ./defines.toml)

echo > ./kernelarch.config
wget ${DebianConfigRootURL}/kernelarch-${KernelArch}/config -O - > ./kernelarch.config
if [[ $? != 0 ]]
then
  echo "Failed to download Debian kernel arch config ${DebianConfigRootURL}/kernelarch-${KernelArch}/config"
  rm ./kernelarch.config
  exit 1
fi

ConfigFileName="config"
if [[ $DEB_HOST_MULTIARCH == i386-linux-gnu ]]
then
  ConfigFileName="config.686-pae"
fi

echo > ./arch.config
wget ${DebianConfigRootURL}/${DebianArch}/${ConfigFileName} -O - > ./arch.config
if [[ $? != 0 ]]
then
  echo "Failed to download Debian arch config ${DebianConfigRootURL}/${DebianArch}/${ConfigFileName}"
  rm ./arch.config
  exit 1
fi

echo > ./mainconfig.config
wget ${DebianConfigRootURL}/config -O - > ./mainconfig.config
if [[ $? != 0 ]]
then
  echo "Failed to download Debian main config ${DebianConfigRootURL}/config"
  rm ./mainconfig.config
  exit 1
fi
}


#This is called by PrepareBuild in /usr/bin/build_core. If there are no other commands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to prepare the system to build the source
function PackagePrepareBuild()
{
patch -f -p1 < /usr/share/RBOS_PATCHES/linux-kernel.diff
sed -i 's/CONSOLE_LOGLEVEL_DEFAULT/CONSOLE_LOGLEVEL_QUIET/g' drivers/firmware/efi/libstub/printk.c

if [[ ! -e ./kernelarch.config || ! -e ./arch.config || ! -e ./mainconfig.config ]]
then
  echo "Downloaded Debian configs not found, check the download logs from PackageDownloadSource"
  exit 1
fi

#Ensure the kernel scripts don't append unexpected suffixes in the build name
export LOCALVERSION=""

export LLVM_VERSION=$(find /usr/bin/ -maxdepth 1  -regextype posix-basic -regex '.*/clang-[[:digit:]][[:digit:]]' -execdir basename '{}' ';' | sort | tail -n 1 | awk -F "-" '{print $2}')
export LIBCLANG_PATH=/usr/lib/llvm-${LLVM_VERSION}/lib

make LLVM=1 LLVM_SUFFIX="-${LLVM_VERSION}" olddefconfig

./scripts/kconfig/merge_config.sh -m .config ./mainconfig.config
./scripts/kconfig/merge_config.sh -m .config ./kernelarch.config
./scripts/kconfig/merge_config.sh -m .config ./arch.config

#Disable signing
./scripts/config -d CONFIG_MODULE_SIG_KEY
./scripts/config -d CONFIG_SYSTEM_REVOCATION_KEYS
./scripts/config -d CONFIG_SYSTEM_TRUSTED_KEYS

#enable the NULL TTY Driver
./scripts/config -e CONFIG_NULL_TTY
./scripts/config -e CONFIG_NULL_TTY_DEFAULT_CONSOLE

#Enable SimpleDRM, SimpleDRM dependancies, and other useful drivers
./scripts/config -e CONFIG_DRM
./scripts/config -e CONFIG_SYSFB
./scripts/config -e CONFIG_SYSFB_SIMPLEFB
#./scripts/config -e CONFIG_X86_SYSFB
./scripts/config -e CONFIG_DRM_SIMPLEDRM
./scripts/config -m CONFIG_DRM_GUD

#Enbable vkms
./scripts/config -m CONFIG_DRM_VKMS

#DMA buf options
./scripts/config -e CONFIG_SYNC_FILE
./scripts/config -e CONFIG_SW_SYNC
./scripts/config -e CONFIG_UDMABUF
./scripts/config -e CONFIG_DMABUF_MOVE_NOTIFY
./scripts/config -e CONFIG_DMABUF_HEAPS
./scripts/config -e CONFIG_DMABUF_HEAPS_SYSTEM

#Disable fbdev drivers
./scripts/config -d CONFIG_FB_CIRRUS
./scripts/config -d CONFIG_FB_PM2
./scripts/config -d CONFIG_FB_PM2_FIFO_DISCONNECT
./scripts/config -d CONFIG_FB_CYBER2000
./scripts/config -d CONFIG_FB_CYBER2000_DDC
./scripts/config -d CONFIG_FB_ARC
./scripts/config -d CONFIG_FB_VGA16
./scripts/config -d CONFIG_FB_UVESA
./scripts/config -d CONFIG_FB_VESA
./scripts/config -d CONFIG_FB_EFI
./scripts/config -d CONFIG_FB_N411
./scripts/config -d CONFIG_FB_HGA
./scripts/config -d CONFIG_FB_LE80578
./scripts/config -d CONFIG_FB_CARILLO_RANCH
./scripts/config -d CONFIG_FB_MATROX
./scripts/config -d CONFIG_FB_MATROX_MILLENIUM
./scripts/config -d CONFIG_FB_MATROX_MYSTIQUE
./scripts/config -d CONFIG_FB_MATROX_G
./scripts/config -d CONFIG_FB_MATROX_I2C
./scripts/config -d CONFIG_FB_MATROX_MAVEN
./scripts/config -d CONFIG_FB_RADEON
./scripts/config -d CONFIG_FB_RADEON_I2C
./scripts/config -d CONFIG_FB_RADEON_BACKLIGHT
./scripts/config -d CONFIG_FB_ATY128
./scripts/config -d CONFIG_FB_ATY128_BACKLIGHT
./scripts/config -d CONFIG_FB_ATY
./scripts/config -d CONFIG_FB_ATY_CT
./scripts/config -d CONFIG_FB_ATY_GX
./scripts/config -d CONFIG_FB_ATY_BACKLIGHT
./scripts/config -d CONFIG_FB_S3
./scripts/config -d CONFIG_FB_S3_DDC
./scripts/config -d CONFIG_FB_SAVAGE
./scripts/config -d CONFIG_FB_SIS
./scripts/config -d CONFIG_FB_SIS_300
./scripts/config -d CONFIG_FB_SIS_315
./scripts/config -d CONFIG_FB_VIA
./scripts/config -d CONFIG_FB_VIA_X_COMPATIBILITY
./scripts/config -d CONFIG_FB_NEOMAGIC
./scripts/config -d CONFIG_FB_KYRO
./scripts/config -d CONFIG_FB_3DFX
./scripts/config -d CONFIG_FB_3DFX_I2C
./scripts/config -d CONFIG_FB_VOODOO1
./scripts/config -d CONFIG_FB_VT8623
./scripts/config -d CONFIG_FB_TRIDENT
./scripts/config -d CONFIG_FB_ARK
./scripts/config -d CONFIG_FB_PM3
./scripts/config -d CONFIG_FB_SMSCUFX
./scripts/config -d CONFIG_FB_UDL
./scripts/config -d CONFIG_FB_VIRTUAL
./scripts/config -d CONFIG_XEN_FBDEV_FRONTEND
./scripts/config -d CONFIG_FB_MB862XX
./scripts/config -d CONFIG_FB_MB862XX_PCI_GDC
./scripts/config -d CONFIG_FB_MB862XX_I2C
./scripts/config -d CONFIG_FB_HYPERV

#Disable debug option
./scripts/config -d CONFIG_DEBUG_INFO_DWARF5
./scripts/config -d CONFIG_DEBUG_INFO_BTF
./scripts/config -d CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT
./scripts/config -d CONFIG_DEBUG_KERNEL
./scripts/config -e CONFIG_DEBUG_INFO_NONE

#Enable Rust
./scripts/config -d CONFIG_MODVERSIONS
./scripts/config -e CONFIG_RUST

#Disable VTs
./scripts/config -d CONFIG_VT
./scripts/config -d CONFIG_CONSOLE_TRANSLATIONS
./scripts/config -d CONFIG_VT_CONSOLE
./scripts/config -d CONFIG_VT_CONSOLE_SLEEP
./scripts/config -d CONFIG_HW_CONSOLE
./scripts/config -d CONFIG_VT_HW_CONSOLE_BINDING

#Enable DRM Panic
./scripts/config -e CONFIG_DRM_PANIC
./scripts/config -e CONFIG_DRM_PANIC_SCREEN_QR_CODE
./scripts/config --set-val CONFIG_DRM_PANIC_BACKGROUND_COLOR 0x808080
./scripts/config --set-val CONFIG_DRM_PANIC_FOREGROUND_COLOR 0x000000
./scripts/config --set-str CONFIG_DRM_PANIC_SCREEN qr_code

make LLVM=1 LLVM_SUFFIX="-${LLVM_VERSION}" olddefconfig
}

#This is called by MakeAndInstall in /usr/bin/build_core, when the PWD is in the source tree. The commands should build the source 
function PackageCompileSource()
{
export LLVM_VERSION=$(find /usr/bin/ -maxdepth 1  -regextype posix-basic -regex '.*/clang-[[:digit:]][[:digit:]]' -execdir basename '{}' ';' | sort | tail -n 1 | awk -F "-" '{print $2}')
export LIBCLANG_PATH=/usr/lib/llvm-${LLVM_VERSION}/lib

#Ensure the kernel scripts don't append unexpected suffixes in the build name
export LOCALVERSION=""

make LLVM=1 LLVM_SUFFIX="-${LLVM_VERSION}" -j$BUILD_CPU_COUNT

KernelVersion=$(make kernelrelease)
echo "#! /bin/bash"$'\n'"update-grub; update-initramfs -k all -c; linux-update-symlinks install $KernelVersion /boot/vmlinuz-$KernelVersion" > postinstall-pak
}

#This is called by MakeAndInstall in /usr/bin/build_core. This is the routine to install the source. The PWD does not get inherited from PackageCompileSource, so if needed, the PWD needs to be changed here too.
function PackageInstallSource()
{
export LLVM_VERSION=$(find /usr/bin/ -maxdepth 1  -regextype posix-basic -regex '.*/clang-[[:digit:]][[:digit:]]' -execdir basename '{}' ';' | sort | tail -n 1 | awk -F "-" '{print $2}')
export LIBCLANG_PATH=/usr/lib/llvm-${LLVM_VERSION}/lib

#Ensure the kernel scripts don't append unexpected suffixes in the build name
export LOCALVERSION=""

KernelVersion=$(make kernelrelease)
make LLVM=1 LLVM_SUFFIX="-${LLVM_VERSION}" install
make LLVM=1 LLVM_SUFFIX="-${LLVM_VERSION}" modules_install
rm /boot/initrd*${KernelVersion}*
}

#This is called by MakeAndInstall in /usr/bin/build_core. If there are no other commands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These commands are custom install commands that are needed for this package that are not performed by the source install operation. 
function PackagePostInstall()
{
:
}

#Run the Build and or Download, based on the argument this script was called by. This is decided within /usr/bin/build_core
RunDownloadAndOrBuild
