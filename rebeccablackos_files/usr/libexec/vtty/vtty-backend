#! /bin/bash
#    Copyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackOS.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#This runs a session under socat which acts as a fake getty

EmulatedTTY=$1

#Use bash builtin sleep if availible
if [[ -f /usr/lib/bash/sleep ]]
then
  enable -f /usr/lib/bash/sleep sleep
  SLEEPCMD=\sleep
else
  SLEEPCMD=/bin/sleep
fi

systemctl stop getty@$EmulatedTTY.service

which socat &> /dev/null
if [[ $? != 0 ]]
then
  echo "socat not installed"
  exit 1
fi

#Make the proxy folder
mkdir -p /run/vtty/$EmulatedTTY
chown vtty:vtty /run/vtty/$EmulatedTTY
chmod 700 /run/vtty/$EmulatedTTY

#Make the logging folder
mkdir -p /var/log/vtty
chown vtty:vtty /var/log/vtty
chmod 755 /var/log/vtty

#Create the FIFO to where resize commands will be sent
if [[ -e /run/vtty/$EmulatedTTY/ptycommandproxy ]]
then
  rm /run/vtty/$EmulatedTTY/ptycommandproxy
fi
mkfifo -m 200 /run/vtty/$EmulatedTTY/ptycommandproxy
chown vtty /run/vtty/$EmulatedTTY/ptycommandproxy
exec 1000<>/run/vtty/$EmulatedTTY/ptycommandproxy

#Start the socat server
if [[ -e /run/vtty/$EmulatedTTY/socatproxy ]]
then
  rm /run/vtty/$EmulatedTTY/socatproxy
fi
socat exec:"/usr/libexec/vtty/vtty-login $EmulatedTTY",pty,stderr,setsid,sigint,sane unix-listen:/run/vtty/$EmulatedTTY/socatproxy,reuseaddr,fork,su=vtty,user=vtty,group=vtty,mode=0700 &
SOCATPID=$!
$SLEEPCMD .1

#Wait for the socat socket to be created
if [[ ! -e /run/vtty/$EmulatedTTY/socatproxy ]]
then
  while [[ ! -e /run/vtty/$EmulatedTTY/socatproxy ]]
  do
    $SLEEPCMD 1
  done
fi

systemd-notify --ready &> /dev/null
#Accept commands from the connection to manage the PTY (currently only the size)
while [ 1 ]
do
  #12 chars should be enough 's 9999 9999' more than enough
  read -r -n 12 COMMANDDATA <&1000
  COMMANDDATA=($COMMANDDATA)

  #s for size, then number of rows, then number of cols
  if [[ ${COMMANDDATA[0]} -eq "s" ]]
  then
    XSize=${COMMANDDATA[1]}
    YSize=${COMMANDDATA[2]}
    stty -F /run/vtty/$EmulatedTTY/loginpty rows $XSize cols $YSize
  fi

done
exit 0
