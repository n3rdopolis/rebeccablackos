diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 23133d581944a8373b9b753b300d97054b7d6f18..9c1d4523d7f630c7df8aff4eff984d25b2116db9 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -11,6 +11,7 @@ set(kwindowsystem_SRCS
     kwindoweffects.cpp
     kwindoweffects_dummy.cpp
     kwindowinfo.cpp
+    kwindowsystem.cpp
     )
 
 if (KWINDOWSYSTEM_HAVE_X11)
@@ -34,7 +35,7 @@ endif ()
 
 if (APPLE)
    set(kwindowsystem_SRCS ${kwindowsystem_SRCS} kkeyserver_mac.cpp
-                                                kwindowsystem_mac.cpp
+#                                                 kwindowsystem_mac.cpp
 # FIXME: adjust kwindowinfo_mac to inherit from KWindowInfoPrivate
 #                                                 kwindowinfo_mac.cpp
 )
@@ -42,7 +43,7 @@ endif ()
 
 if (WIN32)
    set(kwindowsystem_SRCS ${kwindowsystem_SRCS} kkeyserver_win.cpp
-                                                kwindowsystem_win.cpp
+#                                                 kwindowsystem_win.cpp
 # FIXME: adjust kwindowinfo_win to inherit from KWindowInfoPrivate
 #                                                 kwindowinfo_win.cpp
 )
diff --git a/src/kwindowinfo.cpp b/src/kwindowinfo.cpp
index c706b29b306b65c992a178d490819b76e1aeca84..3095932f7a3ed43076d246dfbd68f28e9089e4d7 100644
--- a/src/kwindowinfo.cpp
+++ b/src/kwindowinfo.cpp
@@ -20,6 +20,9 @@
 #include "kwindowinfo.h"
 #include "kwindowinfo_p.h"
 #include "kwindowsystem.h"
+
+#include <config-kwindowsystem.h>
+
 #if KWINDOWSYSTEM_HAVE_X11
 #include "kwindowinfo_p_x11.h"
 #else
diff --git a/src/kwindowsystem.h b/src/kwindowsystem.h
index d288e1ab7c49f68482c94285c2aab695f08f3524..c4e29d341d7d7d8fdae119bf52599a51fa8ccb41 100644
--- a/src/kwindowsystem.h
+++ b/src/kwindowsystem.h
@@ -29,7 +29,6 @@
 #include <QWidgetList> //For WId
 #include <netwm_def.h>
 #include <kwindowinfo.h>
-#include <config-kwindowsystem.h>
 
 class KWindowSystemPrivate;
 
@@ -81,7 +80,7 @@ public:
       * \endcode
       * @return the list of all toplevel windows
       */
-    static const QList<WId> &windows();
+    static QList<WId> windows();
 
     /**
      * Test to see if @p id still managed at present.
@@ -228,7 +227,6 @@ public:
      * that belongs to another application.
      */
     static void setMainWindow(QWidget *subwindow, WId mainwindow);
-#if KWINDOWSYSTEM_HAVE_X11
 #ifndef KWINDOWSYSTEM_NO_DEPRECATED
     /**
      * Returns the WM_TRANSIENT_FOR property for the given window, i.e. the mainwindow
@@ -246,7 +244,6 @@ public:
      */
     KWINDOWSYSTEM_DEPRECATED static WId groupLeader(WId window);
 #endif
-#endif
     /**
      * Returns an icon for window @p win.
      *
@@ -498,7 +495,6 @@ public:
      */
     static void setBlockingCompositing(WId window, bool active);
 
-#if KWINDOWSYSTEM_HAVE_X11
     /**
      * @internal
      * Returns true if viewports are mapped to virtual desktops.
@@ -526,7 +522,6 @@ public:
      * valid desktop area.
      */
     static QPoint constrainViewportRelativePosition(const QPoint &pos);
-#endif
 
 Q_SIGNALS:
 
@@ -638,15 +633,6 @@ private:
     friend class KWindowSystemStaticContainer;
 
     KWindowSystem() {}
-
-    enum { INFO_BASIC = 1, // desktop info, not per-window
-           INFO_WINDOWS = 2
-         }; // also per-window info
-
-    static void init(int);
-
-    friend class KWindowSystemPrivate;
-    static KWindowSystemPrivate *s_d_func();
 };
 
 #endif
diff --git a/src/kwindowsystem.cpp b/src/kwindowsystem.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..db9df885c484a989fdfbb91f7a78aec15c970c88
--- /dev/null
+++ b/src/kwindowsystem.cpp
@@ -0,0 +1,593 @@
+/*
+ *   Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+ *
+ *   This library is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU Lesser General Public
+ *   License as published by the Free Software Foundation; either
+ *   version 2.1 of the License, or (at your option) version 3, or any
+ *   later version accepted by the membership of KDE e.V. (or its
+ *   successor approved by the membership of KDE e.V.), which shall
+ *   act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *   Lesser General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Lesser General Public
+ *   License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include "kwindowsystem.h"
+#include "kwindowsystem_p.h"
+
+#include <config-kwindowsystem.h>
+
+#if KWINDOWSYSTEM_HAVE_X11
+#include "kwindowsystem_p_x11.h"
+#else
+typedef KWindowSystemPrivateDummy KWindowSystemPrivateX11;
+#endif
+
+#include <QGuiApplication>
+#include <QMetaMethod>
+#include <QPixmap>
+#include <QWidget>
+#include <QWindow>
+
+class KWindowSystemStaticContainer
+{
+public:
+    KWindowSystemStaticContainer() {
+#if KWINDOWSYSTEM_HAVE_X11
+        if (d.isNull() && (QGuiApplication::platformName() == QStringLiteral("xcb"))) {
+            d.reset(new KWindowSystemPrivateX11());
+            platform = XcbPlatform;
+        }
+#endif
+        if (d.isNull()) {
+            d.reset(new KWindowSystemPrivateDummy());
+            platform = DummyPlatform;
+        }
+    }
+    KWindowSystem kwm;
+    QScopedPointer<KWindowSystemPrivate> d;
+    enum PlatformImplementation {
+        XcbPlatform,
+        DummyPlatform
+    };
+    PlatformImplementation platform;
+};
+
+Q_GLOBAL_STATIC(KWindowSystemStaticContainer, g_kwmInstanceContainer)
+
+QList<WId> KWindowSystemPrivateDummy::windows()
+{
+    return QList<WId>();
+}
+
+QList<WId> KWindowSystemPrivateDummy::stackingOrder()
+{
+    return QList<WId>();
+}
+
+WId KWindowSystemPrivateDummy::activeWindow()
+{
+    return 0;
+}
+
+void KWindowSystemPrivateDummy::activateWindow(WId win, long time)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(time)
+}
+
+void KWindowSystemPrivateDummy::forceActiveWindow(WId win, long time)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(time)
+}
+
+void KWindowSystemPrivateDummy::demandAttention(WId win, bool set)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(set)
+}
+
+bool KWindowSystemPrivateDummy::compositingActive()
+{
+    return false;
+}
+
+int KWindowSystemPrivateDummy::currentDesktop()
+{
+    return 0;
+}
+
+int KWindowSystemPrivateDummy::numberOfDesktops()
+{
+    return 0;
+}
+
+void KWindowSystemPrivateDummy::setCurrentDesktop(int desktop)
+{
+    Q_UNUSED(desktop)
+}
+
+void KWindowSystemPrivateDummy::setOnAllDesktops(WId win, bool b)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(b)
+}
+
+void KWindowSystemPrivateDummy::setOnDesktop(WId win, int desktop)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(desktop)
+}
+
+#ifndef KWINDOWSYSTEM_NO_DEPRECATED
+WId KWindowSystemPrivateDummy::transientFor(WId window)
+{
+    Q_UNUSED(window)
+    return 0;
+}
+
+WId KWindowSystemPrivateDummy::groupLeader(WId window)
+{
+    Q_UNUSED(window)
+    return 0;
+}
+#endif
+
+QPixmap KWindowSystemPrivateDummy::icon(WId win, int width, int height, bool scale, int flags)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(width)
+    Q_UNUSED(height)
+    Q_UNUSED(scale)
+    Q_UNUSED(flags)
+    return QPixmap();
+}
+
+void KWindowSystemPrivateDummy::setIcons(WId win, const QPixmap &icon, const QPixmap &miniIcon)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(icon)
+    Q_UNUSED(miniIcon)
+}
+
+void KWindowSystemPrivateDummy::setType(WId win, NET::WindowType windowType)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(windowType)
+}
+
+void KWindowSystemPrivateDummy::setState(WId win, NET::States state)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(state)
+}
+
+void KWindowSystemPrivateDummy::clearState(WId win, NET::States state)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(state)
+}
+
+void KWindowSystemPrivateDummy::minimizeWindow(WId win, bool animation)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(animation)
+}
+
+void KWindowSystemPrivateDummy::unminimizeWindow(WId win, bool animation)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(animation)
+}
+
+void KWindowSystemPrivateDummy::raiseWindow(WId win)
+{
+    Q_UNUSED(win)
+}
+
+void KWindowSystemPrivateDummy::lowerWindow(WId win)
+{
+    Q_UNUSED(win)
+}
+
+bool KWindowSystemPrivateDummy::icccmCompliantMappingState()
+{
+    return false;
+}
+
+QRect KWindowSystemPrivateDummy::workArea(int desktop)
+{
+    Q_UNUSED(desktop)
+    return QRect();
+}
+
+QRect KWindowSystemPrivateDummy::workArea(const QList<WId> &excludes, int desktop)
+{
+    Q_UNUSED(excludes)
+    Q_UNUSED(desktop)
+    return QRect();
+}
+
+QString KWindowSystemPrivateDummy::desktopName(int desktop)
+{
+    Q_UNUSED(desktop)
+    return QString();
+}
+
+void KWindowSystemPrivateDummy::setDesktopName(int desktop, const QString &name)
+{
+    Q_UNUSED(desktop)
+    Q_UNUSED(name)
+}
+
+bool KWindowSystemPrivateDummy::showingDesktop()
+{
+    return false;
+}
+
+void KWindowSystemPrivateDummy::setUserTime(WId win, long time)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(time)
+}
+
+void KWindowSystemPrivateDummy::setExtendedStrut(WId win, int left_width, int left_start, int left_end,
+                                                 int right_width, int right_start, int right_end, int top_width, int top_start, int top_end,
+                                                 int bottom_width, int bottom_start, int bottom_end)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(left_width)
+    Q_UNUSED(left_start)
+    Q_UNUSED(left_end)
+    Q_UNUSED(right_width)
+    Q_UNUSED(right_start)
+    Q_UNUSED(right_end)
+    Q_UNUSED(top_width)
+    Q_UNUSED(top_start)
+    Q_UNUSED(top_end)
+    Q_UNUSED(bottom_width)
+    Q_UNUSED(bottom_start)
+    Q_UNUSED(bottom_end)
+}
+
+void KWindowSystemPrivateDummy::setStrut(WId win, int left, int right, int top, int bottom)
+{
+    Q_UNUSED(win)
+    Q_UNUSED(left)
+    Q_UNUSED(right)
+    Q_UNUSED(top)
+    Q_UNUSED(bottom)
+}
+
+bool KWindowSystemPrivateDummy::allowedActionsSupported()
+{
+    return false;
+}
+
+QString KWindowSystemPrivateDummy::readNameProperty(WId window, unsigned long atom)
+{
+    Q_UNUSED(window)
+    Q_UNUSED(atom)
+    return QString();
+}
+
+void KWindowSystemPrivateDummy::allowExternalProcessWindowActivation(int pid)
+{
+    Q_UNUSED(pid)
+}
+
+void KWindowSystemPrivateDummy::setBlockingCompositing(WId window, bool active)
+{
+    Q_UNUSED(window)
+    Q_UNUSED(active)
+}
+
+bool KWindowSystemPrivateDummy::mapViewport()
+{
+    return false;
+}
+
+int KWindowSystemPrivateDummy::viewportToDesktop(const QPoint &pos)
+{
+    Q_UNUSED(pos)
+    return 0;
+}
+
+int KWindowSystemPrivateDummy::viewportWindowToDesktop(const QRect &r)
+{
+    Q_UNUSED(r)
+    return 0;
+}
+
+QPoint KWindowSystemPrivateDummy::desktopToViewport(int desktop, bool absolute)
+{
+    Q_UNUSED(desktop)
+    Q_UNUSED(absolute)
+    return QPoint();
+}
+
+QPoint KWindowSystemPrivateDummy::constrainViewportRelativePosition(const QPoint &pos)
+{
+    Q_UNUSED(pos)
+    return QPoint();
+}
+
+void KWindowSystemPrivateDummy::connectNotify(const QMetaMethod &signal)
+{
+    Q_UNUSED(signal)
+}
+
+KWindowSystem *KWindowSystem::self()
+{
+    return &(g_kwmInstanceContainer()->kwm);
+}
+
+#ifndef Q_CC_MSVC
+#define DELEGATE(name, args...) \
+    switch (g_kwmInstanceContainer()->platform) { \
+    case KWindowSystemStaticContainer::XcbPlatform: \
+        return static_cast<KWindowSystemPrivateX11*>(g_kwmInstanceContainer()->d.data())->name(args); \
+    case KWindowSystemStaticContainer::DummyPlatform: \
+    default: \
+        return static_cast<KWindowSystemPrivateDummy*>(g_kwmInstanceContainer()->d.data())->name(args); \
+    }
+#else
+#define DELEGATE(name, ...) \
+    static_cast<KWindowSystemPrivateDummy*>(g_kwmInstanceContainer()->d.data())->name(__VA_ARGS__);
+#endif
+
+void KWindowSystem::connectNotify(const QMetaMethod &signal)
+{
+    QObject::connectNotify(signal);
+    DELEGATE(connectNotify, signal);
+}
+
+QList<WId> KWindowSystem::windows()
+{
+    DELEGATE(windows, );
+}
+
+#ifndef KWINDOWSYSTEM_NO_DEPRECATED
+KWindowInfo KWindowSystem::windowInfo(WId win, unsigned long properties, unsigned long properties2)
+{
+    return KWindowInfo(win, NET::Properties(uint(properties)), NET::Properties2(uint(properties2)));
+}
+#endif
+
+bool KWindowSystem::hasWId(WId w)
+{
+    return windows().contains(w);
+}
+
+QList<WId> KWindowSystem::stackingOrder()
+{;
+    DELEGATE(stackingOrder, );
+}
+
+int KWindowSystem::currentDesktop()
+{
+    DELEGATE(currentDesktop, );
+}
+
+int KWindowSystem::numberOfDesktops()
+{
+    DELEGATE(numberOfDesktops, );
+}
+
+void KWindowSystem::setCurrentDesktop(int desktop)
+{
+    DELEGATE(setCurrentDesktop, desktop);
+}
+
+void KWindowSystem::setOnAllDesktops(WId win, bool b)
+{
+    DELEGATE(setOnAllDesktops, win, b);
+}
+
+void KWindowSystem::setOnDesktop(WId win, int desktop)
+{
+    DELEGATE(setOnDesktop, win, desktop);
+}
+
+WId KWindowSystem::activeWindow()
+{
+    DELEGATE(activeWindow, );
+}
+
+void KWindowSystem::activateWindow(WId win, long time)
+{
+    DELEGATE(activateWindow, win, time);
+}
+
+void KWindowSystem::forceActiveWindow(WId win, long time)
+{
+    DELEGATE(forceActiveWindow, win, time);
+}
+
+void KWindowSystem::demandAttention(WId win, bool set)
+{
+    DELEGATE(demandAttention, win, set);
+}
+
+#ifndef KWINDOWSYSTEM_NO_DEPRECATED
+WId KWindowSystem::transientFor(WId win)
+{
+    DELEGATE(transientFor, win);
+}
+#endif
+
+void KWindowSystem::setMainWindow(QWidget *subWidget, WId mainWindowId)
+{
+    // Set the WA_NativeWindow attribute to force the creation of the QWindow.
+    // Without this QWidget::windowHandle() returns 0.
+    subWidget->setAttribute(Qt::WA_NativeWindow, true);
+    QWindow *subWindow = subWidget->windowHandle();
+    Q_ASSERT(subWindow);
+
+    QWindow *mainWindow = QWindow::fromWinId(mainWindowId);
+    // mainWindow is not the child of any object, so make sure it gets deleted at some point
+    connect(subWidget, &QObject::destroyed, mainWindow, &QObject::deleteLater);
+    subWindow->setTransientParent(mainWindow);
+}
+
+#ifndef KWINDOWSYSTEM_NO_DEPRECATED
+WId KWindowSystem::groupLeader(WId win)
+{
+    DELEGATE(groupLeader, win);
+}
+#endif
+
+QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale)
+{
+    return icon(win, width, height, scale, NETWM | WMHints | ClassHint | XApp);
+}
+
+QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale, int flags)
+{
+    DELEGATE(icon, win, width, height, scale, flags);
+}
+
+void KWindowSystem::setIcons(WId win, const QPixmap &icon, const QPixmap &miniIcon)
+{
+    DELEGATE(setIcons, win, icon, miniIcon);
+}
+
+void KWindowSystem::setType(WId win, NET::WindowType windowType)
+{
+    DELEGATE(setType, win, windowType);
+}
+
+void KWindowSystem::setState(WId win, NET::States state)
+{
+    DELEGATE(setState, win, state);
+}
+
+void KWindowSystem::clearState(WId win, NET::States state)
+{
+    DELEGATE(clearState, win, state);
+}
+
+void KWindowSystem::minimizeWindow(WId win, bool animation)
+{
+    DELEGATE(minimizeWindow, win, animation);
+}
+
+void KWindowSystem::unminimizeWindow(WId win, bool animation)
+{
+    DELEGATE(unminimizeWindow, win, animation);
+}
+
+void KWindowSystem::raiseWindow(WId win)
+{
+    DELEGATE(raiseWindow, win);
+}
+
+void KWindowSystem::lowerWindow(WId win)
+{
+    DELEGATE(lowerWindow, win);
+}
+
+bool KWindowSystem::compositingActive()
+{
+    DELEGATE(compositingActive, );
+}
+
+QRect KWindowSystem::workArea(int desktop)
+{
+    DELEGATE(workArea, desktop);
+}
+
+QRect KWindowSystem::workArea(const QList<WId> &exclude, int desktop)
+{
+    DELEGATE(workArea, exclude, desktop);
+}
+
+QString KWindowSystem::desktopName(int desktop)
+{
+    DELEGATE(desktopName, desktop);
+}
+
+void KWindowSystem::setDesktopName(int desktop, const QString &name)
+{
+    DELEGATE(setDesktopName, desktop, name);
+}
+
+bool KWindowSystem::showingDesktop()
+{
+    DELEGATE(showingDesktop, );
+}
+
+void KWindowSystem::setUserTime(WId win, long time)
+{
+    DELEGATE(setUserTime, win, time);
+}
+
+void KWindowSystem::setExtendedStrut(WId win, int left_width, int left_start, int left_end,
+                                     int right_width, int right_start, int right_end, int top_width, int top_start, int top_end,
+                                     int bottom_width, int bottom_start, int bottom_end)
+{
+    DELEGATE(setExtendedStrut, win, left_width, left_start, left_end,
+                                 right_width, right_start, right_end, top_width, top_start, top_end,
+                                 bottom_width, bottom_start, bottom_end);
+}
+
+void KWindowSystem::setStrut(WId win, int left, int right, int top, int bottom)
+{
+    DELEGATE(setStrut, win, left, right, top, bottom);
+}
+
+bool KWindowSystem::icccmCompliantMappingState()
+{
+    DELEGATE(icccmCompliantMappingState, );
+}
+
+bool KWindowSystem::allowedActionsSupported()
+{
+    DELEGATE(allowedActionsSupported, );
+}
+
+QString KWindowSystem::readNameProperty(WId win, unsigned long atom)
+{
+    DELEGATE(readNameProperty, win, atom);
+}
+
+void KWindowSystem::allowExternalProcessWindowActivation(int pid)
+{
+    DELEGATE(allowExternalProcessWindowActivation, pid);
+}
+
+void KWindowSystem::setBlockingCompositing(WId window, bool active)
+{
+    DELEGATE(setBlockingCompositing, window, active);
+}
+
+bool KWindowSystem::mapViewport()
+{
+    DELEGATE(mapViewport, );
+}
+
+int KWindowSystem::viewportToDesktop(const QPoint &p)
+{
+    DELEGATE(viewportToDesktop, p);
+}
+
+int KWindowSystem::viewportWindowToDesktop(const QRect &r)
+{
+    DELEGATE(viewportWindowToDesktop, r);
+}
+
+QPoint KWindowSystem::desktopToViewport(int desktop, bool absolute)
+{
+    DELEGATE(desktopToViewport, desktop, absolute);
+}
+
+QPoint KWindowSystem::constrainViewportRelativePosition(const QPoint &pos)
+{
+    DELEGATE(constrainViewportRelativePosition, pos);
+}
diff --git a/src/kwindowsystem_p.h b/src/kwindowsystem_p.h
new file mode 100644
index 0000000000000000000000000000000000000000..57cd7051310bd0cdb964bf496921e66751645c1b
--- /dev/null
+++ b/src/kwindowsystem_p.h
@@ -0,0 +1,83 @@
+/*
+ *   Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+ *
+ *   This library is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU Lesser General Public
+ *   License as published by the Free Software Foundation; either
+ *   version 2.1 of the License, or (at your option) version 3, or any
+ *   later version accepted by the membership of KDE e.V. (or its
+ *   successor approved by the membership of KDE e.V.), which shall
+ *   act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *   Lesser General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Lesser General Public
+ *   License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef KWINDOWSYSTEM_P_H
+#define KWINDOWSYSTEM_P_H
+
+#include "netwm_def.h"
+#include <QWidgetList> //For WId
+
+class KWindowSystemPrivate : public NET
+{
+public:
+};
+
+class KWindowSystemPrivateDummy : public KWindowSystemPrivate
+{
+public:
+    QList<WId> windows();
+    QList<WId> stackingOrder();
+    WId activeWindow();
+    void activateWindow(WId win, long time = 0);
+    void forceActiveWindow(WId win, long time = 0);
+    void demandAttention(WId win, bool set = true);
+    bool compositingActive();
+    int currentDesktop();
+    int numberOfDesktops();
+    void setCurrentDesktop(int desktop);
+    void setOnAllDesktops(WId win, bool b);
+    void setOnDesktop(WId win, int desktop);
+#ifndef KWINDOWSYSTEM_NO_DEPRECATED
+    WId transientFor(WId window);
+    WId groupLeader(WId window);
+#endif
+    QPixmap icon(WId win, int width, int height, bool scale, int flags);
+    void setIcons(WId win, const QPixmap &icon, const QPixmap &miniIcon);
+    void setType(WId win, NET::WindowType windowType);
+    void setState(WId win, NET::States state);
+    void clearState(WId win, NET::States state);
+    void minimizeWindow(WId win, bool animation = true);
+    void unminimizeWindow(WId win, bool animation = true);
+    void raiseWindow(WId win);
+    void lowerWindow(WId win);
+    bool icccmCompliantMappingState();
+    QRect workArea(int desktop = - 1);
+    QRect workArea(const QList<WId> &excludes, int desktop = -1);
+    QString desktopName(int desktop);
+    void setDesktopName(int desktop, const QString &name);
+    bool showingDesktop();
+    void setUserTime(WId win, long time);
+    void setExtendedStrut(WId win, int left_width, int left_start, int left_end,
+                          int right_width, int right_start, int right_end, int top_width, int top_start, int top_end,
+                          int bottom_width, int bottom_start, int bottom_end);
+    void setStrut(WId win, int left, int right, int top, int bottom);
+    bool allowedActionsSupported();
+    QString readNameProperty(WId window, unsigned long atom);
+    void allowExternalProcessWindowActivation(int pid = -1);
+    void setBlockingCompositing(WId window, bool active);
+    bool mapViewport();
+    int viewportToDesktop(const QPoint &pos);
+    int viewportWindowToDesktop(const QRect &r);
+    QPoint desktopToViewport(int desktop, bool absolute);
+    QPoint constrainViewportRelativePosition(const QPoint &pos);
+
+    void connectNotify(const QMetaMethod &signal);
+};
+
+#endif
diff --git a/src/kwindowsystem_p_x11.h b/src/kwindowsystem_p_x11.h
new file mode 100644
index 0000000000000000000000000000000000000000..ba73c1326e1a0e5298196198b29dc93393b89358
--- /dev/null
+++ b/src/kwindowsystem_p_x11.h
@@ -0,0 +1,132 @@
+/*
+ *   Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
+ *
+ *   This library is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU Lesser General Public
+ *   License as published by the Free Software Foundation; either
+ *   version 2.1 of the License, or (at your option) version 3, or any
+ *   later version accepted by the membership of KDE e.V. (or its
+ *   successor approved by the membership of KDE e.V.), which shall
+ *   act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *   Lesser General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Lesser General Public
+ *   License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef KWINDOWSYSTEM_P_X11_H
+#define KWINDOWSYSTEM_P_X11_H
+
+#include "kwindowsystem_p.h"
+#include "netwm.h"
+
+#include <QAbstractNativeEventFilter>
+
+class NETEventFilter;
+
+class KWindowSystemPrivateX11 : public KWindowSystemPrivate
+{
+public:
+    QList<WId> windows();
+    QList<WId> stackingOrder();
+    WId activeWindow();
+    void activateWindow(WId win, long time = 0);
+    void forceActiveWindow(WId win, long time = 0);
+    void demandAttention(WId win, bool set = true);
+    bool compositingActive();
+    int currentDesktop();
+    int numberOfDesktops();
+    void setCurrentDesktop(int desktop);
+    void setOnAllDesktops(WId win, bool b);
+    void setOnDesktop(WId win, int desktop);
+#ifndef KWINDOWSYSTEM_NO_DEPRECATED
+    WId transientFor(WId window);
+    WId groupLeader(WId window);
+#endif
+    QPixmap icon(WId win, int width, int height, bool scale, int flags);
+    void setIcons(WId win, const QPixmap &icon, const QPixmap &miniIcon);
+    void setType(WId win, NET::WindowType windowType);
+    void setState(WId win, NET::States state);
+    void clearState(WId win, NET::States state);
+    void minimizeWindow(WId win, bool animation = true);
+    void unminimizeWindow(WId win, bool animation = true);
+    void raiseWindow(WId win);
+    void lowerWindow(WId win);
+    bool icccmCompliantMappingState();
+    QRect workArea(int desktop = - 1);
+    QRect workArea(const QList<WId> &excludes, int desktop = -1);
+    QString desktopName(int desktop);
+    void setDesktopName(int desktop, const QString &name);
+    bool showingDesktop();
+    void setUserTime(WId win, long time);
+    void setExtendedStrut(WId win, int left_width, int left_start, int left_end,
+                          int right_width, int right_start, int right_end, int top_width, int top_start, int top_end,
+                          int bottom_width, int bottom_start, int bottom_end);
+    void setStrut(WId win, int left, int right, int top, int bottom);
+    bool allowedActionsSupported();
+    QString readNameProperty(WId window, unsigned long atom);
+    void allowExternalProcessWindowActivation(int pid = -1);
+    void setBlockingCompositing(WId window, bool active);
+    bool mapViewport();
+    int viewportToDesktop(const QPoint &pos);
+    int viewportWindowToDesktop(const QRect &r);
+    QPoint desktopToViewport(int desktop, bool absolute);
+    QPoint constrainViewportRelativePosition(const QPoint &pos);
+
+    void connectNotify(const QMetaMethod &signal);
+
+    enum FilterInfo {
+        INFO_BASIC = 1,  // desktop info, not per-window
+        INFO_WINDOWS = 2 // also per-window info
+    };
+
+private:
+    void init(FilterInfo info);
+    NETEventFilter *s_d_func() {
+        return d.data();
+    }
+    QScopedPointer<NETEventFilter> d;
+};
+
+class NETEventFilter
+    : public QWidget, public NETRootInfo, public QAbstractNativeEventFilter
+{
+public:
+    NETEventFilter(KWindowSystemPrivateX11::FilterInfo _what);
+    void activate();
+    QList<WId> windows;
+    QList<WId> stackingOrder;
+
+    struct StrutData {
+        StrutData(WId window_, const NETStrut &strut_, int desktop_)
+            : window(window_), strut(strut_), desktop(desktop_) {}
+        WId window;
+        NETStrut strut;
+        int desktop;
+    };
+    QList<StrutData> strutWindows;
+    QList<WId> possibleStrutWindows;
+    bool strutSignalConnected;
+    bool compositingEnabled;
+    bool haveXfixes;
+    KWindowSystemPrivateX11::FilterInfo what;
+    int xfixesEventBase;
+    bool mapViewport();
+
+    virtual bool nativeEventFilter(const QByteArray &eventType, void *message, long int *result) Q_DECL_OVERRIDE;
+
+    void updateStackingOrder();
+    bool removeStrutWindow(WId);
+
+protected:
+    virtual void addClient(xcb_window_t) Q_DECL_OVERRIDE;
+    virtual void removeClient(xcb_window_t) Q_DECL_OVERRIDE;
+
+private:
+    bool nativeEventFilter(xcb_generic_event_t *event);
+};
+
+#endif
diff --git a/src/kwindowsystem_x11.cpp b/src/kwindowsystem_x11.cpp
index 8d841cbcec41dc2d4df381338803902badf3f35e..95c396b65ae0a24db6a276b9b72f4175bb7c14cc 100644
--- a/src/kwindowsystem_x11.cpp
+++ b/src/kwindowsystem_x11.cpp
@@ -2,6 +2,7 @@
     This file is part of the KDE libraries
     Copyright (C) 1999 Matthias Ettrich (ettrich@kde.org)
     Copyright (C) 2007 Lubos Lunak (l.lunak@kde.org)
+    Copyright 2014 Martin Gräßlin <mgraesslin@kde.org>
 
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Library General Public
@@ -20,14 +21,13 @@
 */
 
 #include "kwindowsystem.h"
+#include "kwindowsystem_p_x11.h"
 
 #include <QDebug>
 #include <kxerrorhandler_p.h>
 #include <kxutils_p.h>
-#include <netwm.h>
 #include <fixx11h.h>
 
-#include <QAbstractNativeEventFilter>
 #include <QApplication>
 #include <QBitmap>
 #include <QDesktopWidget>
@@ -47,16 +47,6 @@
 #include <X11/extensions/Xfixes.h>
 #endif
 
-class KWindowSystemStaticContainer
-{
-public:
-    KWindowSystemStaticContainer() : d(0) {}
-    KWindowSystem kwm;
-    KWindowSystemPrivate *d;
-};
-
-Q_GLOBAL_STATIC(KWindowSystemStaticContainer, g_kwmInstanceContainer)
-
 static Atom net_wm_cm;
 static void create_atoms(Display *dpy = QX11Info::display());
 
@@ -86,49 +76,11 @@ static unsigned long desktop_properties[ 2 ] = { NET::ClientList | NET::ClientLi
                                                  NET::WM2ShowingDesktop
                                                };
 
-class KWindowSystemPrivate
-    : public QWidget, public NETRootInfo, public QAbstractNativeEventFilter
-{
-public:
-    KWindowSystemPrivate(int _what);
-    void activate();
-    QList<WId> windows;
-    QList<WId> stackingOrder;
-
-    struct StrutData {
-        StrutData(WId window_, const NETStrut &strut_, int desktop_)
-            : window(window_), strut(strut_), desktop(desktop_) {}
-        StrutData() {} // for QValueList to be happy
-        WId window;
-        NETStrut strut;
-        int desktop;
-    };
-    QList<StrutData> strutWindows;
-    QList<WId> possibleStrutWindows;
-    bool strutSignalConnected;
-    bool compositingEnabled;
-    bool haveXfixes;
-    int what;
-    int xfixesEventBase;
-    bool mapViewport();
-
-    virtual bool nativeEventFilter(const QByteArray &eventType, void *message, long int *result) Q_DECL_OVERRIDE;
-
-    void updateStackingOrder();
-    bool removeStrutWindow(WId);
-
-protected:
-    virtual void addClient(xcb_window_t) Q_DECL_OVERRIDE;
-    virtual void removeClient(xcb_window_t) Q_DECL_OVERRIDE;
-
-private:
-    bool nativeEventFilter(xcb_generic_event_t *event);
-};
-
-KWindowSystemPrivate::KWindowSystemPrivate(int _what)
+
+NETEventFilter::NETEventFilter(KWindowSystemPrivateX11::FilterInfo _what)
     : QWidget(0),
       NETRootInfo(QX11Info::connection(),
-                  _what >= KWindowSystem::INFO_WINDOWS ? windows_properties : desktop_properties,
+                  _what >= KWindowSystemPrivateX11::INFO_WINDOWS ? windows_properties : desktop_properties,
                   2, -1, false),
       QAbstractNativeEventFilter(),
       strutSignalConnected(false),
@@ -152,13 +104,13 @@ KWindowSystemPrivate::KWindowSystemPrivate(int _what)
 }
 
 // not virtual, but it's called directly only from init()
-void KWindowSystemPrivate::activate()
+void NETEventFilter::activate()
 {
     NETRootInfo::activate();
     updateStackingOrder();
 }
 
-bool KWindowSystemPrivate::nativeEventFilter(const QByteArray &eventType, void *message, long int *result)
+bool NETEventFilter::nativeEventFilter(const QByteArray &eventType, void *message, long int *result)
 {
     Q_UNUSED(result)
     if (eventType != "xcb_generic_event_t") {
@@ -168,7 +120,7 @@ bool KWindowSystemPrivate::nativeEventFilter(const QByteArray &eventType, void *
     return nativeEventFilter(reinterpret_cast<xcb_generic_event_t *>(message));
 }
 
-bool KWindowSystemPrivate::nativeEventFilter(xcb_generic_event_t *ev)
+bool NETEventFilter::nativeEventFilter(xcb_generic_event_t *ev)
 {
     KWindowSystem *s_q = KWindowSystem::self();
     const uint8_t eventType = ev->response_type & ~0x80;
@@ -290,7 +242,7 @@ bool KWindowSystemPrivate::nativeEventFilter(xcb_generic_event_t *ev)
     return false;
 }
 
-bool KWindowSystemPrivate::removeStrutWindow(WId w)
+bool NETEventFilter::removeStrutWindow(WId w)
 {
     for (QList< StrutData >::Iterator it = strutWindows.begin();
             it != strutWindows.end();
@@ -302,7 +254,7 @@ bool KWindowSystemPrivate::removeStrutWindow(WId w)
     return false;
 }
 
-void KWindowSystemPrivate::updateStackingOrder()
+void NETEventFilter::updateStackingOrder()
 {
     stackingOrder.clear();
     for (int i = 0; i <  clientListStackingCount(); i++) {
@@ -310,11 +262,11 @@ void KWindowSystemPrivate::updateStackingOrder()
     }
 }
 
-void KWindowSystemPrivate::addClient(xcb_window_t w)
+void NETEventFilter::addClient(xcb_window_t w)
 {
     KWindowSystem *s_q = KWindowSystem::self();
 
-    if ((what >= KWindowSystem::INFO_WINDOWS)) {
+    if ((what >= KWindowSystemPrivateX11::INFO_WINDOWS)) {
         xcb_connection_t *c = QX11Info::connection();
         QScopedPointer<xcb_get_window_attributes_reply_t, QScopedPointerPodDeleter> attr(xcb_get_window_attributes_reply(c,
                 xcb_get_window_attributes_unchecked(c, w), Q_NULLPTR));
@@ -346,7 +298,7 @@ void KWindowSystemPrivate::addClient(xcb_window_t w)
     }
 }
 
-void KWindowSystemPrivate::removeClient(xcb_window_t w)
+void NETEventFilter::removeClient(xcb_window_t w)
 {
     KWindowSystem *s_q = KWindowSystem::self();
 
@@ -367,7 +319,7 @@ void KWindowSystemPrivate::removeClient(xcb_window_t w)
     }
 }
 
-bool KWindowSystemPrivate::mapViewport()
+bool NETEventFilter::mapViewport()
 {
 // compiz claims support even though it doesn't use virtual desktops :(
 //    if( isSupported( NET::DesktopViewport ) && !isSupported( NET::NumberOfDesktops ))
@@ -437,20 +389,10 @@ static void sendClientMessageToRoot(Window w, Atom a, long x, long y = 0, long z
     XSendEvent(QX11Info::display(), QX11Info::appRootWindow(), False, mask, &ev);
 }
 
-KWindowSystem *KWindowSystem::self()
-{
-    return &(g_kwmInstanceContainer()->kwm);
-}
-
-KWindowSystemPrivate *KWindowSystem::s_d_func()
-{
-    return g_kwmInstanceContainer()->d;
-}
-
 // optimalization - create KWindowSystemPrivate only when needed and only for what is needed
-void KWindowSystem::connectNotify(const QMetaMethod &signal)
+void KWindowSystemPrivateX11::connectNotify(const QMetaMethod &signal)
 {
-    int what = INFO_BASIC;
+    FilterInfo what = INFO_BASIC;
     if (signal == QMetaMethod::fromSignal(&KWindowSystem::workAreaChanged)) {
         what = INFO_WINDOWS;
     } else if (signal == QMetaMethod::fromSignal(&KWindowSystem::strutChanged)) {
@@ -464,19 +406,17 @@ void KWindowSystem::connectNotify(const QMetaMethod &signal)
     }
 
     init(what);
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     if (!s_d->strutSignalConnected && signal == QMetaMethod::fromSignal(&KWindowSystem::strutChanged)) {
         s_d->strutSignalConnected = true;
     }
-
-    QObject::connectNotify(signal);
 }
 
 // WARNING
 // you have to call s_d_func() again after calling this function if you want a valid pointer!
-void KWindowSystem::init(int what)
+void KWindowSystemPrivateX11::init(FilterInfo what)
 {
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
 
     if (what >= INFO_WINDOWS) {
         what = INFO_WINDOWS;
@@ -484,42 +424,25 @@ void KWindowSystem::init(int what)
         what = INFO_BASIC;
     }
 
-    if (!s_d) {
-        g_kwmInstanceContainer()->d = new KWindowSystemPrivate(what); // invalidates s_d
-        g_kwmInstanceContainer()->d->activate();
-    } else if (s_d->what < what) {
-        delete s_d;
-        g_kwmInstanceContainer()->d = new KWindowSystemPrivate(what); // invalidates s_d
-        g_kwmInstanceContainer()->d->activate();
+    if (!s_d || s_d->what < what) {
+        d.reset(new NETEventFilter(what));
+        d->activate();
     }
 }
 
-const QList<WId> &KWindowSystem::windows()
+QList<WId> KWindowSystemPrivateX11::windows()
 {
     init(INFO_BASIC);
     return s_d_func()->windows;
 }
 
-#ifndef KWINDOWSYSTEM_NO_DEPRECATED
-KWindowInfo KWindowSystem::windowInfo(WId win, unsigned long properties, unsigned long properties2)
-{
-    return KWindowInfo(win, NET::Properties(uint(properties)), NET::Properties2(uint(properties2)));
-}
-#endif
-
-bool KWindowSystem::hasWId(WId w)
-{
-    init(INFO_BASIC);
-    return s_d_func()->windows.contains(w);
-}
-
-QList<WId> KWindowSystem::stackingOrder()
+QList<WId> KWindowSystemPrivateX11::stackingOrder()
 {
     init(INFO_BASIC);
     return s_d_func()->stackingOrder;
 }
 
-int KWindowSystem::currentDesktop()
+int KWindowSystemPrivateX11::currentDesktop()
 {
     if (!QX11Info::connection()) {
         return 1;
@@ -527,12 +450,12 @@ int KWindowSystem::currentDesktop()
 
     if (mapViewport()) {
         init(INFO_BASIC);
-        KWindowSystemPrivate *const s_d = s_d_func();
+        NETEventFilter *const s_d = s_d_func();
         NETPoint p = s_d->desktopViewport(s_d->currentDesktop(true));
         return viewportToDesktop(QPoint(p.x, p.y));
     }
 
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     if (s_d) {
         return s_d->currentDesktop(true);
     }
@@ -540,7 +463,7 @@ int KWindowSystem::currentDesktop()
     return info.currentDesktop(true);
 }
 
-int KWindowSystem::numberOfDesktops()
+int KWindowSystemPrivateX11::numberOfDesktops()
 {
     if (!QX11Info::connection()) {
         return 1;
@@ -548,12 +471,12 @@ int KWindowSystem::numberOfDesktops()
 
     if (mapViewport()) {
         init(INFO_BASIC);
-        KWindowSystemPrivate *const s_d = s_d_func();
+        NETEventFilter *const s_d = s_d_func();
         NETSize s = s_d->desktopGeometry();
         return s.width / qApp->desktop()->width() * s.height / qApp->desktop()->height();
     }
 
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     if (s_d) {
         return s_d->numberOfDesktops(true);
     }
@@ -561,11 +484,11 @@ int KWindowSystem::numberOfDesktops()
     return info.numberOfDesktops(true);
 }
 
-void KWindowSystem::setCurrentDesktop(int desktop)
+void KWindowSystemPrivateX11::setCurrentDesktop(int desktop)
 {
     if (mapViewport()) {
         init(INFO_BASIC);
-        KWindowSystemPrivate *const s_d = s_d_func();
+        NETEventFilter *const s_d = s_d_func();
         NETRootInfo info(QX11Info::connection(), 0);
         QPoint pos = desktopToViewport(desktop, true);
         NETPoint p;
@@ -578,7 +501,7 @@ void KWindowSystem::setCurrentDesktop(int desktop)
     info.setCurrentDesktop(desktop, true);
 }
 
-void KWindowSystem::setOnAllDesktops(WId win, bool b)
+void KWindowSystemPrivateX11::setOnAllDesktops(WId win, bool b)
 {
     if (mapViewport()) {
         if (b) {
@@ -597,7 +520,7 @@ void KWindowSystem::setOnAllDesktops(WId win, bool b)
     }
 }
 
-void KWindowSystem::setOnDesktop(WId win, int desktop)
+void KWindowSystemPrivateX11::setOnDesktop(WId win, int desktop)
 {
     if (mapViewport()) {
         if (desktop == NET::OnAllDesktops) {
@@ -630,7 +553,7 @@ void KWindowSystem::setOnDesktop(WId win, int desktop)
         y -= h / 2;
         p = constrainViewportRelativePosition(QPoint(x, y));
         int flags = (NET::FromTool << 12) | (0x03 << 8) | 10;     // from tool(?), x/y, static gravity
-        KWindowSystemPrivate *const s_d = s_d_func();
+        NETEventFilter *const s_d = s_d_func();
         s_d->moveResizeWindowRequest(win, flags, p.x(), p.y(), w, h);
         return;
     }
@@ -638,9 +561,9 @@ void KWindowSystem::setOnDesktop(WId win, int desktop)
     info.setDesktop(desktop, true);
 }
 
-WId KWindowSystem::activeWindow()
+WId KWindowSystemPrivateX11::activeWindow()
 {
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     if (s_d) {
         return s_d->activeWindow();
     }
@@ -648,7 +571,7 @@ WId KWindowSystem::activeWindow()
     return info.activeWindow();
 }
 
-void KWindowSystem::activateWindow(WId win, long time)
+void KWindowSystemPrivateX11::activateWindow(WId win, long time)
 {
     NETRootInfo info(QX11Info::connection(), 0);
     if (time == 0) {
@@ -658,7 +581,7 @@ void KWindowSystem::activateWindow(WId win, long time)
                          qApp->activeWindow() ? qApp->activeWindow()->winId() : 0);
 }
 
-void KWindowSystem::forceActiveWindow(WId win, long time)
+void KWindowSystemPrivateX11::forceActiveWindow(WId win, long time)
 {
     NETRootInfo info(QX11Info::connection(), 0);
     if (time == 0) {
@@ -667,52 +590,33 @@ void KWindowSystem::forceActiveWindow(WId win, long time)
     info.setActiveWindow(win, NET::FromTool, time, 0);
 }
 
-void KWindowSystem::demandAttention(WId win, bool set)
+void KWindowSystemPrivateX11::demandAttention(WId win, bool set)
 {
     NETWinInfo info(QX11Info::connection(), win, QX11Info::appRootWindow(), NET::WMState);
     info.setState(set ? NET::DemandsAttention : NET::States(0), NET::DemandsAttention);
 }
 
 #ifndef KWINDOWSYSTEM_NO_DEPRECATED
-WId KWindowSystem::transientFor(WId win)
+WId KWindowSystemPrivateX11::transientFor(WId win)
 {
     KWindowInfo info(win, 0, NET::WM2TransientFor);
     return info.transientFor();
 }
 #endif
 
-void KWindowSystem::setMainWindow(QWidget *subWidget, WId mainWindowId)
-{
-    // Set the WA_NativeWindow attribute to force the creation of the QWindow.
-    // Without this QWidget::windowHandle() returns 0.
-    subWidget->setAttribute(Qt::WA_NativeWindow, true);
-    QWindow *subWindow = subWidget->windowHandle();
-    Q_ASSERT(subWindow);
-
-    QWindow *mainWindow = QWindow::fromWinId(mainWindowId);
-    // mainWindow is not the child of any object, so make sure it gets deleted at some point
-    connect(subWidget, &QObject::destroyed, mainWindow, &QObject::deleteLater);
-    subWindow->setTransientParent(mainWindow);
-}
-
 #ifndef KWINDOWSYSTEM_NO_DEPRECATED
-WId KWindowSystem::groupLeader(WId win)
+WId KWindowSystemPrivateX11::groupLeader(WId win)
 {
     KWindowInfo info(win, 0, NET::WM2GroupLeader);
     return info.groupLeader();
 }
 #endif
 
-QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale)
-{
-    return icon(win, width, height, scale, NETWM | WMHints | ClassHint | XApp);
-}
-
-QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale, int flags)
+QPixmap KWindowSystemPrivateX11::icon(WId win, int width, int height, bool scale, int flags)
 {
     KXErrorHandler handler; // ignore badwindow
     QPixmap result;
-    if (flags & NETWM) {
+    if (flags & KWindowSystem::NETWM) {
         NETWinInfo info(QX11Info::connection(), win, QX11Info::appRootWindow(), NET::WMIcon);
         NETIcon ni = info.icon(width, height);
         if (ni.data && ni.size.width > 0 && ni.size.height > 0) {
@@ -727,7 +631,7 @@ QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale, int flag
         }
     }
 
-    if (flags & WMHints) {
+    if (flags & KWindowSystem::WMHints) {
         Pixmap p = None;
         Pixmap p_mask = None;
 
@@ -765,7 +669,7 @@ QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale, int flag
         iconWidth = 48;
     }
 
-    if (flags & ClassHint) {
+    if (flags & KWindowSystem::ClassHint) {
         // Try to load the icon from the classhint if the app didn't specify
         // its own:
         if (result.isNull()) {
@@ -788,7 +692,7 @@ QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale, int flag
         }
     }
 
-    if (flags & XApp) {
+    if (flags & KWindowSystem::XApp) {
         // If the icon is still a null pixmap, load the icon for X applications
         // as a last resort:
         if (result.isNull()) {
@@ -804,7 +708,7 @@ QPixmap KWindowSystem::icon(WId win, int width, int height, bool scale, int flag
     return result;
 }
 
-void KWindowSystem::setIcons(WId win, const QPixmap &icon, const QPixmap &miniIcon)
+void KWindowSystemPrivateX11::setIcons(WId win, const QPixmap &icon, const QPixmap &miniIcon)
 {
     if (icon.isNull()) {
         return;
@@ -829,25 +733,25 @@ void KWindowSystem::setIcons(WId win, const QPixmap &icon, const QPixmap &miniIc
     info.setIcon(ni, false);
 }
 
-void KWindowSystem::setType(WId win, NET::WindowType windowType)
+void KWindowSystemPrivateX11::setType(WId win, NET::WindowType windowType)
 {
     NETWinInfo info(QX11Info::connection(), win, QX11Info::appRootWindow(), 0);
     info.setWindowType(windowType);
 }
 
-void KWindowSystem::setState(WId win, NET::States state)
+void KWindowSystemPrivateX11::setState(WId win, NET::States state)
 {
     NETWinInfo info(QX11Info::connection(), win, QX11Info::appRootWindow(), NET::WMState);
     info.setState(state, state);
 }
 
-void KWindowSystem::clearState(WId win, NET::States state)
+void KWindowSystemPrivateX11::clearState(WId win, NET::States state)
 {
     NETWinInfo info(QX11Info::connection(), win, QX11Info::appRootWindow(), NET::WMState);
     info.setState(0, state);
 }
 
-void KWindowSystem::minimizeWindow(WId win, bool animation)
+void KWindowSystemPrivateX11::minimizeWindow(WId win, bool animation)
 {
     if (!animation) {
         create_atoms();
@@ -856,7 +760,7 @@ void KWindowSystem::minimizeWindow(WId win, bool animation)
     XIconifyWindow(QX11Info::display(), win, QX11Info::appScreen());
 }
 
-void KWindowSystem::unminimizeWindow(WId win, bool animation)
+void KWindowSystemPrivateX11::unminimizeWindow(WId win, bool animation)
 {
     if (!animation) {
         create_atoms();
@@ -865,7 +769,7 @@ void KWindowSystem::unminimizeWindow(WId win, bool animation)
     XMapWindow(QX11Info::display(), win);
 }
 
-void KWindowSystem::raiseWindow(WId win)
+void KWindowSystemPrivateX11::raiseWindow(WId win)
 {
     NETRootInfo info(QX11Info::connection(), NET::Supported);
     if (info.isSupported(NET::WM2RestackWindow)) {
@@ -875,7 +779,7 @@ void KWindowSystem::raiseWindow(WId win)
     }
 }
 
-void KWindowSystem::lowerWindow(WId win)
+void KWindowSystemPrivateX11::lowerWindow(WId win)
 {
     NETRootInfo info(QX11Info::connection(), NET::Supported);
     if (info.isSupported(NET::WM2RestackWindow)) {
@@ -885,7 +789,7 @@ void KWindowSystem::lowerWindow(WId win)
     }
 }
 
-bool KWindowSystem::compositingActive()
+bool KWindowSystemPrivateX11::compositingActive()
 {
     if (QX11Info::display()) {
         init(INFO_BASIC);
@@ -904,7 +808,7 @@ bool KWindowSystem::compositingActive()
     }
 }
 
-QRect KWindowSystem::workArea(int desktop)
+QRect KWindowSystemPrivateX11::workArea(int desktop)
 {
     init(INFO_BASIC);
     int desk  = (desktop > 0 && desktop <= (int) s_d_func()->numberOfDesktops()) ? desktop : currentDesktop();
@@ -920,10 +824,10 @@ QRect KWindowSystem::workArea(int desktop)
     return QRect(r.pos.x, r.pos.y, r.size.width, r.size.height);
 }
 
-QRect KWindowSystem::workArea(const QList<WId> &exclude, int desktop)
+QRect KWindowSystemPrivateX11::workArea(const QList<WId> &exclude, int desktop)
 {
     init(INFO_WINDOWS);   // invalidates s_d_func's return value
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
 
     QRect all = QApplication::desktop()->geometry();
     QRect a = all;
@@ -943,7 +847,7 @@ QRect KWindowSystem::workArea(const QList<WId> &exclude, int desktop)
 // to repeatedly find out struts of all windows. Therefore strut values for strut
 // windows are cached here.
         NETStrut strut;
-        QList< KWindowSystemPrivate::StrutData >::Iterator it2 = s_d->strutWindows.begin();
+        auto it2 = s_d->strutWindows.begin();
         for (; it2 != s_d->strutWindows.end(); ++it2)
             if ((*it2).window == *it1) {
                 break;
@@ -960,7 +864,7 @@ QRect KWindowSystem::workArea(const QList<WId> &exclude, int desktop)
             NETWinInfo info(QX11Info::connection(), (*it1), QX11Info::appRootWindow(), NET::WMStrut | NET::WMDesktop);
             strut = info.strut();
             s_d->possibleStrutWindows.removeAll(*it1);
-            s_d->strutWindows.append(KWindowSystemPrivate::StrutData(*it1, info.strut(), info.desktop()));
+            s_d->strutWindows.append(NETEventFilter::StrutData(*it1, info.strut(), info.desktop()));
 
             if (!(info.desktop() == desktop || info.desktop() == NETWinInfo::OnAllDesktops)) {
                 continue;
@@ -988,10 +892,10 @@ QRect KWindowSystem::workArea(const QList<WId> &exclude, int desktop)
     return a;
 }
 
-QString KWindowSystem::desktopName(int desktop)
+QString KWindowSystemPrivateX11::desktopName(int desktop)
 {
     init(INFO_BASIC);
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
 
     bool isDesktopSane = (desktop > 0 && desktop <= (int) s_d->numberOfDesktops());
     const char *name = s_d->desktopName(isDesktopSane ? desktop : currentDesktop());
@@ -1000,12 +904,12 @@ QString KWindowSystem::desktopName(int desktop)
         return QString::fromUtf8(name);
     }
 
-    return tr("Desktop %1").arg(desktop);
+    return QObject::tr("Desktop %1").arg(desktop);
 }
 
-void KWindowSystem::setDesktopName(int desktop, const QString &name)
+void KWindowSystemPrivateX11::setDesktopName(int desktop, const QString &name)
 {
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
 
     if (desktop <= 0 || desktop > (int) numberOfDesktops()) {
         desktop = currentDesktop();
@@ -1020,19 +924,19 @@ void KWindowSystem::setDesktopName(int desktop, const QString &name)
     info.setDesktopName(desktop, name.toUtf8().constData());
 }
 
-bool KWindowSystem::showingDesktop()
+bool KWindowSystemPrivateX11::showingDesktop()
 {
     init(INFO_BASIC);
     return s_d_func()->showingDesktop();
 }
 
-void KWindowSystem::setUserTime(WId win, long time)
+void KWindowSystemPrivateX11::setUserTime(WId win, long time)
 {
     NETWinInfo info(QX11Info::connection(), win, QX11Info::appRootWindow(), 0);
     info.setUserTime(time);
 }
 
-void KWindowSystem::setExtendedStrut(WId win, int left_width, int left_start, int left_end,
+void KWindowSystemPrivateX11::setExtendedStrut(WId win, int left_width, int left_start, int left_end,
                                      int right_width, int right_start, int right_end, int top_width, int top_start, int top_end,
                                      int bottom_width, int bottom_start, int bottom_end)
 {
@@ -1059,7 +963,7 @@ void KWindowSystem::setExtendedStrut(WId win, int left_width, int left_start, in
     info.setStrut(oldstrut);
 }
 
-void KWindowSystem::setStrut(WId win, int left, int right, int top, int bottom)
+void KWindowSystemPrivateX11::setStrut(WId win, int left, int right, int top, int bottom)
 {
     int w = XDisplayWidth(QX11Info::display(), DefaultScreen(QX11Info::display()));
     int h = XDisplayHeight(QX11Info::display(), DefaultScreen(QX11Info::display()));
@@ -1067,7 +971,7 @@ void KWindowSystem::setStrut(WId win, int left, int right, int top, int bottom)
                      top, 0, top != 0 ? h : 0, bottom, 0, bottom != 0 ? h : 0);
 }
 
-bool KWindowSystem::icccmCompliantMappingState()
+bool KWindowSystemPrivateX11::icccmCompliantMappingState()
 {
     static enum { noidea, yes, no } wm_is_1_2_compliant = noidea;
     if (wm_is_1_2_compliant == noidea) {
@@ -1077,7 +981,7 @@ bool KWindowSystem::icccmCompliantMappingState()
     return wm_is_1_2_compliant == yes;
 }
 
-bool KWindowSystem::allowedActionsSupported()
+bool KWindowSystemPrivateX11::allowedActionsSupported()
 {
     static enum { noidea, yes, no } wm_supports_allowed_actions = noidea;
     if (wm_supports_allowed_actions == noidea) {
@@ -1087,7 +991,7 @@ bool KWindowSystem::allowedActionsSupported()
     return wm_supports_allowed_actions == yes;
 }
 
-QString KWindowSystem::readNameProperty(WId win, unsigned long atom)
+QString KWindowSystemPrivateX11::readNameProperty(WId win, unsigned long atom)
 {
     XTextProperty tp;
     char **text = NULL;
@@ -1112,21 +1016,21 @@ QString KWindowSystem::readNameProperty(WId win, unsigned long atom)
     return result;
 }
 
-void KWindowSystem::allowExternalProcessWindowActivation(int pid)
+void KWindowSystemPrivateX11::allowExternalProcessWindowActivation(int pid)
 {
     // Normally supported by X11, but may depend on some window managers ?
     Q_UNUSED(pid)
 }
 
-void KWindowSystem::setBlockingCompositing(WId window, bool active)
+void KWindowSystemPrivateX11::setBlockingCompositing(WId window, bool active)
 {
     NETWinInfo info(QX11Info::connection(), window, QX11Info::appRootWindow(), 0);
     info.setBlockingCompositing(active);
 }
 
-bool KWindowSystem::mapViewport()
+bool KWindowSystemPrivateX11::mapViewport()
 {
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     if (s_d) {
         return s_d->mapViewport();
     }
@@ -1144,10 +1048,10 @@ bool KWindowSystem::mapViewport()
     return false;
 }
 
-int KWindowSystem::viewportToDesktop(const QPoint &p)
+int KWindowSystemPrivateX11::viewportToDesktop(const QPoint &p)
 {
     init(INFO_BASIC);
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     NETSize s = s_d->desktopGeometry();
     QSize vs = qApp->desktop()->size();
     int xs = s.width / vs.width();
@@ -1157,10 +1061,10 @@ int KWindowSystem::viewportToDesktop(const QPoint &p)
     return y * xs + x + 1;
 }
 
-int KWindowSystem::viewportWindowToDesktop(const QRect &r)
+int KWindowSystemPrivateX11::viewportWindowToDesktop(const QRect &r)
 {
     init(INFO_BASIC);
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     QPoint p = r.center();
     // make absolute
     p = QPoint(p.x() + s_d->desktopViewport(s_d->currentDesktop(true)).x,
@@ -1174,10 +1078,10 @@ int KWindowSystem::viewportWindowToDesktop(const QRect &r)
     return y * xs + x + 1;
 }
 
-QPoint KWindowSystem::desktopToViewport(int desktop, bool absolute)
+QPoint KWindowSystemPrivateX11::desktopToViewport(int desktop, bool absolute)
 {
     init(INFO_BASIC);
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     NETSize s = s_d->desktopGeometry();
     QSize vs = qApp->desktop()->size();
     int xs = s.width / vs.width();
@@ -1206,10 +1110,10 @@ QPoint KWindowSystem::desktopToViewport(int desktop, bool absolute)
     return ret;
 }
 
-QPoint KWindowSystem::constrainViewportRelativePosition(const QPoint &pos)
+QPoint KWindowSystemPrivateX11::constrainViewportRelativePosition(const QPoint &pos)
 {
     init(INFO_BASIC);
-    KWindowSystemPrivate *const s_d = s_d_func();
+    NETEventFilter *const s_d = s_d_func();
     NETSize s = s_d->desktopGeometry();
     NETPoint c = s_d->desktopViewport(s_d->currentDesktop(true));
     int x = (pos.x() + c.x) % s.width;
@@ -1222,5 +1126,3 @@ QPoint KWindowSystem::constrainViewportRelativePosition(const QPoint &pos)
     }
     return QPoint(x - c.x, y - c.y);
 }
-
-#include "moc_kwindowsystem.cpp"
