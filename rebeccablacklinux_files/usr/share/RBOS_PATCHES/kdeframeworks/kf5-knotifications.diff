diff --git a/CMakeLists.txt b/CMakeLists.txt
index 022cbcb..85d54a3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -46,8 +46,8 @@ remove_definitions(-DQT_NO_CAST_FROM_ASCII)
 remove_definitions(-DQT_NO_CAST_FROM_BYTEARRAY)
 
 add_subdirectory(src)
-add_subdirectory(tests)
-add_subdirectory(autotests)
+#add_subdirectory(tests)
+#add_subdirectory(autotests)
 
 
 # create a Config.cmake and a ConfigVersion.cmake file and install them
diff --git a/src/kpassivepopup.cpp b/src/kpassivepopup.cpp
index b41cb8d..bef09f4 100644
--- a/src/kpassivepopup.cpp
+++ b/src/kpassivepopup.cpp
@@ -38,6 +38,7 @@
 #include <QTimer>
 #include <QToolTip>
 #include <QSystemTrayIcon>
+#include <netwm.h>
 
 #if HAVE_X11
 #include <QX11Info>
@@ -458,24 +459,24 @@ void KPassivePopup::positionSelf()
         // Our only choice is to put it by the window
 
         // Easy case: we were passed one of our own widgets
-        QWidget *widget = QWidget::find(d->winId);
-        if (widget) {
-            target = widget->geometry();
-            if (target.isNull()) {
-                const QRect d = QApplication::desktop()->availableGeometry(widget);
-                target.setRect(d.x(), d.y(), 0, 0);
-            }
-        } else {
+        //QWidget *widget = QWidget::find(d->winId);
+        //if (widget) {
+        //    target = widget->geometry();
+        //    if (target.isNull()) {
+        //        const QRect d = QApplication::desktop()->availableGeometry(widget);
+        //        target.setRect(d.x(), d.y(), 0, 0);
+        //    }
+        //} else {
             // NB: this will not work on X11 (hence the fallback in the NET
             //     code above) as the XCB platform plugin does not collect
             //     information about foreign windows
-            QWindow *window = QWindow::fromWinId(d->winId);
-            target = window->geometry();
-            if (target.isNull()) {
-                const QRect d = window->screen()->availableGeometry();
-                target.setRect(d.x(), d.y(), 0, 0);
-            }
-        }
+        //    QWindow *window = QWindow::fromWinId(d->winId);
+        //    target = window->geometry();
+        //    if (target.isNull()) {
+        //        const QRect d = window()->screen()->availableGeometry();
+        //        target.setRect(d.x(), d.y(), 0, 0);
+        //    }
+       // }
 #endif
     }
     moveNear(target);
