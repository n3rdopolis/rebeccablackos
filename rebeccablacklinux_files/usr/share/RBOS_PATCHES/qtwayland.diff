diff --git a/src/plugins/platforms/wayland_common/qwaylandintegration.cpp b/src/plugins/platforms/wayland_common/qwaylandintegration.cpp
index a4ddbc9..b0d5b27 100644
--- a/src/plugins/platforms/wayland_common/qwaylandintegration.cpp
+++ b/src/plugins/platforms/wayland_common/qwaylandintegration.cpp
@@ -71,6 +71,35 @@
 
 QT_BEGIN_NAMESPACE
 
+class GenericWaylandTheme: public QGenericUnixTheme
+{
+public:
+    static QStringList themeNames()
+    {
+        QStringList result;
+
+        if (QGuiApplication::desktopSettingsAware()) {
+            const QByteArray desktopEnvironment = QGuiApplicationPrivate::platformIntegration()->services()->desktopEnvironment();
+
+            // Ignore X11 desktop environments
+            if (!desktopEnvironment.isEmpty() &&
+                desktopEnvironment != QByteArrayLiteral("UNKNOWN") &&
+                desktopEnvironment != QByteArrayLiteral("KDE") &&
+                desktopEnvironment != QByteArrayLiteral("GNOME") &&
+                desktopEnvironment != QByteArrayLiteral("UNITY") &&
+                desktopEnvironment != QByteArrayLiteral("MATE") &&
+                desktopEnvironment != QByteArrayLiteral("XFCE") &&
+                desktopEnvironment != QByteArrayLiteral("LXDE"))
+                result.push_back(desktopEnvironment.toLower());
+        }
+
+        if (result.isEmpty())
+            result.push_back(QLatin1String(QGenericUnixTheme::name));
+
+        return result;
+    }
+};
+
 QWaylandIntegration::QWaylandIntegration()
     : mFontDb(new QGenericUnixFontDatabase())
     , mEventDispatcher(createUnixEventDispatcher())
@@ -82,7 +111,6 @@ QWaylandIntegration::QWaylandIntegration()
 #endif
 {
     QGuiApplicationPrivate::instance()->setEventDispatcher(mEventDispatcher);
-    QGuiApplication::setDesktopSettingsAware(false);
     mDisplay = new QWaylandDisplay();
     mClipboard = new QWaylandClipboard(mDisplay);
     mDrag = new QWaylandDrag(mDisplay);
@@ -205,12 +233,12 @@ QWaylandDisplay *QWaylandIntegration::display() const
 
 QStringList QWaylandIntegration::themeNames() const
 {
-    return QGenericUnixTheme::themeNames();
+    return GenericWaylandTheme::themeNames();
 }
 
 QPlatformTheme *QWaylandIntegration::createPlatformTheme(const QString &name) const
 {
-    return QGenericUnixTheme::createUnixTheme(name);
+    return GenericWaylandTheme::createUnixTheme(name);
 }
 
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.cpp b/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.cpp
index 5fc7dcb..7543ba1 100644
--- a/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.cpp
+++ b/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.cpp
@@ -108,6 +108,27 @@ void QWaylandWindowManagerIntegration::windowmanager_quit()
     QGuiApplication::quit();
 }
 
+QByteArray QWaylandWindowManagerIntegration::desktopEnvironment() const
+{
+    const QByteArray xdgCurrentDesktop = qgetenv("XDG_CURRENT_DESKTOP");
+    if (!xdgCurrentDesktop.isEmpty())
+        return xdgCurrentDesktop.toUpper(); // KDE, GNOME, UNITY, LXDE, MATE, XFCE...
+
+    // Classic fallbacks
+    if (!qEnvironmentVariableIsEmpty("KDE_FULL_SESSION"))
+        return QByteArrayLiteral("KDE");
+    if (!qEnvironmentVariableIsEmpty("GNOME_DESKTOP_SESSION_ID"))
+        return QByteArrayLiteral("GNOME");
+
+    // Fallback to checking $DESKTOP_SESSION (unreliable)
+    const QByteArray desktopSession = qgetenv("DESKTOP_SESSION");
+    if (desktopSession == "gnome")
+        return QByteArrayLiteral("GNOME");
+    if (desktopSession == "xfce")
+        return QByteArrayLiteral("XFCE");
+
+    return QByteArrayLiteral("UNKNOWN");
+}
 
 void QWaylandWindowManagerIntegration::openUrl_helper(const QUrl &url)
 {
diff --git a/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.h b/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.h
index 0982632..4524ce1 100644
--- a/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.h
+++ b/src/plugins/platforms/wayland_common/qwaylandwindowmanagerintegration.h
@@ -65,6 +65,8 @@ public:
     explicit QWaylandWindowManagerIntegration(QWaylandDisplay *waylandDisplay);
     virtual ~QWaylandWindowManagerIntegration();
 
+    QByteArray desktopEnvironment() const;
+
     bool openUrl(const QUrl &url);
     bool openDocument(const QUrl &url);
 
