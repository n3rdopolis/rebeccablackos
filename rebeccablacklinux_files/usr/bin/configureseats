#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Require root privlages
if [[ $UID != 0 ]]
then
echo "Must be run as root."
exit
fi

#Allow Exclamation points to be used in commands by turning off the history
set +H

NumberOfDevices=0
#Get all input devices from udev, and store attributes into an array
while read Device
do
DeviceProperties=$(udevadm info --query=property  --name=$Device)
DeviceDisplayName=$(udevadm info -q all --attribute-walk --name=$Device | sed -e '/looking at/d' -e 's/    //g' -e 's/==/=/g' -e 's/"//g' | awk -F ' *= *' '$1 == "ATTRS{name}" {print $0}' | cut -d = -f2- | tail -1 )
DeviceName=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_SERIAL" {print $0}' | cut -d = -f2- | tail -1 )
DeviceConnection=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_PATH" {print $0}' | cut -d = -f2- | tail -1 )
DeviceSeatID=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_SEAT" {print $0}' | cut -d = -f2- | tail -1 )
IsDeviceMouse=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_MOUSE" {print $0}' | cut -d = -f2- | tail -1 )
IsDeviceTouchscreen=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_TOUCHSCREEN" {print $0}' | cut -d = -f2- | tail -1 )
IsDeviceTouchpad=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_TOUCHPAD" {print $0}' | cut -d = -f2- | tail -1 )
IsDeviceKeyboard=$(echo "$DeviceProperties" | awk -F ' *= *' '$1 == "ID_INPUT_KEYBOARD" {print $0}' | cut -d = -f2- | tail -1 )

if [[ -z $DeviceDisplayName ]]
then
DeviceDisplayName=$DeviceName
  if [[ $DeviceDisplayName == "noserial" ]]
  then
  DeviceDisplayName="Generic"
  fi
fi

if [[ -z $DeviceSeatID ]]
then
DeviceSeatID=seat0
fi

unset DeviceType
if [[ -z $IsDeviceMouse ]]
then
IsDeviceMouse=0
else
  if [[ ! -z $DeviceType ]]
  then
  DeviceType+=" / "
  fi
DeviceType+="Mouse"
fi
if [[ -z $IsDeviceTouchscreen ]]
then
IsDeviceTouchscreen=0
else
  if [[ ! -z $DeviceType ]]
  then
  DeviceType+=" / "
  fi
DeviceType+="Touchscreen"
fi
if [[ -z $IsDeviceTouchpad ]]
then
IsDeviceTouchpad=0
else
  if [[ ! -z $DeviceType ]]
  then
  DeviceType+=" / "
  fi
DeviceType+="Touchpad"
fi
if [[ -z $IsDeviceKeyboard ]]
then
IsDeviceKeyboard=0
else
  if [[ ! -z $DeviceType ]]
  then
  DeviceType+=" / "
  fi
DeviceType+="Keyboard"
fi

if [[ ! -z $DeviceType ]]
then
((NumberOfDevices++))
DevicePaths[$NumberOfDevices]=$Device
DeviceDisplayNames[$NumberOfDevices]=$DeviceDisplayName
DeviceNames[$NumberOfDevices]=$DeviceName
DeviceConnections[$NumberOfDevices]=$DeviceConnection
DeviceSeatIDs[$NumberOfDevices]=$DeviceSeatID
DeviceTypes[$NumberOfDevices]=$DeviceType
fi

done < <(find /dev/input/event*)

#Get a list of all devices for the main form
for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=$NumberOfDevices; CurrentDeviceNumber++ ))
do
DeviceList+="     ${DeviceTypes[$CurrentDeviceNumber]}:      ${DeviceDisplayNames[$CurrentDeviceNumber]}
"
done

#Show a guide for the users on what devices they have attached to their system, and what will be configured
zenity --forms --text "This Dialog lists all the devices that will be configured by this wizard. 
You can close this dialog at anytime, as closing with will not interfere with the wizard, 
but serves as a guide to tell you how many devices are left.

Devices:
$DeviceList " --title="Seat Configuration" &
MainFormPID=$!
sleep 5


#Create the config file
touch /lib/udev/rules.d/99-westonseats.rules

#Go through each probed input device and prompt for a new seat
for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=$NumberOfDevices; CurrentDeviceNumber++ ))
do

unset NewSeatNumber
NewSeatNumber=$(echo "seat0
seat1
seat2
seat3
seat4
seat5" | zenity --list --column=seats --hide-header --text="Seat Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)

Select a seat for ${DeviceTypes[$CurrentDeviceNumber]}: ${DeviceDisplayNames[$CurrentDeviceNumber]}

Current Seat: ${DeviceSeatIDs[CurrentDeviceNumber]}" --title "Seat Configuration (Device $CurrentDeviceNumber of $NumberOfDevices)" ) 

if [[ -z $NewSeatNumber ]]
then
zenity --info --text "Seat for Device not Changed" --title="Seat Configuration"
else
cat /lib/udev/rules.d/99-westonseats.rules > /tmp/99-westonseats.rules.work
awk "!/${DeviceNames[$CurrentDeviceNumber]}/ || !/${DeviceConnections[$CurrentDeviceNumber]}/" /tmp/99-westonseats.rules.work > /lib/udev/rules.d/99-westonseats.rules
echo "ID_SERIAL==\"${DeviceNames[$CurrentDeviceNumber]}\", ID_PATH==\"${DeviceConnections[$CurrentDeviceNumber]}\", ENV{ID_SEAT}=\"$NewSeatNumber\"" >> /lib/udev/rules.d/99-westonseats.rules 
rm /tmp/99-westonseats.rules.work
fi
done

#Close the main zenity window that lists all devices
kill -9 $MainFormPID

#Reload the configuration into udev
udevadm control --reload-rules

#Notify each input device about the changes
for (( CurrentDeviceNumber=1; CurrentDeviceNumber<=$NumberOfDevices; CurrentDeviceNumber++ ))
do
udevadm trigger --sysname-match=$(basename ${DevicePaths[$CurrentDeviceNumber]})
done