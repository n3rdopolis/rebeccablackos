#! /bin/bash
#    Copyright (c) 2012, 2013, 2014 nerdopolis (or n3rdopolis) <bluescreen_avenger@verzion.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Inherit functions and variables from the script in /usr/bin/build_core
. /usr/bin/build_core

#The name of the source code folder that gets created
SOURCENAME=qt5

#The URL of the Source code repo
SOURCEURL=git://gitorious.org/qt/qt5

#The Type of repository the source code is on. Either 'GIT', 'SVN', 'BZR', or 'HG'.
REPOSITORYTYPE=GIT

#The revision of the source repo to use. To get the lastest revision for GIT it's 'master', for SVN it's 'HEAD', for BZR, it's 'last:1', and for HG it's 'default', without the quotes
SOURCEREVISION=5.4

#The prefix to compile and install the source code to
INSTALLDIR=/opt

#This variable is not manditory, /usr/bin/build_core sets it by default as 0, so that when it's set to create deb files, it only needs to build them once. 
REBUILDNEWREVISION=0

#Specify any custom revisions for git submodules in the format shown below
# SUBMODULEREVISIONS=(examplesubmodule master 
# nested/submodule 1.0
# 'submodule with spaces' master
# commitsubmodule 0123456789abcdef )
#
#This is an array where the first element specifies a submodule name, and the second element specifies the revision, the third specifies the name of another submodule, the fourth element specifies its revision and so on.
#If there are spaces in the submodule your are specifing, you will need to enclose the name in single quotes
#This is only applicable to git repositories with submodules

#This gets called by DownloadSource in /usr/bin/build_core. If there are no other commeands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to download source.
function PackageDownloadSource
{
./init-repository -f
git submodule | grep ^- | awk '{print $2}' | while read SUBMODULE
do
ls -A $SUBMODULE | grep -v "^.git" |while read FILE
do 
rm -rf $SUBMODULE/$FILE
done
done
}

#This is called by PrepareBuild in /usr/bin/build_core. If there are no other commeands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to prepare the system to build the source
function PackagePrepareBuild()
{
cd qtbase
patch -p1 < /usr/share/RBOS_PATCHES/qt5_qtbase.diff
}

#This is called by MakeAndInstall in /usr/bin/build_core, when the PWD is in the source tree. The commands should build the source 
function PackageCompileSource()
{
mkdir build
cd build
../configure -confirm-license  -opensource -qpa -xcb -egl -prefix $INSTALLDIR -release  -no-reduce-relocations -reduce-exports -dbus -no-gtkstyle -system-sqlite -openssl-linked -no-warnings-are-errors -no-separate-debug-info -fully-process 
make -i
}

#This is called by MakeAndInstall in /usr/bin/build_core. This is the routine to install the source. The PWD does not get inherited from PackageCompileSource, so if needed, the PWD needs to be changed here too.
function PackageInstallSource()
{
cd build
make install -i
}

#This is called by MakeAndInstall in /usr/bin/build_core. If there are no other commands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These commands are custom install commands that are needed for this package that are not performed by the source install operation. 
function PackagePostInstall()
{
cd "$SOURCEDIR"/"$SOURCENAME"/qtbase/examples/widgets/widgets/wiggly
qmake
make
cp "$SOURCEDIR"/"$SOURCENAME"/qtbase/examples/widgets/widgets/wiggly/wiggly $INSTALLDIR/bin

cd "$SOURCEDIR"/"$SOURCENAME"/qtbase/examples/widgets/widgets/tetrix
qmake
make
cp "$SOURCEDIR"/"$SOURCENAME"/qtbase/examples/widgets/widgets/tetrix/tetrix $INSTALLDIR/bin

cd "$SOURCEDIR"/"$SOURCENAME"/qtbase/examples/widgets/widgets/calculator
qmake
make
cp "$SOURCEDIR"/"$SOURCENAME"/qtbase/examples/widgets/widgets/calculator/calculator $INSTALLDIR/bin
}

#Run the Build and or Download, based on the argument this script was called by. This is decided within /usr/bin/build_core
RunDownloadAndOrBuild