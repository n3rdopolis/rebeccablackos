#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Inherit functions and variables from the script in /usr/bin/build_core
. /usr/bin/build_core

#The name of the source code folder that gets created
SOURCENAME=qt5

#The URL of the Source code repo
SOURCEURL=git://gitorious.org/qt/qt5

#The Type of repository the source code is on. Either 'GIT', 'SVN', or 'BZR'.
REPOSITORYTYPE=GIT

#The revision of the source repo to use. To get the lastest revision for GIT it's 'master', for SVN it's 'HEAD', and for BZR, it's 'last:1', without the quotes
SOURCEREVERSION=master

#The prefix to compile and install the source code to
INSTALLDIR=/opt

#This variable is not manditory, /usr/bin/build_core sets it by default as 0, so that when it's set to create deb files, it only needs to build them once. 
ALWAYSREBUILD=0

#This is called by PrepareBuild in /usr/bin/build_core. If there are no other commeands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to prepare the system to build the source
function PackagePrepareBuild()
{
:
}

#This is called by MakeAndInstall in /usr/bin/build_core, when the PWD is in the source tree. The commands should build the source 
function PackageCompileSource()
{
./configure -confirm-license  -opensource -qpa -xcb -wayland -egl -opengl es2 -prefix $INSTALLDIR -release  -no-reduce-relocations -reduce-exports -no-gtkstyle -nomake examples
make 
}

#This gets called after the build, only when the script is compiling source. This is usualy for compiling or setting up the files inside the source tree before they actually get copied by PackagePostBuild to INSTALLCACHEROOT
function PackagePostBuild()
{
echo "


Building Examples:


"

#make specific widgets
cd /srcbuild/qt5/qtbase/examples/widgets/itemviews/dirview
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/widgets/calculator
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/mainwindows/mainwindow
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/widgets/tetrix
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/widgets/wiggly
qmake
make
}

#This is called by MakeAndInstall in /usr/bin/build_core. If there are no other commeands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These commands are custom install commands that are needed for this package that are not performed by the source install operation. For commands that copy files out of the source tree into the system, the destination path should start with $INSTALLCACHEROOT, along with mkdir -p $INSTALLCACHEROOT/path/to/file, so that it can be saved for deb installs.
function PackagePostInstall()
{
mkdir -p /$INSTALLCACHEROOT/$INSTALLDIR/bin
#install qt tests
find /srcbuild/"$SOURCENAME"/qtbase/examples  -executable -type f   | grep -E "calculator|dirview|mainwindow|tetrix|wiggly" | while read TEST
do
cp "$TEST" /$INSTALLCACHEROOT/$INSTALLDIR/bin
done
cp /$INSTALLDIR/examples/webkitwidgets/browser/browser $INSTALLDIR/bin
cp /$INSTALLDIR/examples/webkitwidgets/fancybrowser/fancybrowser $INSTALLDIR/bin
cp /$INSTALLDIR/examples/webkitwidgets/embedded/anomaly/anomaly $INSTALLDIR/bin 
}

#Download source, unless the argument passed to the build script is 'build-only'
if [[ "$ACTION" != build-only ]]
then
#Download the source specified variables, using the DownloadSource function in /usr/bin/build_core
DownloadSource
fi


#Build the source and install it, unless the argument passed to the build script is 'download-only'
if [[ "$ACTION" != download-only ]]
then
#Prepare the build using the PrepareBuild function in /usr/bin/build_core, which then calls this scripts PackagePrepareBuild function.
PrepareBuild

#Compile the source using the MakeAndInstall function in /usr/bin/build_core, which calls PackageCompileSource from this script, then MakeAndInstall's install methods, and then PackagePostInstall from this script.
MakeAndInstall

fi