#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Inherit functions and variables from the script in /usr/bin/build_core
. /usr/bin/build_core

#The name of the source code folder that gets created
SOURCENAME=qt5

#The URL of the Source code repo
SOURCEURL=git://gitorious.org/qt/qt5

#The Type of repository the source code is on. Either 'GIT', 'SVN', or 'BZR'.
REPOSITORYTYPE=GIT

#The revision of the source repo to use. To get the lastest revision for GIT it's 'master', for SVN it's 'HEAD', and for BZR, it's 'last:1', without the quotes
SOURCEREVERSION=dev

#The prefix to compile and install the source code to
INSTALLDIR=/opt

#This variable is not manditory, /usr/bin/build_core sets it by default as 0, so that when it's set to create deb files, it only needs to build them once. 
REBUILDNEWREVISION=0





#set the revisions for the submodules. Replace all symbols (including /)  and spaces  with underscores, and add REVISION_ before the name
REVISION_qtactiveqt=dev
REVISION_qtbase=dev
REVISION_qtdeclarative=dev
REVISION_qtdoc=dev
REVISION_qtgraphicaleffects=dev
REVISION_qtimageformats=dev
REVISION_qtjsbackend=dev
REVISION_qtmultimedia=dev
REVISION_qtqa=dev
REVISION_qtquick1=dev
REVISION_qtrepotools=dev
REVISION_qtscript=dev
REVISION_qtsvg=dev
REVISION_qttools=dev
REVISION_qttranslations=dev
REVISION_qtwebkit=dev
REVISION_qtwebkit_examples_and_demos=dev
REVISION_qtxmlpatterns=dev

#This gets called by DownloadSource in /usr/bin/build_core. If there are no other commeands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to download source.
function PackageDownloadSource
{
:
}

#This is called by PrepareBuild in /usr/bin/build_core. If there are no other commeands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These functions are custom commands that need to be done to prepare the system to build the source
function PackagePrepareBuild()
{
:
}

#This is called by MakeAndInstall in /usr/bin/build_core, when the PWD is in the source tree. The commands should build the source 
function PackageCompileSource()
{
./configure -confirm-license  -opensource -qpa -xcb -wayland -egl -opengl es2 -prefix $INSTALLDIR -release  -no-reduce-relocations -reduce-exports -no-gtkstyle -nomake examples
make 
}

#This is called by MakeAndInstall in /usr/bin/build_core. This is the routine to install the source. The PWD does not get inherited from PackageCompileSource, so if needed, the PWD needs to be changed here too.
function PackageInstallSource()
{
make install
}

#This is called by MakeAndInstall in /usr/bin/build_core. If there are no other commands here, the colon (:) is MANDITORY as a NULL command, otherwise Bash complains of an empty function. These commands are custom install commands that are needed for this package that are not performed by the source install operation. 
function PackagePostInstall()
{
echo "


Building Examples:


"

#make specific widgets
cd /srcbuild/qt5/qtbase/examples/widgets/itemviews/dirview
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/widgets/calculator
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/mainwindows/mainwindow
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/widgets/tetrix
qmake
make
cd /srcbuild/qt5/qtbase/examples/widgets/widgets/wiggly
qmake
make
#install qt tests
find /srcbuild/"$SOURCENAME"/qtbase/examples  -executable -type f   | grep -E "calculator|dirview|mainwindow|tetrix|wiggly" | while read TEST
do
cp "$TEST" /$INSTALLDIR/bin
done
cp /$INSTALLDIR/examples/webkitwidgets/browser/browser $INSTALLDIR/bin
cp /$INSTALLDIR/examples/webkitwidgets/webkit/fancybrowser/fancybrowser $INSTALLDIR/bin
cp /$INSTALLDIR/examples/webkitwidgets/embedded/anomaly/anomaly $INSTALLDIR/bin 
}

#Run the Build and or Download, based on the argument this script was called by. This is decided within /usr/bin/build_core
RunDownloadAndOrBuild