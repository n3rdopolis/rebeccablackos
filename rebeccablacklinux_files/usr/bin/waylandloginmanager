#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Dont store command history.
unset HISTFILE


if [[ $(ls  /dev/dri/card* ) ]]
then 
WESTONBACKEND=drm-backend.so
elif [[ $(ls  /dev/fb* ) ]]
then
WESTONBACKEND=fbdev-backend.so
else
FSTYPE=$(df / -T | awk '{print $2}' | grep -v Type)
if [[ $FSTYPE == overlayfs ]]
then
openvt -c 13 -s -f -- dialog --msgbox "No Kernel Mode Setting, or Framebuffer device found

This means your video card does not support KMS, and doesn't create a framebuffer by default

You can select the Framebuffer boot option when you start the Live CD, to force create a framebuffer

Will now restart" 20 50 --no-cancel
else 
openvt -c 13 -s -f -- dialog --msgbox "No Kernel Mode Setting, or Framebuffer device found

This means your video card does not support KMS, and doesn't create a framebuffer by default

You can force the system to create a Framebuffer device, by restating into recovery mode and running the 
rbos-add-framebuffer
command/utility to assist

Will now restart" 20 50 --no-cancel
fi
reboot

fi


#Require root privlages
if [[ $UID != 0 ]]
then
echo "Must be run as root."
exit
fi

export loginmanagerpid=$$
. /usr/bin/weston_vars
export XDG_CONFIG_HOME=/var/lib/loginmanager/.config
export XDG_RUNTIME_DIR=/run/user/root
LastTTY=0

#Create communication fifos.
mkfifo -m 777 /run/loginmanager_control
mkfifo -m 700 /run/loginmanager_data
chown loginmanager /run/loginmanager_data


#Get the next TTY that is open for use
function GetNextTTY
{
TTYInUse=1
while [[ $TTYInUse != 0 && $LastTTY -le 63 ]]
do
((LastTTY++))
TTYInUse=$(openvt --console $LastTTY /bin/true ; echo $?)
done
AvailibleTTY=$LastTTY
}

# TODO session changing function

function NewUserSession
{
export SessionTTY=$(GetNextTTY)
chvt $SessionTTY
su $LOGINUSER -c /usr/bin/wlsessionchooser &
}

#Attempt to get the users authentication
function AuthenticateUser
{
export SessionNumber=$(date +%s)
#Create communication fifos for the session.
mkfifo -m 777 /run/loginmanager_control.$loginmanagerpid.$SessionNumber
mkfifo -m 700 /run/loginmanager_data.$loginmanagerpid.$SessionNumber

#Get the list of nonsystem users
UIDMIN=$(cat /etc/login.defs | grep -e "^UID_MIN" | awk '{print $2}')
UIDMAX=$(cat /etc/login.defs | grep -e "^UID_MAX" | awk '{print $2}')
USERLIST=$(cat /etc/passwd | awk -v UIDMIN=$UIDMIN -v UIDMAX=$UIDMAX -F : '{ if ($3>=UIDMIN && $3 <=UIDMAX) print $1}' | sed 's/^/FALSE /g')

#present the list of the users to the system
export LOGINUSER=$(zenity --list --radiolist --column select --column users $USERLIST | grep -v 'startup message: remove:')

#if there is no user selected then show a dialog. If a user was selected, prompt for its login
if [[ -z $LOGINUSER ]]
then
zenity --warning --text="No User selected" 
else
export SessionTTY=$(GetNextTTY)
/usr/libexec/login-helper $(zenity --password | grep -v 'startup message: remove:')
passwordresult=$?
if [[ $passwordresult != 0 ]]
then
zenity --warning --text="Invalid Password" 
else
chvt $SessionTTY
fi
fi

}


#Funtion for prompting for leave options
function LeavePrompt
{
ACTION=$(zenity --list --radiolist --hide-header --text="What do you want to do?" --column select --column 'action' FALSE "Shutdown" FALSE "Restart" FALSE "Standby" FALSE "Hibernate" TRUE "Nothing" | grep -v 'startup message: remove:' )
if [[ $ACTION == "Shutdown" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
RESULT=$?
elif [[ $ACTION == "Restart" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
RESULT=$?
elif [[ $ACTION == "Standby" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Suspend
RESULT=$?
elif [[ $ACTION == "Hibernate" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Hibernate
RESULT=$?
else
exit
fi
if [[ $RESULT != 0 ]]
then
zenity --warning --text="Failed to $ACTION"
fi
}



#Get the TTY that will hold the Wayland server that displays the login screen.
HostVT=$(GetNextTTY)

#Call the host server for the login gui, running as a seperate user
/opt/bin/weston-launch -- --backend=$WESTONBACKEND --tty=$HostVT --socket=loginmanagerdisplay &
export WAYLAND_DISPLAY=loginmanagerdisplay
chmod 777 /var/lib/loginmanager/loginmanagerdisplay

AUTOLOGONUSER=$(cat /etc/lightdm/lightdm.conf | grep autologin-user= | awk -F = '{print $2}' )
if [[ ! -z $AUTOLOGONUSER ]]
then
su $AUTOLOGINUSER -c /usr/bin/wlsessionmanager &
fi 
# TODO Session return data


while [ 1 ]
do

COMMAND=$(cat /run/loginmanager_control)
echo "received command $COMMAND"
if [[ $COMMAND == "Switch" ]]
then
chvt $HostVT
# TODO Session checker
ListCurrentSessions &
elif [[ $COMMAND == "Login" ]]
then
AuthenticateUser &
elif [[ $COMMAND == "Leave" ]] 
then
LeavePrompt &
else
echo "Invalid command"
fi

done
