#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Detect another instance
SCRIPTPATH=$(readlink -f "$0")
SCRIPTNAME=$(basename "$SCRIPTPATH")
LOCKSCRIPT=$(readlink -f "$(cat "/tmp/$SCRIPTNAME.lock" | xargs -0 echo | awk '{print $2}')" )
if [[ "$SCRIPTPATH" != "$LOCKSCRIPT" ]]
then
rm -r "/tmp/$SCRIPTNAME.lock"
ln -s /proc/"$$"/cmdline "/tmp/$SCRIPTNAME.lock"
else
logger -t waylandloginmanager "Error: Another instance is already running" -s  >>/var/log/waylandloginmanager 2>&1
exit
fi


#Require root privlages
if [[ $UID != 0 ]]
then
echo "Must be run as root."
exit
fi

. /usr/bin/weston_vars
export XDG_RUNTIME_DIR=/run/
export WAYLAND_DISPLAY=loginmanagerdisplay
LastTTY=0
AllSessions=0
FSTYPE=$(df / -T | awk '{print $2}' | grep -v Type)
if [[ $FSTYPE == overlayfs ]]
then
ISLIVE=1
fi

plymouth hide-splash

#Detect hardware abilities
if [[ $(ls  /dev/dri/card* ) ]]
then 
logger -t waylandloginmanager "Kernel mode setting found." -s  >>/var/log/waylandloginmanager 2>&1
setfacl -m "g:plugdev:rwx" /dev/dri/card*
WESTONBACKEND=drm-backend.so
elif [[ $(ls  /dev/fb* ) ]]
then
logger -t waylandloginmanager "No kernel mode setting found. Using the framebuffer" -s  >>/var/log/waylandloginmanager 2>&1
setfacl -m "g:plugdev:rwx" /dev/fb*
WESTONBACKEND=fbdev-backend.so
else
FSTYPE=$(df / -T | awk '{print $2}' | grep -v Type)
if [[ $ISLIVE == 1 ]]
then
logger -t waylandloginmanager "ERROR: No supportable hardware found" -s  >>/var/log/waylandloginmanager 2>&1
openvt -c 13 -s -f -w -- dialog --msgbox "No Kernel Mode Setting, or Framebuffer device found.

This means your video card does not support KMS, and doesn't create a framebuffer by default. either of which are needed for Weston to work.

You can select a Framebuffer boot option when you start the Live CD, to force a boot with a framebuffer device." 20 50 --no-cancel
else 
openvt -c 13 -s -f -w -- dialog --msgbox "No Kernel Mode Setting, or Framebuffer device found.

This means your video card does not support KMS, and doesn't create a framebuffer by default. either of which are needed for Weston to work.

Will now start a utility to assist you in configuring your system to boot with a framebuffer device." 20 50 --no-cancel
openvt -c 13 -s -f -w -- rbos-add-framebuffer
fi
openvt -c 13 -s -f -w -- dialog --msgbox "Can not start Weston.

Will now reboot." 20 50 --no-cancel
reboot
exit
fi

#if the user booted with a hidden option forcefbdev
if [[ $(cat /proc/cmdline | grep -c forcefbdev ) != 0 ]]
then
logger -t waylandloginmanager "Manually override set to use to use the framebuffer" -s  >>/var/log/waylandloginmanager 2>&1
if [[ $(ls /dev/fb* ) ]]
then
setfacl -m "g:plugdev:rwx" /dev/fb*
WESTONBACKEND=fbdev-backend.so
else
logger -t waylandloginmanager "ERROR: No framebuffer device found for forcefbdev override!" -s  >>/var/log/waylandloginmanager 2>&1
openvt -c 13 -s -f -w -- dialog --msgbox "The forcefbdev overide is set, but no framebuffer device is found!

Will now reboot" 20 50 --no-cancel
reboot
fi
fi


#Get the next TTY that is open for use
function GetNextTTY
{
TTYInUse=1
while [[ $TTYInUse -ne 0 && $LastTTY -lt 63 ]]
do
((LastTTY++))
openvt -c $LastTTY -- /bin/true 
TTYInUse=$?
done

if [[ $TTYInUse -ne 0 ]]
then
AvailibleTTY=-1
else
AvailibleTTY=$LastTTY
fi

echo $AvailibleTTY
}

function RegisterSession
{
COMMANDSTRING=$1
AllSessionTTYs[$AllSessions]=$(echo "$COMMANDSTRING" | sed -ne 2p )
AllSessionPIDs[$AllSessions]=$(echo "$COMMANDSTRING" | sed -ne 3p )
AllSessionUsers[$AllSessions]=$(echo "$COMMANDSTRING" | sed -ne 4p )
((AllSessions++))
}

function DialogWait
{
waitseconds=$1
countseconds=0
while [[ $countseconds -lt $waitseconds ]]
do
percent=$(( $countseconds * 100 / $waitseconds ))
echo $percent
((countseconds++))
sleep 1
done | zenity --title="autologin" --no-cancel --progress --auto-close --text="Waiting for Autologin timeout..." 2>/dev/null
}

function ChooseSessionType
{
WSESSIONSPATH="/usr/share/wsessions.d"

if [[ $WESTONBACKEND == "fbdev-backend.so" ]]
then
BackendType=FB
elif [[ $WESTONBACKEND == "drm-backend.so" ]]
then
BackendType=KMS
fi

#Parse the list of sessions specified, so that zenity can use it as a list of sessions
WSESSIONLIST=$(find $WSESSIONSPATH -name "*\.desktop" -type f -executable | sort | while read SESSIONFILE
do 
DesktopFileData=$(awk '/^\[*\]$/{flag=0}flag;/^\[Desktop Entry\]$/{flag=1}' $SESSIONFILE | awk -F \# '{print $1}')

Enabled=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "Enabled" {print $0}' | cut -d = -f2- | tail -1 )
Name=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "Name" {print $0}' | cut -d = -f2- | tail -1 )
Type=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "Type" {print $0}' | cut -d = -f2- | tail -1 )
SupportsBackend=$(echo "$DesktopFileData" | awk -v BackendType=$BackendType -F ' *= *' '$1 == "CompositorSupports"BackendType {print $0}' | cut -d = -f2- | tail -1 )
BackendArguments=$(echo "$DesktopFileData" | awk -v BackendType=$BackendType -F ' *= *' '$1 == "Compositor"BackendType"Arguments" {print $0}' | cut -d = -f2- | tail -1 )
SessionArgument=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "SessionArgument" {print $0}' | cut -d = -f2- | tail -1 )
AdditionalArguments=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "AdditionalArguments" {print $0}' | cut -d = -f2-| tail -1 )
CompositorExec=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "CompositorExec" {print $0}' | cut -d = -f2- | tail -1 )
NeedsFile=$(echo "$DesktopFileData" | awk -F ' *= *' '$1 == "NeedsFile" {print $0}' | cut -d = -f2- | perl -pe 's/\$(\w+)/$ENV{$1}/g')



NotFoundCount=0
while read FILE
do
if [[ ! -e $FILE ]]
then
((NotFoundCount++))
fi
done < <(echo "$NeedsFile")

if [[ $NotFoundCount == 0 && $SupportsBackend == 1 && $Enabled == 1 && $Type == "WSession" ]]
then
echo "$CompositorExec"
echo "$BackendArguments"
echo "$SessionArgument"
echo "$AdditionalArguments"
echo "$Name"
fi

done)

#select the session
WSESSIONDATA=$(echo "$WSESSIONLIST" | zenity --title="Pick a Session..." --height=450 --list --text "Select a Weston Desktop Environment to use" --column compositor --column backend --column session --column args --column name --hide-column=1,2,3,4 --print-column=1,2,3,4,5 --separator="\n" --hide-header 2>/dev/null )

if [[ -z $WSESSIONDATA ]]
then 
zenity --warning --text="No session selected. Defaulting to the Default Weston Desktop Shell." 2>/dev/null
export SelectedCompositorExec=weston
if [[ $BackendType == KMS ]]
then
WSESSIONDATA=echo "weston
--backend=drm-backend.so
--modules=desktop-shell.so,xwayland.so,cms-colord.so
--log=$HOME/weston.log
Default Weston Desktop Shell
"
elif [[ $BackendType == FB ]]
then 
WSESSIONDATA="weston
--backend=fbdev-backend.so
--modules=desktop-shell.so,xwayland.so,cms-colord.so
--log=$HOME/weston.log
Default Weston Desktop Shell
"
fi

fi

}

function ShowInfo
{
if [[ $WESTONBACKEND == "fbdev-backend.so" ]]
then
BACKENDSTRING="Weston is using the framebuffer backend.

This probably means the current video card drivers do not 
support the native kernel mode setting that is optimal for Weston."
else
BACKENDSTRING="Your system is using Weston with Kernel mode setting.

This is the optimal way to run Weston."
fi
zenity --title="Information" --forms --text="This is a third party fan made distribution!

$BACKENDSTRING

Login manager is running on tty: $HostVT

The key icon brings up a login prompt
The arrow icon brings up a prompt to swich between running sessions
The red X icon brings up a shutdown prompt
The i icon shows this help prompt" 2>/dev/null

}

function SwitchUserDialog 
{
unset SessionList
NumberOfSessions=${#AllSessionPIDs[@]}
((NumberOfSessions--))

while [[ $NumberOfSessions -ge 0 ]]
do
if [[ -e /proc/${AllSessionPIDs[$NumberOfSessions]}/environ ]]
then
SessionList+="$NumberOfSessions
${AllSessionTTYs[$NumberOfSessions]}
${AllSessionPIDs[$NumberOfSessions]}
${AllSessionUsers[$NumberOfSessions]}
"
fi
((NumberOfSessions--))
done

SessionList+="-1


New Session...
"


unset ChangeSession
ChangeSession=$(echo "$SessionList"  | sed '$d'| zenity --title="Switch User" --height=450 --list --text "Select a running session to change into" --column sessionid --column tty --column pid --column username --print-column=1 --hide-column=3 --separator="\n" 2>/dev/null | head -1 )

if [[ $ChangeSession == "-1" ]]
then
AuthenticateUser
else 

if [[ $ChangeSession ]]
then

if [[ -e /proc/${AllSessionPIDs[$ChangeSession]}/environ ]]
then
chvt ${AllSessionTTYs[$ChangeSession]}
else
zenity --title="Switch User" --warning --text="The selected session was not found. The session may have quit." 2>/dev/null
fi

fi

fi


}


#Attempt to get the users authentication
function AuthenticateUser
{
#Get the list of nonsystem users
UIDMIN=$(cat /etc/login.defs | grep -e "^UID_MIN" | awk '{print $2}')
UIDMAX=$(cat /etc/login.defs | grep -e "^UID_MAX" | awk '{print $2}')
USERLIST=$(cat /etc/passwd | awk -v UIDMIN=$UIDMIN -v UIDMAX=$UIDMAX -F : '{ if ($3>=UIDMIN && $3 <=UIDMAX) print $1}')
if [[ $ISLIVE == 1 ]]
then
USERLIST+=$(cat /etc/passwd | awk -v UIDMIN=999 -v UIDMAX=999 -F : '{ if ($3>=UIDMIN && $3 <=UIDMAX) print $1}' )
fi

ChooseSessionType

#present the list of the users to the system
export LOGINUSER=$(echo "$USERLIST" | zenity --title="Username" --height=450 --list --text "Select a user from the list to log into."  --column users  --hide-header --separator="\n" 2>/dev/null | head -1 | grep -v 'startup message: remove:')

#if there is no user selected then show a dialog. If a user was selected, prompt for its login
if [[ -z $LOGINUSER ]]
then
zenity --warning --text="No User selected" 2>/dev/null
else
export SessionTTY=$(GetNextTTY)
if [[ $SessionTTY -ne -1 ]]
then
logger -t waylandloginmanager "Opening a session for $LOGINUSER on TTY $SessionTTY" -s  >>/var/log/waylandloginmanager 2>&1
zenity --title="Password" --password --text "Type Password for $LOGINUSER" 2>/dev/null| grep -v 'startup message: remove:' | sudo -E -S -u daemon /usr/libexec/wayland_login_helpers/login-helper "$SessionTTY" "$WSESSIONDATA"
passwordresult=${PIPESTATUS[2]}

if [[ $passwordresult != 0 ]]
then
zenity --warning --text="Invalid password for $LOGINUSER" 2>/dev/null
else
/usr/bin/wlsessionstarter "$SessionTTY" "$LOGINUSER" "$WSESSIONDATA" &
fi
else
zenity --warning --text="Not Enough TTYs!"
logger -t waylandloginmanager "Not Enough TTYs for user login!" -s  >>/var/log/waylandloginmanager 2>&1
fi

fi

}


#Funtion for prompting for leave options
function LeavePrompt
{
ACTION=$(echo "Shutdown
Restart
Standby
Hibernate" | zenity --title="Leave..." --height=450 --list  --hide-header --text="What do you want to do?" --column 'action' 2>/dev/null | grep -v 'startup message: remove:' )
if [[ $ACTION == "Shutdown" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
RESULT=$?
elif [[ $ACTION == "Restart" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Restart
RESULT=$?
elif [[ $ACTION == "Standby" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Suspend
RESULT=$?
elif [[ $ACTION == "Hibernate" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Hibernate
RESULT=$?
else
exit
fi
if [[ $RESULT != 0 ]]
then
zenity --title="Failure" --warning --text="Failed to $ACTION" 2>/dev/null
fi
}





#Call the host server for the login gui, running as a seperate user
function LoginWestonLauncher
{

while [ 1 ]
do

if [[ ! -e /run/loginmanagerdisplay ]]
then 
logger -t waylandloginmanager "Starting the loginmanagerdisplay on tty $HostVT" -s  >>/var/log/waylandloginmanager 2>&1
openvt -c $HostVT -- weston-display-server --tty=$HostVT --backend=$WESTONBACKEND --socket=loginmanagerdisplay 
fi

sleep 5

done
}




function StartAutoLogin
{
if [[ $ISLIVE == 1 ]]
then
AUTOLOGINUSER=$(cat /etc/casper.conf | grep USERNAME= | awk -F = '{print $2}' | sed 's/\"//g' | head -1 )
else

if [[ -e /etc/waylandloginmanager.conf ]]
then
AUTOLOGINUSER=$(cat /etc/waylandloginmanager.conf | grep autologin-user= | awk -F = '{print $2}' | head -1 )
else
AUTOLOGINUSER=$(cat /etc/lightdm/lightdm.conf | grep autologin-user= | awk -F = '{print $2}' | head -1 )
echo "autologin-user=$AUTOLOGINUSER" >> /etc/waylandloginmanager.conf
fi

fi

if [[ ! -z $AUTOLOGINUSER ]]
then
DialogWait 15
ChooseSessionType
export AutoSessionTTY=$(GetNextTTY)
if [[ $AutoSessionTTY -ne -1 ]]
then
logger -t waylandloginmanager "Starting Autologin session for $AUTOLOGINUSER on TTY $AutoSessionTTY" -s  >>/var/log/waylandloginmanager 2>&1
/usr/bin/wlsessionstarter "$AutoSessionTTY" "$AUTOLOGINUSER" "$WSESSIONDATA" &
else
zenity --warning --text="Not Enough TTYs for autologin!"
logger -t waylandloginmanager "Not Enough TTYs for autologin!" -s  >>/var/log/waylandloginmanager 2>&1
fi

fi 
}

#The part of the script that reads the FIFO for IPC from users logoff dialogs, the helper scripts on the login window, or the session startup scripts
function ReadCommandFIFO
{
#Create communication fifo.
rm -r /run/loginmanager_control
mkfifo -m 777 /run/loginmanager_control


while [ 1 ]
do

COMMAND=$(cat /run/loginmanager_control)
logger -t waylandloginmanager "received command $COMMAND" -s  >>/var/log/waylandloginmanager 2>&1
if [[ $COMMAND == "Switch" ]]
then
chvt $HostVT
SwitchUserDialog &
elif [[ $COMMAND == "Change" ]]
then
chvt $HostVT
elif [[ $COMMAND == "Login" ]]
then
AuthenticateUser &
elif [[ $COMMAND == "Leave" ]] 
then
LeavePrompt &
elif [[ $COMMAND = RegisterSession* ]]
then
RegisterSession "$COMMAND"
elif [[ $COMMAND == "Info" ]]
then
ShowInfo &
else
logger -t waylandloginmanager "Invalid command" -s  >>/var/log/waylandloginmanager 2>&1
fi

done
}

#Get the TTY that will hold the Wayland server that displays the login screen.
HostVT=$(GetNextTTY)
LastTTY=$HostVT
if [[ $HostVT -eq -1 ]]
then
logger -t waylandloginmanager "ERROR: Not Enough TTYs for login manager display!" -s  >>/var/log/waylandloginmanager 2>&1
exit
fi


#Start the main login Weston server
LoginWestonLauncher &

#Start the autologin launcher
StartAutoLogin &

#Start the login managers IPC
ReadCommandFIFO
