#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Dont store command history.
unset HISTFILE

#Require root privlages
if [[ $UID != 0 ]]
then
echo "Must be run as root."
exit
fi

export loginmanagerpid=$$
export SUDO_USER=loginmanager
. /usr/bin/weston_vars
LastTTY=0

#Create communication fifos.
mkfifo -m 777 /run/loginmanager_control.$loginmanagerpid
mkfifo -m 700 /run/loginmanager_data.$loginmanagerpid
chown loginmanager /run/loginmanager_data.$loginmanagerpid


#Get the next TTY that is open for use
function GetNextTTY()
{
TTYInUse=1
while [[ $TTYInUse != 0 ]]
do
((LastTTY++))
TTYInUse=$(openvt --console $LastTTY /bin/true)
done
AvailibleTTY=$LastTTY
}

# TODO session changing function

fuction NewUserSession()
{
export SessionTTY=$(GetNextTTY)
chvt $SessionTTY
# TODO sessionchooser will need to be changed to not be X
su $LOGINUSER -c /usr/bin/wlsessionchooser &
SESSIONPID=$!
}

#Attempt to get the users authentication
function AuthenticateUser()
{
export SessionNumber=$(date +%s)
#Create communication fifos for the session.
mkfifo -m 777 /run/loginmanager_control.$loginmanagerpid.$SessionNumber
mkfifo -m 700 /run/loginmanager_data.$loginmanagerpid.$SessionNumber
chown loginmanager /run/loginmanager_data.$loginmanagerpid.$SessionNumber

#Get the list of nonsystem users
UIDMIN=$(cat /etc/login.defs | grep -e "^UID_MIN" | awk '{print $2}')
UIDMAX=$(cat /etc/login.defs | grep -e "^UID_MAX" | awk '{print $2}')
USERLIST=$(cat /etc/passwd | awk -v UIDMIN=$UIDMIN -v UIDMAX=$UIDMAX -F : '{ if ($3>=UIDMIN && $3 <=UIDMAX) print $1}' | sed 's/^/FALSE /g')

#present the list of the users to the system
export LOGINUSER=$(su loginmanager --preserve-environment  -c zenity --list --radiolist --column select --column users $USERLIST | grep -v 'startup message: remove:')

#if there is no user selected then show a dialog. If a user was selected, prompt for its login
if [[ -z $LOGINUSER ]]
then
su loginmanager --preserve-environment  -c zenity --warning --text="No User selected" 
else
su loginmanager --preserve-environment  -c /usr/libexec/login-test-helper $(zenity --password | grep -v 'startup message: remove:')
passwordresult=$?
if [[ $passwordresult != 0 ]]
then
su loginmanager --preserve-environment  -c zenity --warning --text="Invalid Password" 
fi
fi

}


#Funtion for prompting for leave options
function LeavePrompt()
{
ACTION=$(su loginmanager --preserve-environment  -c zenity --list --radiolist --hide-header --text="What do you want to do?" --column select --column 'action' FALSE "Shutdown" FALSE "Restart" FALSE "Standby" FALSE "Hibernate" TRUE "Nothing" | grep -v 'startup message: remove:' )
if [[ $ACTION == "Shutdown" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
RESULT=$?
elif [[ $ACTION == "Restart" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
RESULT=$?
elif [[ $ACTION == "Standby" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Suspend
RESULT=$?
elif [[ $ACTION == "Hibernate" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Hibernate
RESULT=$?
else
exit
fi
if [[ $RESULT != 0 ]]
then
su loginmanager --preserve-environment  -c zenity --warning --text="Failed to $ACTION"
fi
}



#If the user for the loginmanager does not exist, then create it.
loginmanagerexists=$(id -u loginmanager)
if [[ $loginmanagerexists != 0 ]]
then
adduser loginmanager --disabled-password --system --group --home=/var/lib/loginmanager
usermod -a -G plugdev loginmanager
chown -R loginmanager:loginmanager /var/lib/loginmanager
chmod -R 700 /var/lib/loginmanager
fi


#Get the TTY that will hold the Wayland server that displays the login screen.
HostVT=$(GetNextTTY)

#Call the host server for the login gui, running as a seperate user
su loginmanager /opt/bin/weston-launch -- --backend=fbdev-backend.so --tty=$HostVT --socket=loginmanagerdisplay &
export WAYLAND_DISPLAY=loginmanagerdisplay
chmod 777 /var/lib/loginmanager/loginmanagerdisplay

while [ 1 ]
do
AUTOLOGONUSER=$(cat /etc/lightdm/lightdm.conf | grep autologin-user= | awk -F = '{print $2}' )
if [[ ! -z $AUTOLOGONUSER ]]
then
su $AUTOLOGINUSER -c /usr/bin/wlsessionmanager
fi 

COMMAND=$(/run/loginmanager_control.$loginmanagerpid)
if [[ $COMMAND == "Switch" ]]
then
chvt $HostVT
# TODO Session checker
ListCurrentSessions &
elif [[ $COMMAND == "Login" ]]
then
AuthenticateUser &
elif [[ $COMMAND == "Leave" ]] 
then
LeavePrompt &
else
echo "Invalid command"
fi

done
