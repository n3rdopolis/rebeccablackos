#! /bin/bash
#    Copyright (c) 2012, nerdopolis (or n3rdopolis) <bluescreen_avenger@version.net>
#
#    This file is part of RebeccaBlackLinux.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Require root privlages
if [[ $UID != 0 ]]
then
echo "Must be run as root."
exit
fi

. /usr/bin/weston_vars
export XDG_RUNTIME_DIR=/run/
export WAYLAND_DISPLAY=loginmanagerdisplay
LastTTY=0
AllSessions=0
FSTYPE=$(df / -T | awk '{print $2}' | grep -v Type)
if [[ $FSTYPE == overlayfs ]]
then
ISLIVE=1
fi


#Detect hardware abilities
if [[ $(ls  /dev/dri/card* ) ]]
then 
WESTONBACKEND=drm-backend.so
elif [[ $(ls  /dev/fb* ) ]]
then
setfacl -m "g:plugdev:rwx" /dev/fb*
WESTONBACKEND=fbdev-backend.so
else
FSTYPE=$(df / -T | awk '{print $2}' | grep -v Type)
if [[ $ISLIVE == 1 ]]
then
openvt -c 13 -s -f -w -- dialog --msgbox "No Kernel Mode Setting, or Framebuffer device found.

This means your video card does not support KMS, and doesn't create a framebuffer by default. either of which are needed for Weston to work.

You can select a Framebuffer boot option when you start the Live CD, to force a boot with a framebuffer device." 20 50 --no-cancel
else 
openvt -c 13 -s -f -w -- dialog --msgbox "No Kernel Mode Setting, or Framebuffer device found.

This means your video card does not support KMS, and doesn't create a framebuffer by default. either of which are needed for Weston to work.

Will now start a utility to assist you in configuring your system to boot with a framebuffer device." 20 50 --no-cancel
openvt -c 13 -s -f -w -- rbos-add-framebuffer
fi
openvt -c 13 -s -f -w -- dialog --msgbox "Can not start Weston.

Will now reboot." 20 50 --no-cancel
reboot
exit
fi


#Get the next TTY that is open for use
function GetNextTTY
{
TTYInUse=1
while [[ $TTYInUse -ne 0 && $LastTTY -lt 62 ]]
do
((LastTTY++))
TTYInUse=$(openvt -c $LastTTY -- /bin/true 2>&1 | grep -c "is in use")
done
AvailibleTTY=$LastTTY
echo $AvailibleTTY
}

function RegisterSession
{
COMMANDSTRING=$1
AllSessionTTYs[$AllSessions]=$(echo "$COMMANDSTRING" | sed -ne 2p )
AllSessionPIDs[$AllSessions]=$(echo "$COMMANDSTRING" | sed -ne 3p )
AllSessionUsers[$AllSessions]=$(echo "$COMMANDSTRING" | sed -ne 4p )
((AllSessions++))
}

function DialogWait
{
waitseconds=$1
countseconds=0
while [[ $countseconds -lt $waitseconds ]]
do
percent=$(( $countseconds * 100 / $waitseconds ))
echo $percent
((countseconds++))
sleep 1
done | zenity --title="autologin" --no-cancel --progress --auto-close --text="Waiting for Autologin timeout..."
}


function ShowInfo
{
if [[ $WESTONBACKEND == "fbdev-backend.so" ]]
then
BACKENDSTRING="Weston is using the framebuffer backend.

This probably means the current video card drivers do not 
support the native kernel mode setting that is optimal for Weston."
else
BACKENDSTRING="Your system is using Weston with Kernel mode setting.

This is the optimal way to run Weston."
fi
zenity --title="Information" --forms --text="This is a third party fan made distribution!

$BACKENDSTRING

The key icon brings up a login prompt
The arrow icon brings up a prompt to swich between running sessions
The red X icon brings up a shutdown prompt
The i icon shows this help prompt"

}

function SwitchUserDialog 
{
unset SessionList
NumberOfSessions=${#AllSessionPIDs[@]}
((NumberOfSessions--))

while [[ $NumberOfSessions -ge 0 ]]
do
if [[ -e /proc/${AllSessionPIDs[$NumberOfSessions]}/environ ]]
then
SessionList+="$NumberOfSessions
${AllSessionTTYs[$NumberOfSessions]}
${AllSessionPIDs[$NumberOfSessions]}
${AllSessionUsers[$NumberOfSessions]}
"
fi
((NumberOfSessions--))
done

SessionList+="-1


New Session...
"


unset ChangeSession
ChangeSession=$(echo "$SessionList"  | sed '$d'| zenity --title="Switch User" --list --text "Select a running session to change into" --column sessionid --column tty --column pid --column username --print-column=1 --hide-column=3 )

if [[ $ChangeSession == "-1" ]]
then
AuthenticateUser
else 

if [[ $ChangeSession ]]
then

if [[ -e /proc/${AllSessionPIDs[$ChangeSession]}/environ ]]
then
chvt ${AllSessionTTYs[$ChangeSession]}
else
zenity --title="Switch User" --warning --text="The selected session was not found. The session may have quit."
fi

fi

fi


}

#Attempt to get the users authentication
function AuthenticateUser
{
#Get the list of nonsystem users
UIDMIN=$(cat /etc/login.defs | grep -e "^UID_MIN" | awk '{print $2}')
UIDMAX=$(cat /etc/login.defs | grep -e "^UID_MAX" | awk '{print $2}')
USERLIST=$(cat /etc/passwd | awk -v UIDMIN=$UIDMIN -v UIDMAX=$UIDMAX -F : '{ if ($3>=UIDMIN && $3 <=UIDMAX) print $1}')
if [[ $ISLIVE == 1 ]]
then
USERLIST+=$(cat /etc/passwd | awk -v UIDMIN=999 -v UIDMAX=999 -F : '{ if ($3>=UIDMIN && $3 <=UIDMAX) print $1}' )
fi

#Parse the list of sessions specified, so that zenity can use it as a list of sessions
WSESSIONLIST=$(cat /usr/share/wsessions  |sed 's/,/ \n/g')
#select the session
WSESSION=$(echo "$WSESSIONLIST" | zenity --title="Pick a Session..." --list --text "Select a Weston Desktop Environment to use" --column session --column name --hide-column=1 --print-column=1 --hide-header )
if [[ -z $WSESSION ]]
then 
zenity --warning --text="No session selected. Defaulting to the Default Weston Desktop Shell."
WSESSION=desktop-shell.so
fi

#present the list of the users to the system
export LOGINUSER=$(echo "$USERLIST" | zenity --title="Username" --list --text "Select a user from the list to log into."  --column users  --hide-header | grep -v 'startup message: remove:')

#if there is no user selected then show a dialog. If a user was selected, prompt for its login
if [[ -z $LOGINUSER ]]
then
zenity --warning --text="No User selected" 
else
export SessionTTY=$(GetNextTTY)
export LOGINPASSWORD=$(zenity --title="Password" --password --text "Type Password for $LOGINUSER" | grep -v 'startup message: remove:')
openvt -w -f -c 63 -- su daemon --preserve-environment -c "/usr/libexec/wayland_login_helpers/login-helper $SessionTTY $WSESSION"
passwordresult=$?
unset LOGINPASSWORD
if [[ $passwordresult != 0 ]]
then
zenity --warning --text="Invalid password for $LOGINUSER"
fi
fi

}


#Funtion for prompting for leave options
function LeavePrompt
{
ACTION=$(echo "Shutdown
Restart
Standby
Hibernate" | zenity --title="Leave..." --list  --hide-header --text="What do you want to do?" --column 'action' | grep -v 'startup message: remove:' )
if [[ $ACTION == "Shutdown" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
RESULT=$?
elif [[ $ACTION == "Restart" ]]
then
dbus-send --system --dest=org.freedesktop.ConsoleKit --type=method_call --print-reply --reply-timeout=2000 /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Restart
RESULT=$?
elif [[ $ACTION == "Standby" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Suspend
RESULT=$?
elif [[ $ACTION == "Hibernate" ]]
then
dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Hibernate
RESULT=$?
else
exit
fi
if [[ $RESULT != 0 ]]
then
zenity --title="Failure" --warning --text="Failed to $ACTION"
fi
}





#Call the host server for the login gui, running as a seperate user
function LoginWestonLauncher
{

while [ 1 ]
do

if [[ ! -e /run/loginmanagerdisplay ]]
then 
openvt -c $HostVT -- weston-display-server --tty=$HostVT --backend=$WESTONBACKEND --socket=loginmanagerdisplay 
fi

sleep 5

done
}




function StartAutoLogin
{
if [[ $ISLIVE == 1 ]]
then
AUTOLOGINUSER=$(cat /etc/casper.conf | grep USERNAME= | awk -F = '{print $2}' | sed 's/\"//g' | head -1 )
else

if [[ -e /etc/waylandloginmanager.conf ]]
then
AUTOLOGINUSER=$(cat /etc/waylandloginmanager.conf | grep autologin-user= | awk -F = '{print $2}' | head -1 )
else
AUTOLOGINUSER=$(cat /etc/lightdm/lightdm.conf | grep autologin-user= | awk -F = '{print $2}' | head -1 )
echo "autologin-user=$AUTOLOGINUSER" >> /etc/waylandloginmanager.conf
fi

fi

if [[ ! -z $AUTOLOGINUSER ]]
then
DialogWait 15
export AutoSessionTTY=$(GetNextTTY)
su $AUTOLOGINUSER -c "/usr/bin/wlsessionstarter $AutoSessionTTY desktop-shell.so" &
fi 
}

#The part of the script that reads the FIFO for IPC from users logoff dialogs, the helper scripts on the login window, or the session startup scripts
function ReadCommandFIFO
{
#Create communication fifo.
rm -r /run/loginmanager_control
mkfifo -m 777 /run/loginmanager_control


while [ 1 ]
do

COMMAND=$(cat /run/loginmanager_control)
echo "received command $COMMAND"
if [[ $COMMAND == "Switch" ]]
then
chvt $HostVT
SwitchUserDialog &
elif [[ $COMMAND == "Change" ]]
then
chvt $HostVT
elif [[ $COMMAND == "Login" ]]
then
AuthenticateUser &
elif [[ $COMMAND == "Leave" ]] 
then
LeavePrompt &
elif [[ $COMMAND = RegisterSession* ]]
then
RegisterSession "$COMMAND"
elif [[ $COMMAND == "Info" ]]
then
ShowInfo &
else
echo "Invalid command"
fi

done
}

#Get the TTY that will hold the Wayland server that displays the login screen.
HostVT=$(GetNextTTY)
LastTTY=$HostVT

#Start the main login Weston server
LoginWestonLauncher &

#Start the autologin launcher
StartAutoLogin &

#Start the login managers IPC
ReadCommandFIFO
